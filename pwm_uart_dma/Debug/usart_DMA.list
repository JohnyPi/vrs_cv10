
usart_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f74  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000434  08006108  08006108  00016108  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800653c  0800653c  000204f0  2**0
                  CONTENTS
  4 .ARM          00000000  0800653c  0800653c  000204f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800653c  0800653c  000204f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800653c  0800653c  0001653c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006540  08006540  00016540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004f0  20000000  08006544  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000184  200004f0  08006a34  000204f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000674  08006a34  00020674  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000204f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a02d  00000000  00000000  00020520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f96  00000000  00000000  0002a54d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000960  00000000  00000000  0002c4e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000868  00000000  00000000  0002ce48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000181c5  00000000  00000000  0002d6b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000077af  00000000  00000000  00045875  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007a28b  00000000  00000000  0004d024  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c72af  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003644  00000000  00000000  000c7304  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200004f0 	.word	0x200004f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080060ec 	.word	0x080060ec

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200004f4 	.word	0x200004f4
 80001cc:	080060ec 	.word	0x080060ec

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <LL_DMA_ClearFlag_GI1>:
  * @rmtoll IFCR         CGIF1         LL_DMA_ClearFlag_GI1
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_GI1(DMA_TypeDef *DMAx)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF1);
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	605a      	str	r2, [r3, #4]
}
 8000bb6:	bf00      	nop
 8000bb8:	370c      	adds	r7, #12
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr

08000bc2 <LL_DMA_ClearFlag_GI2>:
  * @rmtoll IFCR         CGIF2         LL_DMA_ClearFlag_GI2
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_GI2(DMA_TypeDef *DMAx)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	b083      	sub	sp, #12
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF2);
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	2210      	movs	r2, #16
 8000bce:	605a      	str	r2, [r3, #4]
}
 8000bd0:	bf00      	nop
 8000bd2:	370c      	adds	r7, #12
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr

08000bdc <LL_DMA_ClearFlag_GI3>:
  * @rmtoll IFCR         CGIF3         LL_DMA_ClearFlag_GI3
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_GI3(DMA_TypeDef *DMAx)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF3);
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bea:	605a      	str	r2, [r3, #4]
}
 8000bec:	bf00      	nop
 8000bee:	370c      	adds	r7, #12
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr

08000bf8 <LL_DMA_ClearFlag_GI4>:
  * @rmtoll IFCR         CGIF4         LL_DMA_ClearFlag_GI4
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_GI4(DMA_TypeDef *DMAx)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF4);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c06:	605a      	str	r2, [r3, #4]
}
 8000c08:	bf00      	nop
 8000c0a:	370c      	adds	r7, #12
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr

08000c14 <LL_DMA_ClearFlag_GI5>:
  * @rmtoll IFCR         CGIF5         LL_DMA_ClearFlag_GI5
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_GI5(DMA_TypeDef *DMAx)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF5);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c22:	605a      	str	r2, [r3, #4]
}
 8000c24:	bf00      	nop
 8000c26:	370c      	adds	r7, #12
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr

08000c30 <LL_DMA_ClearFlag_GI6>:
  * @rmtoll IFCR         CGIF6         LL_DMA_ClearFlag_GI6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_GI6(DMA_TypeDef *DMAx)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF6);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000c3e:	605a      	str	r2, [r3, #4]
}
 8000c40:	bf00      	nop
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <LL_DMA_ClearFlag_GI7>:
  * @rmtoll IFCR         CGIF7         LL_DMA_ClearFlag_GI7
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_GI7(DMA_TypeDef *DMAx)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CGIF7);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000c5a:	605a      	str	r2, [r3, #4]
}
 8000c5c:	bf00      	nop
 8000c5e:	370c      	adds	r7, #12
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr

08000c68 <LL_DMA_DeInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: DMA registers are de-initialized
  *          - ERROR: DMA registers are not de-initialized
  */
uint32_t LL_DMA_DeInit(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b084      	sub	sp, #16
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	6039      	str	r1, [r7, #0]
  DMA_Channel_TypeDef *tmp = (DMA_Channel_TypeDef *)DMA1_Channel1;
 8000c72:	4b45      	ldr	r3, [pc, #276]	; (8000d88 <LL_DMA_DeInit+0x120>)
 8000c74:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = SUCCESS;
 8000c76:	2300      	movs	r3, #0
 8000c78:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA Instance DMAx and Channel parameters*/
  assert_param(IS_LL_DMA_ALL_CHANNEL_INSTANCE(DMAx, Channel));

    tmp = (DMA_Channel_TypeDef *)(__LL_DMA_GET_CHANNEL_INSTANCE(DMAx, Channel));
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4a43      	ldr	r2, [pc, #268]	; (8000d8c <LL_DMA_DeInit+0x124>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d102      	bne.n	8000c88 <LL_DMA_DeInit+0x20>
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	2b01      	cmp	r3, #1
 8000c86:	d032      	beq.n	8000cee <LL_DMA_DeInit+0x86>
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	4a40      	ldr	r2, [pc, #256]	; (8000d8c <LL_DMA_DeInit+0x124>)
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d102      	bne.n	8000c96 <LL_DMA_DeInit+0x2e>
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	2b02      	cmp	r3, #2
 8000c94:	d028      	beq.n	8000ce8 <LL_DMA_DeInit+0x80>
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	4a3c      	ldr	r2, [pc, #240]	; (8000d8c <LL_DMA_DeInit+0x124>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d102      	bne.n	8000ca4 <LL_DMA_DeInit+0x3c>
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	2b03      	cmp	r3, #3
 8000ca2:	d01e      	beq.n	8000ce2 <LL_DMA_DeInit+0x7a>
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	4a39      	ldr	r2, [pc, #228]	; (8000d8c <LL_DMA_DeInit+0x124>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d102      	bne.n	8000cb2 <LL_DMA_DeInit+0x4a>
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	2b04      	cmp	r3, #4
 8000cb0:	d014      	beq.n	8000cdc <LL_DMA_DeInit+0x74>
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4a35      	ldr	r2, [pc, #212]	; (8000d8c <LL_DMA_DeInit+0x124>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d102      	bne.n	8000cc0 <LL_DMA_DeInit+0x58>
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	2b05      	cmp	r3, #5
 8000cbe:	d00a      	beq.n	8000cd6 <LL_DMA_DeInit+0x6e>
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	4a32      	ldr	r2, [pc, #200]	; (8000d8c <LL_DMA_DeInit+0x124>)
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d104      	bne.n	8000cd2 <LL_DMA_DeInit+0x6a>
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	2b06      	cmp	r3, #6
 8000ccc:	d101      	bne.n	8000cd2 <LL_DMA_DeInit+0x6a>
 8000cce:	4b30      	ldr	r3, [pc, #192]	; (8000d90 <LL_DMA_DeInit+0x128>)
 8000cd0:	e003      	b.n	8000cda <LL_DMA_DeInit+0x72>
 8000cd2:	4b30      	ldr	r3, [pc, #192]	; (8000d94 <LL_DMA_DeInit+0x12c>)
 8000cd4:	e001      	b.n	8000cda <LL_DMA_DeInit+0x72>
 8000cd6:	4b30      	ldr	r3, [pc, #192]	; (8000d98 <LL_DMA_DeInit+0x130>)
 8000cd8:	e002      	b.n	8000ce0 <LL_DMA_DeInit+0x78>
 8000cda:	e001      	b.n	8000ce0 <LL_DMA_DeInit+0x78>
 8000cdc:	4b2f      	ldr	r3, [pc, #188]	; (8000d9c <LL_DMA_DeInit+0x134>)
 8000cde:	e002      	b.n	8000ce6 <LL_DMA_DeInit+0x7e>
 8000ce0:	e001      	b.n	8000ce6 <LL_DMA_DeInit+0x7e>
 8000ce2:	4b2f      	ldr	r3, [pc, #188]	; (8000da0 <LL_DMA_DeInit+0x138>)
 8000ce4:	e002      	b.n	8000cec <LL_DMA_DeInit+0x84>
 8000ce6:	e001      	b.n	8000cec <LL_DMA_DeInit+0x84>
 8000ce8:	4b2e      	ldr	r3, [pc, #184]	; (8000da4 <LL_DMA_DeInit+0x13c>)
 8000cea:	e001      	b.n	8000cf0 <LL_DMA_DeInit+0x88>
 8000cec:	e000      	b.n	8000cf0 <LL_DMA_DeInit+0x88>
 8000cee:	4b26      	ldr	r3, [pc, #152]	; (8000d88 <LL_DMA_DeInit+0x120>)
 8000cf0:	60bb      	str	r3, [r7, #8]

    /* Disable the selected DMAx_Channely */
    CLEAR_BIT(tmp->CCR, DMA_CCR_EN);
 8000cf2:	68bb      	ldr	r3, [r7, #8]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f023 0201 	bic.w	r2, r3, #1
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	601a      	str	r2, [r3, #0]

    /* Reset DMAx_Channely control register */
    LL_DMA_WriteReg(tmp, CCR, 0U);
 8000cfe:	68bb      	ldr	r3, [r7, #8]
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]

    /* Reset DMAx_Channely remaining bytes register */
    LL_DMA_WriteReg(tmp, CNDTR, 0U);
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	2200      	movs	r2, #0
 8000d08:	605a      	str	r2, [r3, #4]

    /* Reset DMAx_Channely peripheral address register */
    LL_DMA_WriteReg(tmp, CPAR, 0U);
 8000d0a:	68bb      	ldr	r3, [r7, #8]
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	609a      	str	r2, [r3, #8]

    /* Reset DMAx_Channely memory address register */
    LL_DMA_WriteReg(tmp, CMAR, 0U);
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	2200      	movs	r2, #0
 8000d14:	60da      	str	r2, [r3, #12]


    if (Channel == LL_DMA_CHANNEL_1)
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	2b01      	cmp	r3, #1
 8000d1a:	d103      	bne.n	8000d24 <LL_DMA_DeInit+0xbc>
    {
      /* Reset interrupt pending bits for DMAx Channel1 */
      LL_DMA_ClearFlag_GI1(DMAx);
 8000d1c:	6878      	ldr	r0, [r7, #4]
 8000d1e:	f7ff ff43 	bl	8000ba8 <LL_DMA_ClearFlag_GI1>
 8000d22:	e02b      	b.n	8000d7c <LL_DMA_DeInit+0x114>
    }
    else if (Channel == LL_DMA_CHANNEL_2)
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	2b02      	cmp	r3, #2
 8000d28:	d103      	bne.n	8000d32 <LL_DMA_DeInit+0xca>
    {
      /* Reset interrupt pending bits for DMAx Channel2 */
      LL_DMA_ClearFlag_GI2(DMAx);
 8000d2a:	6878      	ldr	r0, [r7, #4]
 8000d2c:	f7ff ff49 	bl	8000bc2 <LL_DMA_ClearFlag_GI2>
 8000d30:	e024      	b.n	8000d7c <LL_DMA_DeInit+0x114>
    }
    else if (Channel == LL_DMA_CHANNEL_3)
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	2b03      	cmp	r3, #3
 8000d36:	d103      	bne.n	8000d40 <LL_DMA_DeInit+0xd8>
    {
      /* Reset interrupt pending bits for DMAx Channel3 */
      LL_DMA_ClearFlag_GI3(DMAx);
 8000d38:	6878      	ldr	r0, [r7, #4]
 8000d3a:	f7ff ff4f 	bl	8000bdc <LL_DMA_ClearFlag_GI3>
 8000d3e:	e01d      	b.n	8000d7c <LL_DMA_DeInit+0x114>
    }
    else if (Channel == LL_DMA_CHANNEL_4)
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	2b04      	cmp	r3, #4
 8000d44:	d103      	bne.n	8000d4e <LL_DMA_DeInit+0xe6>
    {
      /* Reset interrupt pending bits for DMAx Channel4 */
      LL_DMA_ClearFlag_GI4(DMAx);
 8000d46:	6878      	ldr	r0, [r7, #4]
 8000d48:	f7ff ff56 	bl	8000bf8 <LL_DMA_ClearFlag_GI4>
 8000d4c:	e016      	b.n	8000d7c <LL_DMA_DeInit+0x114>
    }
    else if (Channel == LL_DMA_CHANNEL_5)
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	2b05      	cmp	r3, #5
 8000d52:	d103      	bne.n	8000d5c <LL_DMA_DeInit+0xf4>
    {
      /* Reset interrupt pending bits for DMAx Channel5 */
      LL_DMA_ClearFlag_GI5(DMAx);
 8000d54:	6878      	ldr	r0, [r7, #4]
 8000d56:	f7ff ff5d 	bl	8000c14 <LL_DMA_ClearFlag_GI5>
 8000d5a:	e00f      	b.n	8000d7c <LL_DMA_DeInit+0x114>
    }

    else if (Channel == LL_DMA_CHANNEL_6)
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	2b06      	cmp	r3, #6
 8000d60:	d103      	bne.n	8000d6a <LL_DMA_DeInit+0x102>
    {
      /* Reset interrupt pending bits for DMAx Channel6 */
      LL_DMA_ClearFlag_GI6(DMAx);
 8000d62:	6878      	ldr	r0, [r7, #4]
 8000d64:	f7ff ff64 	bl	8000c30 <LL_DMA_ClearFlag_GI6>
 8000d68:	e008      	b.n	8000d7c <LL_DMA_DeInit+0x114>
    }
    else if (Channel == LL_DMA_CHANNEL_7)
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	2b07      	cmp	r3, #7
 8000d6e:	d103      	bne.n	8000d78 <LL_DMA_DeInit+0x110>
    {
      /* Reset interrupt pending bits for DMAx Channel7 */
      LL_DMA_ClearFlag_GI7(DMAx);
 8000d70:	6878      	ldr	r0, [r7, #4]
 8000d72:	f7ff ff6b 	bl	8000c4c <LL_DMA_ClearFlag_GI7>
 8000d76:	e001      	b.n	8000d7c <LL_DMA_DeInit+0x114>
    }
    else
    {
      status = ERROR;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	73fb      	strb	r3, [r7, #15]
    }

  return status;
 8000d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3710      	adds	r7, #16
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40020008 	.word	0x40020008
 8000d8c:	40020000 	.word	0x40020000
 8000d90:	4002006c 	.word	0x4002006c
 8000d94:	40020080 	.word	0x40020080
 8000d98:	40020058 	.word	0x40020058
 8000d9c:	40020044 	.word	0x40020044
 8000da0:	40020030 	.word	0x40020030
 8000da4:	4002001c 	.word	0x4002001c

08000da8 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b089      	sub	sp, #36	; 0x24
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	617b      	str	r3, [r7, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	fa93 f3a3 	rbit	r3, r3
 8000dc2:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000dc4:	693b      	ldr	r3, [r7, #16]
 8000dc6:	fab3 f383 	clz	r3, r3
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	2103      	movs	r1, #3
 8000dce:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd2:	43db      	mvns	r3, r3
 8000dd4:	401a      	ands	r2, r3
 8000dd6:	68bb      	ldr	r3, [r7, #8]
 8000dd8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	fa93 f3a3 	rbit	r3, r3
 8000de0:	61bb      	str	r3, [r7, #24]
  return(result);
 8000de2:	69bb      	ldr	r3, [r7, #24]
 8000de4:	fab3 f383 	clz	r3, r3
 8000de8:	005b      	lsls	r3, r3, #1
 8000dea:	6879      	ldr	r1, [r7, #4]
 8000dec:	fa01 f303 	lsl.w	r3, r1, r3
 8000df0:	431a      	orrs	r2, r3
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	601a      	str	r2, [r3, #0]
}
 8000df6:	bf00      	nop
 8000df8:	3724      	adds	r7, #36	; 0x24
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr

08000e02 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8000e02:	b480      	push	{r7}
 8000e04:	b085      	sub	sp, #20
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	60f8      	str	r0, [r7, #12]
 8000e0a:	60b9      	str	r1, [r7, #8]
 8000e0c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	685a      	ldr	r2, [r3, #4]
 8000e12:	68bb      	ldr	r3, [r7, #8]
 8000e14:	43db      	mvns	r3, r3
 8000e16:	401a      	ands	r2, r3
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	6879      	ldr	r1, [r7, #4]
 8000e1c:	fb01 f303 	mul.w	r3, r1, r3
 8000e20:	431a      	orrs	r2, r3
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	605a      	str	r2, [r3, #4]
}
 8000e26:	bf00      	nop
 8000e28:	3714      	adds	r7, #20
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr

08000e32 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8000e32:	b480      	push	{r7}
 8000e34:	b089      	sub	sp, #36	; 0x24
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	60f8      	str	r0, [r7, #12]
 8000e3a:	60b9      	str	r1, [r7, #8]
 8000e3c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	689a      	ldr	r2, [r3, #8]
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	fa93 f3a3 	rbit	r3, r3
 8000e4c:	613b      	str	r3, [r7, #16]
  return(result);
 8000e4e:	693b      	ldr	r3, [r7, #16]
 8000e50:	fab3 f383 	clz	r3, r3
 8000e54:	005b      	lsls	r3, r3, #1
 8000e56:	2103      	movs	r1, #3
 8000e58:	fa01 f303 	lsl.w	r3, r1, r3
 8000e5c:	43db      	mvns	r3, r3
 8000e5e:	401a      	ands	r2, r3
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	fa93 f3a3 	rbit	r3, r3
 8000e6a:	61bb      	str	r3, [r7, #24]
  return(result);
 8000e6c:	69bb      	ldr	r3, [r7, #24]
 8000e6e:	fab3 f383 	clz	r3, r3
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	6879      	ldr	r1, [r7, #4]
 8000e76:	fa01 f303 	lsl.w	r3, r1, r3
 8000e7a:	431a      	orrs	r2, r3
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8000e80:	bf00      	nop
 8000e82:	3724      	adds	r7, #36	; 0x24
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr

08000e8c <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b089      	sub	sp, #36	; 0x24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	60f8      	str	r0, [r7, #12]
 8000e94:	60b9      	str	r1, [r7, #8]
 8000e96:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	68da      	ldr	r2, [r3, #12]
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	fa93 f3a3 	rbit	r3, r3
 8000ea6:	613b      	str	r3, [r7, #16]
  return(result);
 8000ea8:	693b      	ldr	r3, [r7, #16]
 8000eaa:	fab3 f383 	clz	r3, r3
 8000eae:	005b      	lsls	r3, r3, #1
 8000eb0:	2103      	movs	r1, #3
 8000eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb6:	43db      	mvns	r3, r3
 8000eb8:	401a      	ands	r2, r3
 8000eba:	68bb      	ldr	r3, [r7, #8]
 8000ebc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	fa93 f3a3 	rbit	r3, r3
 8000ec4:	61bb      	str	r3, [r7, #24]
  return(result);
 8000ec6:	69bb      	ldr	r3, [r7, #24]
 8000ec8:	fab3 f383 	clz	r3, r3
 8000ecc:	005b      	lsls	r3, r3, #1
 8000ece:	6879      	ldr	r1, [r7, #4]
 8000ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed4:	431a      	orrs	r2, r3
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	60da      	str	r2, [r3, #12]
}
 8000eda:	bf00      	nop
 8000edc:	3724      	adds	r7, #36	; 0x24
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr

08000ee6 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	b089      	sub	sp, #36	; 0x24
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	60f8      	str	r0, [r7, #12]
 8000eee:	60b9      	str	r1, [r7, #8]
 8000ef0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	6a1a      	ldr	r2, [r3, #32]
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	fa93 f3a3 	rbit	r3, r3
 8000f00:	613b      	str	r3, [r7, #16]
  return(result);
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	fab3 f383 	clz	r3, r3
 8000f08:	009b      	lsls	r3, r3, #2
 8000f0a:	210f      	movs	r1, #15
 8000f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f10:	43db      	mvns	r3, r3
 8000f12:	401a      	ands	r2, r3
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	fa93 f3a3 	rbit	r3, r3
 8000f1e:	61bb      	str	r3, [r7, #24]
  return(result);
 8000f20:	69bb      	ldr	r3, [r7, #24]
 8000f22:	fab3 f383 	clz	r3, r3
 8000f26:	009b      	lsls	r3, r3, #2
 8000f28:	6879      	ldr	r1, [r7, #4]
 8000f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f2e:	431a      	orrs	r2, r3
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8000f34:	bf00      	nop
 8000f36:	3724      	adds	r7, #36	; 0x24
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr

08000f40 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b089      	sub	sp, #36	; 0x24
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	60f8      	str	r0, [r7, #12]
 8000f48:	60b9      	str	r1, [r7, #8]
 8000f4a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	0a1b      	lsrs	r3, r3, #8
 8000f54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	fa93 f3a3 	rbit	r3, r3
 8000f5c:	613b      	str	r3, [r7, #16]
  return(result);
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	fab3 f383 	clz	r3, r3
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	210f      	movs	r1, #15
 8000f68:	fa01 f303 	lsl.w	r3, r1, r3
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	401a      	ands	r2, r3
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	0a1b      	lsrs	r3, r3, #8
 8000f74:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	fa93 f3a3 	rbit	r3, r3
 8000f7c:	61bb      	str	r3, [r7, #24]
  return(result);
 8000f7e:	69bb      	ldr	r3, [r7, #24]
 8000f80:	fab3 f383 	clz	r3, r3
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	6879      	ldr	r1, [r7, #4]
 8000f88:	fa01 f303 	lsl.w	r3, r1, r3
 8000f8c:	431a      	orrs	r2, r3
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8000f92:	bf00      	nop
 8000f94:	3724      	adds	r7, #36	; 0x24
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr

08000f9e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b088      	sub	sp, #32
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
 8000fa6:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8000fac:	2300      	movs	r3, #0
 8000fae:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	fa93 f3a3 	rbit	r3, r3
 8000fbc:	613b      	str	r3, [r7, #16]
  return(result);
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	fab3 f383 	clz	r3, r3
 8000fc4:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000fc6:	e048      	b.n	800105a <LL_GPIO_Init+0xbc>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	2101      	movs	r1, #1
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 8000fd8:	69bb      	ldr	r3, [r7, #24]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d03a      	beq.n	8001054 <LL_GPIO_Init+0xb6>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	69b9      	ldr	r1, [r7, #24]
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	f7ff fede 	bl	8000da8 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d003      	beq.n	8000ffc <LL_GPIO_Init+0x5e>
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	2b02      	cmp	r3, #2
 8000ffa:	d106      	bne.n	800100a <LL_GPIO_Init+0x6c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	689b      	ldr	r3, [r3, #8]
 8001000:	461a      	mov	r2, r3
 8001002:	69b9      	ldr	r1, [r7, #24]
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f7ff ff14 	bl	8000e32 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	691b      	ldr	r3, [r3, #16]
 800100e:	461a      	mov	r2, r3
 8001010:	69b9      	ldr	r1, [r7, #24]
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f7ff ff3a 	bl	8000e8c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	2b02      	cmp	r3, #2
 800101e:	d119      	bne.n	8001054 <LL_GPIO_Init+0xb6>
 8001020:	69bb      	ldr	r3, [r7, #24]
 8001022:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	fa93 f3a3 	rbit	r3, r3
 800102a:	60bb      	str	r3, [r7, #8]
  return(result);
 800102c:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800102e:	fab3 f383 	clz	r3, r3
 8001032:	2b07      	cmp	r3, #7
 8001034:	d807      	bhi.n	8001046 <LL_GPIO_Init+0xa8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	695b      	ldr	r3, [r3, #20]
 800103a:	461a      	mov	r2, r3
 800103c:	69b9      	ldr	r1, [r7, #24]
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	f7ff ff51 	bl	8000ee6 <LL_GPIO_SetAFPin_0_7>
 8001044:	e006      	b.n	8001054 <LL_GPIO_Init+0xb6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	695b      	ldr	r3, [r3, #20]
 800104a:	461a      	mov	r2, r3
 800104c:	69b9      	ldr	r1, [r7, #24]
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f7ff ff76 	bl	8000f40 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	3301      	adds	r3, #1
 8001058:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	fa22 f303 	lsr.w	r3, r2, r3
 8001064:	2b00      	cmp	r3, #0
 8001066:	d1af      	bne.n	8000fc8 <LL_GPIO_Init+0x2a>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	2b01      	cmp	r3, #1
 800106e:	d003      	beq.n	8001078 <LL_GPIO_Init+0xda>
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	2b02      	cmp	r3, #2
 8001076:	d107      	bne.n	8001088 <LL_GPIO_Init+0xea>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	6819      	ldr	r1, [r3, #0]
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	461a      	mov	r2, r3
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f7ff febd 	bl	8000e02 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8001088:	2300      	movs	r3, #0
}
 800108a:	4618      	mov	r0, r3
 800108c:	3720      	adds	r7, #32
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
	...

08001094 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001098:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <LL_RCC_HSI_IsReady+0x20>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f003 0302 	and.w	r3, r3, #2
 80010a0:	2b02      	cmp	r3, #2
 80010a2:	bf0c      	ite	eq
 80010a4:	2301      	moveq	r3, #1
 80010a6:	2300      	movne	r3, #0
 80010a8:	b2db      	uxtb	r3, r3
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	40021000 	.word	0x40021000

080010b8 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 80010bc:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <LL_RCC_LSE_IsReady+0x20>)
 80010be:	6a1b      	ldr	r3, [r3, #32]
 80010c0:	f003 0302 	and.w	r3, r3, #2
 80010c4:	2b02      	cmp	r3, #2
 80010c6:	bf0c      	ite	eq
 80010c8:	2301      	moveq	r3, #1
 80010ca:	2300      	movne	r3, #0
 80010cc:	b2db      	uxtb	r3, r3
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	40021000 	.word	0x40021000

080010dc <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80010e0:	4b04      	ldr	r3, [pc, #16]	; (80010f4 <LL_RCC_GetSysClkSource+0x18>)
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f003 030c 	and.w	r3, r3, #12
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	40021000 	.word	0x40021000

080010f8 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80010fc:	4b04      	ldr	r3, [pc, #16]	; (8001110 <LL_RCC_GetAHBPrescaler+0x18>)
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001104:	4618      	mov	r0, r3
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	40021000 	.word	0x40021000

08001114 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001118:	4b04      	ldr	r3, [pc, #16]	; (800112c <LL_RCC_GetAPB1Prescaler+0x18>)
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001120:	4618      	mov	r0, r3
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	40021000 	.word	0x40021000

08001130 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001134:	4b04      	ldr	r3, [pc, #16]	; (8001148 <LL_RCC_GetAPB2Prescaler+0x18>)
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800113c:	4618      	mov	r0, r3
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	40021000 	.word	0x40021000

0800114c <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 8001154:	4b07      	ldr	r3, [pc, #28]	; (8001174 <LL_RCC_GetUSARTClockSource+0x28>)
 8001156:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001158:	2103      	movs	r1, #3
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	fa01 f303 	lsl.w	r3, r1, r3
 8001160:	401a      	ands	r2, r3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	061b      	lsls	r3, r3, #24
 8001166:	4313      	orrs	r3, r2
}
 8001168:	4618      	mov	r0, r3
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr
 8001174:	40021000 	.word	0x40021000

08001178 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 800117c:	4b04      	ldr	r3, [pc, #16]	; (8001190 <LL_RCC_PLL_GetMainSource+0x18>)
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 8001184:	4618      	mov	r0, r3
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	40021000 	.word	0x40021000

08001194 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8001198:	4b04      	ldr	r3, [pc, #16]	; (80011ac <LL_RCC_PLL_GetMultiplicator+0x18>)
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	40021000 	.word	0x40021000

080011b0 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 80011b4:	4b04      	ldr	r3, [pc, #16]	; (80011c8 <LL_RCC_PLL_GetPrediv+0x18>)
 80011b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011b8:	f003 030f 	and.w	r3, r3, #15
}
 80011bc:	4618      	mov	r0, r3
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	40021000 	.word	0x40021000

080011cc <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80011d4:	f000 f864 	bl	80012a0 <RCC_GetSystemClockFreq>
 80011d8:	4602      	mov	r2, r0
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4618      	mov	r0, r3
 80011e4:	f000 f882 	bl	80012ec <RCC_GetHCLKClockFreq>
 80011e8:	4602      	mov	r2, r0
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	4618      	mov	r0, r3
 80011f4:	f000 f890 	bl	8001318 <RCC_GetPCLK1ClockFreq>
 80011f8:	4602      	mov	r2, r0
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	4618      	mov	r0, r3
 8001204:	f000 f89c 	bl	8001340 <RCC_GetPCLK2ClockFreq>
 8001208:	4602      	mov	r2, r0
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	60da      	str	r2, [r3, #12]
}
 800120e:	bf00      	nop
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
	...

08001218 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8001220:	2300      	movs	r3, #0
 8001222:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d12d      	bne.n	8001286 <LL_RCC_GetUSARTClockFreq+0x6e>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f7ff ff8e 	bl	800114c <LL_RCC_GetUSARTClockSource>
 8001230:	4603      	mov	r3, r0
 8001232:	2b03      	cmp	r3, #3
 8001234:	d00a      	beq.n	800124c <LL_RCC_GetUSARTClockFreq+0x34>
 8001236:	2b03      	cmp	r3, #3
 8001238:	d819      	bhi.n	800126e <LL_RCC_GetUSARTClockFreq+0x56>
 800123a:	2b01      	cmp	r3, #1
 800123c:	d002      	beq.n	8001244 <LL_RCC_GetUSARTClockFreq+0x2c>
 800123e:	2b02      	cmp	r3, #2
 8001240:	d00c      	beq.n	800125c <LL_RCC_GetUSARTClockFreq+0x44>
 8001242:	e014      	b.n	800126e <LL_RCC_GetUSARTClockFreq+0x56>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8001244:	f000 f82c 	bl	80012a0 <RCC_GetSystemClockFreq>
 8001248:	60f8      	str	r0, [r7, #12]
        break;
 800124a:	e021      	b.n	8001290 <LL_RCC_GetUSARTClockFreq+0x78>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 800124c:	f7ff ff22 	bl	8001094 <LL_RCC_HSI_IsReady>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d019      	beq.n	800128a <LL_RCC_GetUSARTClockFreq+0x72>
        {
          usart_frequency = HSI_VALUE;
 8001256:	4b11      	ldr	r3, [pc, #68]	; (800129c <LL_RCC_GetUSARTClockFreq+0x84>)
 8001258:	60fb      	str	r3, [r7, #12]
        }
        break;
 800125a:	e016      	b.n	800128a <LL_RCC_GetUSARTClockFreq+0x72>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 800125c:	f7ff ff2c 	bl	80010b8 <LL_RCC_LSE_IsReady>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d013      	beq.n	800128e <LL_RCC_GetUSARTClockFreq+0x76>
        {
          usart_frequency = LSE_VALUE;
 8001266:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800126a:	60fb      	str	r3, [r7, #12]
        }
        break;
 800126c:	e00f      	b.n	800128e <LL_RCC_GetUSARTClockFreq+0x76>

#if defined(RCC_CFGR3_USART1SW_PCLK1)
      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800126e:	f000 f817 	bl	80012a0 <RCC_GetSystemClockFreq>
 8001272:	4603      	mov	r3, r0
 8001274:	4618      	mov	r0, r3
 8001276:	f000 f839 	bl	80012ec <RCC_GetHCLKClockFreq>
 800127a:	4603      	mov	r3, r0
 800127c:	4618      	mov	r0, r3
 800127e:	f000 f84b 	bl	8001318 <RCC_GetPCLK1ClockFreq>
 8001282:	60f8      	str	r0, [r7, #12]
#else
      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
#endif /* RCC_CFGR3_USART1SW_PCLK1 */
        break;
 8001284:	e004      	b.n	8001290 <LL_RCC_GetUSARTClockFreq+0x78>
    }
  }
 8001286:	bf00      	nop
 8001288:	e002      	b.n	8001290 <LL_RCC_GetUSARTClockFreq+0x78>
        break;
 800128a:	bf00      	nop
 800128c:	e000      	b.n	8001290 <LL_RCC_GetUSARTClockFreq+0x78>
        break;
 800128e:	bf00      	nop
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 8001290:	68fb      	ldr	r3, [r7, #12]
}
 8001292:	4618      	mov	r0, r3
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	007a1200 	.word	0x007a1200

080012a0 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80012a6:	2300      	movs	r3, #0
 80012a8:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80012aa:	f7ff ff17 	bl	80010dc <LL_RCC_GetSysClkSource>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b08      	cmp	r3, #8
 80012b2:	d00c      	beq.n	80012ce <RCC_GetSystemClockFreq+0x2e>
 80012b4:	2b08      	cmp	r3, #8
 80012b6:	d80e      	bhi.n	80012d6 <RCC_GetSystemClockFreq+0x36>
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d002      	beq.n	80012c2 <RCC_GetSystemClockFreq+0x22>
 80012bc:	2b04      	cmp	r3, #4
 80012be:	d003      	beq.n	80012c8 <RCC_GetSystemClockFreq+0x28>
 80012c0:	e009      	b.n	80012d6 <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80012c2:	4b09      	ldr	r3, [pc, #36]	; (80012e8 <RCC_GetSystemClockFreq+0x48>)
 80012c4:	607b      	str	r3, [r7, #4]
      break;
 80012c6:	e009      	b.n	80012dc <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80012c8:	4b07      	ldr	r3, [pc, #28]	; (80012e8 <RCC_GetSystemClockFreq+0x48>)
 80012ca:	607b      	str	r3, [r7, #4]
      break;
 80012cc:	e006      	b.n	80012dc <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80012ce:	f000 f84b 	bl	8001368 <RCC_PLL_GetFreqDomain_SYS>
 80012d2:	6078      	str	r0, [r7, #4]
      break;
 80012d4:	e002      	b.n	80012dc <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 80012d6:	4b04      	ldr	r3, [pc, #16]	; (80012e8 <RCC_GetSystemClockFreq+0x48>)
 80012d8:	607b      	str	r3, [r7, #4]
      break;
 80012da:	bf00      	nop
  }

  return frequency;
 80012dc:	687b      	ldr	r3, [r7, #4]
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	007a1200 	.word	0x007a1200

080012ec <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80012f4:	f7ff ff00 	bl	80010f8 <LL_RCC_GetAHBPrescaler>
 80012f8:	4603      	mov	r3, r0
 80012fa:	091b      	lsrs	r3, r3, #4
 80012fc:	f003 030f 	and.w	r3, r3, #15
 8001300:	4a04      	ldr	r2, [pc, #16]	; (8001314 <RCC_GetHCLKClockFreq+0x28>)
 8001302:	5cd3      	ldrb	r3, [r2, r3]
 8001304:	461a      	mov	r2, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	40d3      	lsrs	r3, r2
}
 800130a:	4618      	mov	r0, r3
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	08006124 	.word	0x08006124

08001318 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001320:	f7ff fef8 	bl	8001114 <LL_RCC_GetAPB1Prescaler>
 8001324:	4603      	mov	r3, r0
 8001326:	0a1b      	lsrs	r3, r3, #8
 8001328:	4a04      	ldr	r2, [pc, #16]	; (800133c <RCC_GetPCLK1ClockFreq+0x24>)
 800132a:	5cd3      	ldrb	r3, [r2, r3]
 800132c:	461a      	mov	r2, r3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	40d3      	lsrs	r3, r2
}
 8001332:	4618      	mov	r0, r3
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	08006134 	.word	0x08006134

08001340 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8001348:	f7ff fef2 	bl	8001130 <LL_RCC_GetAPB2Prescaler>
 800134c:	4603      	mov	r3, r0
 800134e:	0adb      	lsrs	r3, r3, #11
 8001350:	4a04      	ldr	r2, [pc, #16]	; (8001364 <RCC_GetPCLK2ClockFreq+0x24>)
 8001352:	5cd3      	ldrb	r3, [r2, r3]
 8001354:	461a      	mov	r2, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	40d3      	lsrs	r3, r2
}
 800135a:	4618      	mov	r0, r3
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	08006134 	.word	0x08006134

08001368 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8001368:	b590      	push	{r4, r7, lr}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 800136e:	2300      	movs	r3, #0
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	2300      	movs	r3, #0
 8001374:	60bb      	str	r3, [r7, #8]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8001376:	f7ff feff 	bl	8001178 <LL_RCC_PLL_GetMainSource>
 800137a:	60b8      	str	r0, [r7, #8]

  switch (pllsource)
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d004      	beq.n	800138c <RCC_PLL_GetFreqDomain_SYS+0x24>
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001388:	d003      	beq.n	8001392 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 800138a:	e005      	b.n	8001398 <RCC_PLL_GetFreqDomain_SYS+0x30>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 800138c:	4b13      	ldr	r3, [pc, #76]	; (80013dc <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800138e:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8001390:	e005      	b.n	800139e <RCC_PLL_GetFreqDomain_SYS+0x36>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8001392:	4b13      	ldr	r3, [pc, #76]	; (80013e0 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8001394:	60fb      	str	r3, [r7, #12]
      break;
 8001396:	e002      	b.n	800139e <RCC_PLL_GetFreqDomain_SYS+0x36>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 8001398:	4b10      	ldr	r3, [pc, #64]	; (80013dc <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800139a:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 800139c:	bf00      	nop
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 800139e:	f7ff ff07 	bl	80011b0 <LL_RCC_PLL_GetPrediv>
 80013a2:	4603      	mov	r3, r0
 80013a4:	3301      	adds	r3, #1
 80013a6:	68fa      	ldr	r2, [r7, #12]
 80013a8:	fbb2 f4f3 	udiv	r4, r2, r3
 80013ac:	f7ff fef2 	bl	8001194 <LL_RCC_PLL_GetMultiplicator>
 80013b0:	4603      	mov	r3, r0
 80013b2:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80013b6:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80013ba:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	fa92 f2a2 	rbit	r2, r2
 80013c2:	603a      	str	r2, [r7, #0]
  return(result);
 80013c4:	683a      	ldr	r2, [r7, #0]
 80013c6:	fab2 f282 	clz	r2, r2
 80013ca:	40d3      	lsrs	r3, r2
 80013cc:	3302      	adds	r3, #2
 80013ce:	fb03 f304 	mul.w	r3, r3, r4
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3714      	adds	r7, #20
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd90      	pop	{r4, r7, pc}
 80013da:	bf00      	nop
 80013dc:	003d0900 	.word	0x003d0900
 80013e0:	007a1200 	.word	0x007a1200

080013e4 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
 80013ec:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	683a      	ldr	r2, [r7, #0]
 80013f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	683a      	ldr	r2, [r7, #0]
 800140e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001410:	bf00      	nop
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <LL_TIM_SetRepetitionCounter>:
  * @param  TIMx Timer instance
  * @param  RepetitionCounter between Min_Data=0 and Max_Data=255 or 65535 for advanced timer.
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	683a      	ldr	r2, [r7, #0]
 800142a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800142c:	bf00      	nop
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	683a      	ldr	r2, [r7, #0]
 8001446:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001448:	bf00      	nop
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	683a      	ldr	r2, [r7, #0]
 8001462:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001464:	bf00      	nop
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr

08001470 <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	683a      	ldr	r2, [r7, #0]
 800147e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001480:	bf00      	nop
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	683a      	ldr	r2, [r7, #0]
 800149a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <LL_TIM_OC_SetCompareCH5>:
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @note   CH5 channel is not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH5(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	683a      	ldr	r2, [r7, #0]
 80014ba:	659a      	str	r2, [r3, #88]	; 0x58
}
 80014bc:	bf00      	nop
 80014be:	370c      	adds	r7, #12
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr

080014c8 <LL_TIM_OC_SetCompareCH6>:
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @note   CH6 channel is not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH6(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	683a      	ldr	r2, [r7, #0]
 80014d6:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80014d8:	bf00      	nop
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	695b      	ldr	r3, [r3, #20]
 80014f0:	f043 0201 	orr.w	r2, r3, #1
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	615a      	str	r2, [r3, #20]
}
 80014f8:	bf00      	nop
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr

08001504 <LL_TIM_StructInit>:
  *         to their default values.
  * @param  TIM_InitStruct pointer to a @ref LL_TIM_InitTypeDef structure (time base unit configuration data structure)
  * @retval None
  */
void LL_TIM_StructInit(LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_InitStruct->Prescaler         = (uint16_t)0x0000;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2200      	movs	r2, #0
 8001510:	801a      	strh	r2, [r3, #0]
  TIM_InitStruct->CounterMode       = LL_TIM_COUNTERMODE_UP;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2200      	movs	r2, #0
 8001516:	605a      	str	r2, [r3, #4]
  TIM_InitStruct->Autoreload        = 0xFFFFFFFFU;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f04f 32ff 	mov.w	r2, #4294967295
 800151e:	609a      	str	r2, [r3, #8]
  TIM_InitStruct->ClockDivision     = LL_TIM_CLOCKDIVISION_DIV1;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2200      	movs	r2, #0
 8001524:	60da      	str	r2, [r3, #12]
  TIM_InitStruct->RepetitionCounter = 0x00000000U;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2200      	movs	r2, #0
 800152a:	611a      	str	r2, [r3, #16]
}
 800152c:	bf00      	nop
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	4a2f      	ldr	r2, [pc, #188]	; (8001608 <LL_TIM_Init+0xd0>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d007      	beq.n	8001560 <LL_TIM_Init+0x28>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001556:	d003      	beq.n	8001560 <LL_TIM_Init+0x28>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	4a2c      	ldr	r2, [pc, #176]	; (800160c <LL_TIM_Init+0xd4>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d106      	bne.n	800156e <LL_TIM_Init+0x36>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	4313      	orrs	r3, r2
 800156c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a25      	ldr	r2, [pc, #148]	; (8001608 <LL_TIM_Init+0xd0>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d013      	beq.n	800159e <LL_TIM_Init+0x66>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800157c:	d00f      	beq.n	800159e <LL_TIM_Init+0x66>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a22      	ldr	r2, [pc, #136]	; (800160c <LL_TIM_Init+0xd4>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d00b      	beq.n	800159e <LL_TIM_Init+0x66>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a21      	ldr	r2, [pc, #132]	; (8001610 <LL_TIM_Init+0xd8>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d007      	beq.n	800159e <LL_TIM_Init+0x66>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a20      	ldr	r2, [pc, #128]	; (8001614 <LL_TIM_Init+0xdc>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d003      	beq.n	800159e <LL_TIM_Init+0x66>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a1f      	ldr	r2, [pc, #124]	; (8001618 <LL_TIM_Init+0xe0>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d106      	bne.n	80015ac <LL_TIM_Init+0x74>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	68fa      	ldr	r2, [r7, #12]
 80015b0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	4619      	mov	r1, r3
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f7ff ff21 	bl	8001400 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	881b      	ldrh	r3, [r3, #0]
 80015c2:	4619      	mov	r1, r3
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f7ff ff0d 	bl	80013e4 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a0e      	ldr	r2, [pc, #56]	; (8001608 <LL_TIM_Init+0xd0>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d00b      	beq.n	80015ea <LL_TIM_Init+0xb2>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4a0e      	ldr	r2, [pc, #56]	; (8001610 <LL_TIM_Init+0xd8>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d007      	beq.n	80015ea <LL_TIM_Init+0xb2>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a0d      	ldr	r2, [pc, #52]	; (8001614 <LL_TIM_Init+0xdc>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d003      	beq.n	80015ea <LL_TIM_Init+0xb2>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a0c      	ldr	r2, [pc, #48]	; (8001618 <LL_TIM_Init+0xe0>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d105      	bne.n	80015f6 <LL_TIM_Init+0xbe>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	691b      	ldr	r3, [r3, #16]
 80015ee:	4619      	mov	r1, r3
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f7ff ff13 	bl	800141c <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f7ff ff74 	bl	80014e4 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3710      	adds	r7, #16
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	40012c00 	.word	0x40012c00
 800160c:	40000400 	.word	0x40000400
 8001610:	40014000 	.word	0x40014000
 8001614:	40014400 	.word	0x40014400
 8001618:	40014800 	.word	0x40014800

0800161c <LL_TIM_OC_StructInit>:
  * @param  TIM_OC_InitStruct pointer to a @ref LL_TIM_OC_InitTypeDef structure
  *         (the output channel configuration data structure)
  * @retval None
  */
void LL_TIM_OC_StructInit(LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_OC_InitStruct->OCMode       = LL_TIM_OCMODE_FROZEN;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]
  TIM_OC_InitStruct->OCState      = LL_TIM_OCSTATE_DISABLE;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2200      	movs	r2, #0
 800162e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitStruct->OCNState     = LL_TIM_OCSTATE_DISABLE;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2200      	movs	r2, #0
 8001634:	609a      	str	r2, [r3, #8]
  TIM_OC_InitStruct->CompareValue = 0x00000000U;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2200      	movs	r2, #0
 800163a:	60da      	str	r2, [r3, #12]
  TIM_OC_InitStruct->OCPolarity   = LL_TIM_OCPOLARITY_HIGH;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2200      	movs	r2, #0
 8001640:	611a      	str	r2, [r3, #16]
  TIM_OC_InitStruct->OCNPolarity  = LL_TIM_OCPOLARITY_HIGH;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2200      	movs	r2, #0
 8001646:	615a      	str	r2, [r3, #20]
  TIM_OC_InitStruct->OCIdleState  = LL_TIM_OCIDLESTATE_LOW;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2200      	movs	r2, #0
 800164c:	619a      	str	r2, [r3, #24]
  TIM_OC_InitStruct->OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2200      	movs	r2, #0
 8001652:	61da      	str	r2, [r3, #28]
}
 8001654:	bf00      	nop
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr

08001660 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b086      	sub	sp, #24
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001676:	d045      	beq.n	8001704 <LL_TIM_OC_Init+0xa4>
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800167e:	d848      	bhi.n	8001712 <LL_TIM_OC_Init+0xb2>
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001686:	d036      	beq.n	80016f6 <LL_TIM_OC_Init+0x96>
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800168e:	d840      	bhi.n	8001712 <LL_TIM_OC_Init+0xb2>
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001696:	d027      	beq.n	80016e8 <LL_TIM_OC_Init+0x88>
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800169e:	d838      	bhi.n	8001712 <LL_TIM_OC_Init+0xb2>
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016a6:	d018      	beq.n	80016da <LL_TIM_OC_Init+0x7a>
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016ae:	d830      	bhi.n	8001712 <LL_TIM_OC_Init+0xb2>
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d003      	beq.n	80016be <LL_TIM_OC_Init+0x5e>
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	2b10      	cmp	r3, #16
 80016ba:	d007      	beq.n	80016cc <LL_TIM_OC_Init+0x6c>
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
#endif /* TIM_CCER_CC5E */
    default:
      break;
 80016bc:	e029      	b.n	8001712 <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 80016be:	6879      	ldr	r1, [r7, #4]
 80016c0:	68f8      	ldr	r0, [r7, #12]
 80016c2:	f000 f82d 	bl	8001720 <OC1Config>
 80016c6:	4603      	mov	r3, r0
 80016c8:	75fb      	strb	r3, [r7, #23]
      break;
 80016ca:	e023      	b.n	8001714 <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80016cc:	6879      	ldr	r1, [r7, #4]
 80016ce:	68f8      	ldr	r0, [r7, #12]
 80016d0:	f000 f8a0 	bl	8001814 <OC2Config>
 80016d4:	4603      	mov	r3, r0
 80016d6:	75fb      	strb	r3, [r7, #23]
      break;
 80016d8:	e01c      	b.n	8001714 <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80016da:	6879      	ldr	r1, [r7, #4]
 80016dc:	68f8      	ldr	r0, [r7, #12]
 80016de:	f000 f917 	bl	8001910 <OC3Config>
 80016e2:	4603      	mov	r3, r0
 80016e4:	75fb      	strb	r3, [r7, #23]
      break;
 80016e6:	e015      	b.n	8001714 <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80016e8:	6879      	ldr	r1, [r7, #4]
 80016ea:	68f8      	ldr	r0, [r7, #12]
 80016ec:	f000 f98e 	bl	8001a0c <OC4Config>
 80016f0:	4603      	mov	r3, r0
 80016f2:	75fb      	strb	r3, [r7, #23]
      break;
 80016f4:	e00e      	b.n	8001714 <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 80016f6:	6879      	ldr	r1, [r7, #4]
 80016f8:	68f8      	ldr	r0, [r7, #12]
 80016fa:	f000 f9ed 	bl	8001ad8 <OC5Config>
 80016fe:	4603      	mov	r3, r0
 8001700:	75fb      	strb	r3, [r7, #23]
      break;
 8001702:	e007      	b.n	8001714 <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 8001704:	6879      	ldr	r1, [r7, #4]
 8001706:	68f8      	ldr	r0, [r7, #12]
 8001708:	f000 fa44 	bl	8001b94 <OC6Config>
 800170c:	4603      	mov	r3, r0
 800170e:	75fb      	strb	r3, [r7, #23]
      break;
 8001710:	e000      	b.n	8001714 <LL_TIM_OC_Init+0xb4>
      break;
 8001712:	bf00      	nop
  }

  return result;
 8001714:	7dfb      	ldrb	r3, [r7, #23]
}
 8001716:	4618      	mov	r0, r3
 8001718:	3718      	adds	r7, #24
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
	...

08001720 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6a1b      	ldr	r3, [r3, #32]
 800172e:	f023 0201 	bic.w	r2, r3, #1
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6a1b      	ldr	r3, [r3, #32]
 800173a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	699b      	ldr	r3, [r3, #24]
 8001746:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	f023 0303 	bic.w	r3, r3, #3
 800174e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001756:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800175a:	683a      	ldr	r2, [r7, #0]
 800175c:	6812      	ldr	r2, [r2, #0]
 800175e:	4313      	orrs	r3, r2
 8001760:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	f023 0202 	bic.w	r2, r3, #2
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	691b      	ldr	r3, [r3, #16]
 800176c:	4313      	orrs	r3, r2
 800176e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	f023 0201 	bic.w	r2, r3, #1
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	4313      	orrs	r3, r2
 800177c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a20      	ldr	r2, [pc, #128]	; (8001804 <OC1Config+0xe4>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d00b      	beq.n	800179e <OC1Config+0x7e>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a1f      	ldr	r2, [pc, #124]	; (8001808 <OC1Config+0xe8>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d007      	beq.n	800179e <OC1Config+0x7e>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a1e      	ldr	r2, [pc, #120]	; (800180c <OC1Config+0xec>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d003      	beq.n	800179e <OC1Config+0x7e>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4a1d      	ldr	r2, [pc, #116]	; (8001810 <OC1Config+0xf0>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d11e      	bne.n	80017dc <OC1Config+0xbc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	f023 0208 	bic.w	r2, r3, #8
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	695b      	ldr	r3, [r3, #20]
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	4313      	orrs	r3, r2
 80017ac:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	f023 0204 	bic.w	r2, r3, #4
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	4313      	orrs	r3, r2
 80017bc:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	699b      	ldr	r3, [r3, #24]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	69db      	ldr	r3, [r3, #28]
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	4313      	orrs	r3, r2
 80017da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	68fa      	ldr	r2, [r7, #12]
 80017e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	4619      	mov	r1, r3
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f7ff fe22 	bl	8001438 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	697a      	ldr	r2, [r7, #20]
 80017f8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80017fa:	2300      	movs	r3, #0
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3718      	adds	r7, #24
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	40012c00 	.word	0x40012c00
 8001808:	40014000 	.word	0x40014000
 800180c:	40014400 	.word	0x40014400
 8001810:	40014800 	.word	0x40014800

08001814 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b086      	sub	sp, #24
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6a1b      	ldr	r3, [r3, #32]
 8001822:	f023 0210 	bic.w	r2, r3, #16
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6a1b      	ldr	r3, [r3, #32]
 800182e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	699b      	ldr	r3, [r3, #24]
 800183a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001842:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800184a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800184e:	683a      	ldr	r2, [r7, #0]
 8001850:	6812      	ldr	r2, [r2, #0]
 8001852:	0212      	lsls	r2, r2, #8
 8001854:	4313      	orrs	r3, r2
 8001856:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	f023 0220 	bic.w	r2, r3, #32
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	691b      	ldr	r3, [r3, #16]
 8001862:	011b      	lsls	r3, r3, #4
 8001864:	4313      	orrs	r3, r2
 8001866:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	f023 0210 	bic.w	r2, r3, #16
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	011b      	lsls	r3, r3, #4
 8001874:	4313      	orrs	r3, r2
 8001876:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	4a21      	ldr	r2, [pc, #132]	; (8001900 <OC2Config+0xec>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d00b      	beq.n	8001898 <OC2Config+0x84>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	4a20      	ldr	r2, [pc, #128]	; (8001904 <OC2Config+0xf0>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d007      	beq.n	8001898 <OC2Config+0x84>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	4a1f      	ldr	r2, [pc, #124]	; (8001908 <OC2Config+0xf4>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d003      	beq.n	8001898 <OC2Config+0x84>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	4a1e      	ldr	r2, [pc, #120]	; (800190c <OC2Config+0xf8>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d11f      	bne.n	80018d8 <OC2Config+0xc4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	695b      	ldr	r3, [r3, #20]
 80018a2:	019b      	lsls	r3, r3, #6
 80018a4:	4313      	orrs	r3, r2
 80018a6:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	019b      	lsls	r3, r3, #6
 80018b4:	4313      	orrs	r3, r2
 80018b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	699b      	ldr	r3, [r3, #24]
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	4313      	orrs	r3, r2
 80018c6:	613b      	str	r3, [r7, #16]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	69db      	ldr	r3, [r3, #28]
 80018d2:	00db      	lsls	r3, r3, #3
 80018d4:	4313      	orrs	r3, r2
 80018d6:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	68fa      	ldr	r2, [r7, #12]
 80018e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	4619      	mov	r1, r3
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f7ff fdb2 	bl	8001454 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	697a      	ldr	r2, [r7, #20]
 80018f4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80018f6:	2300      	movs	r3, #0
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3718      	adds	r7, #24
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	40012c00 	.word	0x40012c00
 8001904:	40014000 	.word	0x40014000
 8001908:	40014400 	.word	0x40014400
 800190c:	40014800 	.word	0x40014800

08001910 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b086      	sub	sp, #24
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6a1b      	ldr	r3, [r3, #32]
 800191e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6a1b      	ldr	r3, [r3, #32]
 800192a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	69db      	ldr	r3, [r3, #28]
 8001936:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f023 0303 	bic.w	r3, r3, #3
 800193e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001946:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800194a:	683a      	ldr	r2, [r7, #0]
 800194c:	6812      	ldr	r2, [r2, #0]
 800194e:	4313      	orrs	r3, r2
 8001950:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	691b      	ldr	r3, [r3, #16]
 800195c:	021b      	lsls	r3, r3, #8
 800195e:	4313      	orrs	r3, r2
 8001960:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	021b      	lsls	r3, r3, #8
 800196e:	4313      	orrs	r3, r2
 8001970:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4a21      	ldr	r2, [pc, #132]	; (80019fc <OC3Config+0xec>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d00b      	beq.n	8001992 <OC3Config+0x82>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4a20      	ldr	r2, [pc, #128]	; (8001a00 <OC3Config+0xf0>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d007      	beq.n	8001992 <OC3Config+0x82>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4a1f      	ldr	r2, [pc, #124]	; (8001a04 <OC3Config+0xf4>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d003      	beq.n	8001992 <OC3Config+0x82>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4a1e      	ldr	r2, [pc, #120]	; (8001a08 <OC3Config+0xf8>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d11f      	bne.n	80019d2 <OC3Config+0xc2>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	695b      	ldr	r3, [r3, #20]
 800199c:	029b      	lsls	r3, r3, #10
 800199e:	4313      	orrs	r3, r2
 80019a0:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	029b      	lsls	r3, r3, #10
 80019ae:	4313      	orrs	r3, r2
 80019b0:	617b      	str	r3, [r7, #20]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	699b      	ldr	r3, [r3, #24]
 80019bc:	011b      	lsls	r3, r3, #4
 80019be:	4313      	orrs	r3, r2
 80019c0:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	69db      	ldr	r3, [r3, #28]
 80019cc:	015b      	lsls	r3, r3, #5
 80019ce:	4313      	orrs	r3, r2
 80019d0:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	693a      	ldr	r2, [r7, #16]
 80019d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	68fa      	ldr	r2, [r7, #12]
 80019dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	68db      	ldr	r3, [r3, #12]
 80019e2:	4619      	mov	r1, r3
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f7ff fd43 	bl	8001470 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	697a      	ldr	r2, [r7, #20]
 80019ee:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3718      	adds	r7, #24
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	40012c00 	.word	0x40012c00
 8001a00:	40014000 	.word	0x40014000
 8001a04:	40014400 	.word	0x40014400
 8001a08:	40014800 	.word	0x40014800

08001a0c <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b086      	sub	sp, #24
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6a1b      	ldr	r3, [r3, #32]
 8001a1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6a1b      	ldr	r3, [r3, #32]
 8001a26:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	69db      	ldr	r3, [r3, #28]
 8001a32:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001a46:	683a      	ldr	r2, [r7, #0]
 8001a48:	6812      	ldr	r2, [r2, #0]
 8001a4a:	0212      	lsls	r2, r2, #8
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	691b      	ldr	r3, [r3, #16]
 8001a5a:	031b      	lsls	r3, r3, #12
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	031b      	lsls	r3, r3, #12
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	4a15      	ldr	r2, [pc, #84]	; (8001ac8 <OC4Config+0xbc>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d00b      	beq.n	8001a90 <OC4Config+0x84>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	4a14      	ldr	r2, [pc, #80]	; (8001acc <OC4Config+0xc0>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d007      	beq.n	8001a90 <OC4Config+0x84>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	4a13      	ldr	r2, [pc, #76]	; (8001ad0 <OC4Config+0xc4>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d003      	beq.n	8001a90 <OC4Config+0x84>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	4a12      	ldr	r2, [pc, #72]	; (8001ad4 <OC4Config+0xc8>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d107      	bne.n	8001aa0 <OC4Config+0x94>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	699b      	ldr	r3, [r3, #24]
 8001a9a:	019b      	lsls	r3, r3, #6
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	617b      	str	r3, [r7, #20]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	697a      	ldr	r2, [r7, #20]
 8001aa4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	68fa      	ldr	r2, [r7, #12]
 8001aaa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f7ff fcea 	bl	800148c <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001abe:	2300      	movs	r3, #0
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3718      	adds	r7, #24
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	40012c00 	.word	0x40012c00
 8001acc:	40014000 	.word	0x40014000
 8001ad0:	40014400 	.word	0x40014400
 8001ad4:	40014800 	.word	0x40014800

08001ad8 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6a1b      	ldr	r3, [r3, #32]
 8001ae6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6a1b      	ldr	r3, [r3, #32]
 8001af2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001af8:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b04:	683a      	ldr	r2, [r7, #0]
 8001b06:	6812      	ldr	r2, [r2, #0]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	691b      	ldr	r3, [r3, #16]
 8001b16:	041b      	lsls	r3, r3, #16
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	041b      	lsls	r3, r3, #16
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	4a15      	ldr	r2, [pc, #84]	; (8001b84 <OC5Config+0xac>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d00b      	beq.n	8001b4c <OC5Config+0x74>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	4a14      	ldr	r2, [pc, #80]	; (8001b88 <OC5Config+0xb0>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d007      	beq.n	8001b4c <OC5Config+0x74>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	4a13      	ldr	r2, [pc, #76]	; (8001b8c <OC5Config+0xb4>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d003      	beq.n	8001b4c <OC5Config+0x74>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	4a12      	ldr	r2, [pc, #72]	; (8001b90 <OC5Config+0xb8>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d109      	bne.n	8001b60 <OC5Config+0x88>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	699b      	ldr	r3, [r3, #24]
 8001b58:	021b      	lsls	r3, r3, #8
 8001b5a:	431a      	orrs	r2, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	68ba      	ldr	r2, [r7, #8]
 8001b64:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f7ff fc9b 	bl	80014a8 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	68fa      	ldr	r2, [r7, #12]
 8001b76:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3710      	adds	r7, #16
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	40012c00 	.word	0x40012c00
 8001b88:	40014000 	.word	0x40014000
 8001b8c:	40014400 	.word	0x40014400
 8001b90:	40014800 	.word	0x40014800

08001b94 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6a1b      	ldr	r3, [r3, #32]
 8001ba2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6a1b      	ldr	r3, [r3, #32]
 8001bae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bb4:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bbc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001bc0:	683a      	ldr	r2, [r7, #0]
 8001bc2:	6812      	ldr	r2, [r2, #0]
 8001bc4:	0212      	lsls	r2, r2, #8
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	691b      	ldr	r3, [r3, #16]
 8001bd4:	051b      	lsls	r3, r3, #20
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	051b      	lsls	r3, r3, #20
 8001be6:	4313      	orrs	r3, r2
 8001be8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a14      	ldr	r2, [pc, #80]	; (8001c40 <OC6Config+0xac>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d00b      	beq.n	8001c0a <OC6Config+0x76>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a13      	ldr	r2, [pc, #76]	; (8001c44 <OC6Config+0xb0>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d007      	beq.n	8001c0a <OC6Config+0x76>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a12      	ldr	r2, [pc, #72]	; (8001c48 <OC6Config+0xb4>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d003      	beq.n	8001c0a <OC6Config+0x76>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a11      	ldr	r2, [pc, #68]	; (8001c4c <OC6Config+0xb8>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d109      	bne.n	8001c1e <OC6Config+0x8a>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	699b      	ldr	r3, [r3, #24]
 8001c16:	029b      	lsls	r3, r3, #10
 8001c18:	431a      	orrs	r2, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	68ba      	ldr	r2, [r7, #8]
 8001c22:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	4619      	mov	r1, r3
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f7ff fc4c 	bl	80014c8 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	68fa      	ldr	r2, [r7, #12]
 8001c34:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001c36:	2300      	movs	r3, #0
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3710      	adds	r7, #16
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	40012c00 	.word	0x40012c00
 8001c44:	40014000 	.word	0x40014000
 8001c48:	40014400 	.word	0x40014400
 8001c4c:	40014800 	.word	0x40014800

08001c50 <LL_USART_IsEnabled>:
  * @rmtoll CR1          UE            LL_USART_IsEnabled
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0301 	and.w	r3, r3, #1
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	bf0c      	ite	eq
 8001c64:	2301      	moveq	r3, #1
 8001c66:	2300      	movne	r3, #0
 8001c68:	b2db      	uxtb	r3, r3
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	370c      	adds	r7, #12
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr

08001c76 <LL_USART_SetStopBitsLength>:
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
 8001c76:	b480      	push	{r7}
 8001c78:	b083      	sub	sp, #12
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
 8001c7e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	431a      	orrs	r2, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	605a      	str	r2, [r3, #4]
}
 8001c90:	bf00      	nop
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <LL_USART_SetHWFlowCtrl>:
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	431a      	orrs	r2, r3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	609a      	str	r2, [r3, #8]
}
 8001cb6:	bf00      	nop
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr

08001cc2 <LL_USART_SetBaudRate>:
  * @param  BaudRate Baud Rate
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
{
 8001cc2:	b4b0      	push	{r4, r5, r7}
 8001cc4:	b085      	sub	sp, #20
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	60f8      	str	r0, [r7, #12]
 8001cca:	60b9      	str	r1, [r7, #8]
 8001ccc:	607a      	str	r2, [r7, #4]
 8001cce:	603b      	str	r3, [r7, #0]
  register uint32_t usartdiv = 0x0U;
 8001cd0:	2500      	movs	r5, #0
  register uint32_t brrtemp = 0x0U;
 8001cd2:	2400      	movs	r4, #0

  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001cda:	d114      	bne.n	8001d06 <LL_USART_SetBaudRate+0x44>
  {
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	005a      	lsls	r2, r3, #1
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	085b      	lsrs	r3, r3, #1
 8001ce4:	441a      	add	r2, r3
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	461d      	mov	r5, r3
    brrtemp = usartdiv & 0xFFF0U;
 8001cf0:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8001cf4:	402c      	ands	r4, r5
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001cf6:	086b      	lsrs	r3, r5, #1
 8001cf8:	b29b      	uxth	r3, r3
 8001cfa:	f003 0307 	and.w	r3, r3, #7
 8001cfe:	431c      	orrs	r4, r3
    USARTx->BRR = brrtemp;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	60dc      	str	r4, [r3, #12]
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
  }
}
 8001d04:	e00a      	b.n	8001d1c <LL_USART_SetBaudRate+0x5a>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	085a      	lsrs	r2, r3, #1
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	441a      	add	r2, r3
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d14:	b29b      	uxth	r3, r3
 8001d16:	461a      	mov	r2, r3
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	60da      	str	r2, [r3, #12]
}
 8001d1c:	bf00      	nop
 8001d1e:	3714      	adds	r7, #20
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bcb0      	pop	{r4, r5, r7}
 8001d24:	4770      	bx	lr
	...

08001d28 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b088      	sub	sp, #32
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8001d36:	2300      	movs	r3, #0
 8001d38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f7ff ff88 	bl	8001c50 <LL_USART_IsEnabled>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d14e      	bne.n	8001de4 <LL_USART_Init+0xbc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	4b29      	ldr	r3, [pc, #164]	; (8001df0 <LL_USART_Init+0xc8>)
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	683a      	ldr	r2, [r7, #0]
 8001d50:	6851      	ldr	r1, [r2, #4]
 8001d52:	683a      	ldr	r2, [r7, #0]
 8001d54:	68d2      	ldr	r2, [r2, #12]
 8001d56:	4311      	orrs	r1, r2
 8001d58:	683a      	ldr	r2, [r7, #0]
 8001d5a:	6912      	ldr	r2, [r2, #16]
 8001d5c:	4311      	orrs	r1, r2
 8001d5e:	683a      	ldr	r2, [r7, #0]
 8001d60:	6992      	ldr	r2, [r2, #24]
 8001d62:	430a      	orrs	r2, r1
 8001d64:	431a      	orrs	r2, r3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	4619      	mov	r1, r3
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f7ff ff80 	bl	8001c76 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	695b      	ldr	r3, [r3, #20]
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f7ff ff8d 	bl	8001c9c <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a1b      	ldr	r2, [pc, #108]	; (8001df4 <LL_USART_Init+0xcc>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d104      	bne.n	8001d94 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8001d8a:	2000      	movs	r0, #0
 8001d8c:	f7ff fa44 	bl	8001218 <LL_RCC_GetUSARTClockFreq>
 8001d90:	61b8      	str	r0, [r7, #24]
 8001d92:	e016      	b.n	8001dc2 <LL_USART_Init+0x9a>
    }
    else if (USARTx == USART2)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	4a18      	ldr	r2, [pc, #96]	; (8001df8 <LL_USART_Init+0xd0>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d107      	bne.n	8001dac <LL_USART_Init+0x84>
    {
#if defined (RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8001d9c:	f107 0308 	add.w	r3, r7, #8
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7ff fa13 	bl	80011cc <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	61bb      	str	r3, [r7, #24]
 8001daa:	e00a      	b.n	8001dc2 <LL_USART_Init+0x9a>
#endif
    }
    else if (USARTx == USART3)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	4a13      	ldr	r2, [pc, #76]	; (8001dfc <LL_USART_Init+0xd4>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d106      	bne.n	8001dc2 <LL_USART_Init+0x9a>
    {
#if defined (RCC_CFGR3_USART3SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8001db4:	f107 0308 	add.w	r3, r7, #8
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7ff fa07 	bl	80011cc <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d00d      	beq.n	8001de4 <LL_USART_Init+0xbc>
        && (USART_InitStruct->BaudRate != 0U))
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d009      	beq.n	8001de4 <LL_USART_Init+0xbc>
    {
      status = SUCCESS;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	699a      	ldr	r2, [r3, #24]
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	69b9      	ldr	r1, [r7, #24]
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f7ff ff6f 	bl	8001cc2 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8001de4:	7ffb      	ldrb	r3, [r7, #31]
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3720      	adds	r7, #32
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	efff69f3 	.word	0xefff69f3
 8001df4:	40013800 	.word	0x40013800
 8001df8:	40004400 	.word	0x40004400
 8001dfc:	40004800 	.word	0x40004800

08001e00 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e12:	4a07      	ldr	r2, [pc, #28]	; (8001e30 <LL_InitTick+0x30>)
 8001e14:	3b01      	subs	r3, #1
 8001e16:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8001e18:	4b05      	ldr	r3, [pc, #20]	; (8001e30 <LL_InitTick+0x30>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e1e:	4b04      	ldr	r3, [pc, #16]	; (8001e30 <LL_InitTick+0x30>)
 8001e20:	2205      	movs	r2, #5
 8001e22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8001e24:	bf00      	nop
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr
 8001e30:	e000e010 	.word	0xe000e010

08001e34 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8001e3c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f7ff ffdd 	bl	8001e00 <LL_InitTick>
}
 8001e46:	bf00      	nop
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
	...

08001e50 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001e58:	4a04      	ldr	r2, [pc, #16]	; (8001e6c <LL_SetSystemCoreClock+0x1c>)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6013      	str	r3, [r2, #0]
}
 8001e5e:	bf00      	nop
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	2000031c 	.word	0x2000031c

08001e70 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	4603      	mov	r3, r0
 8001e78:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001e7a:	79fb      	ldrb	r3, [r7, #7]
 8001e7c:	f003 021f 	and.w	r2, r3, #31
 8001e80:	4907      	ldr	r1, [pc, #28]	; (8001ea0 <NVIC_EnableIRQ+0x30>)
 8001e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e86:	095b      	lsrs	r3, r3, #5
 8001e88:	2001      	movs	r0, #1
 8001e8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001e92:	bf00      	nop
 8001e94:	370c      	adds	r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	e000e100 	.word	0xe000e100

08001ea4 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	4603      	mov	r3, r0
 8001eac:	6039      	str	r1, [r7, #0]
 8001eae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001eb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	da0b      	bge.n	8001ed0 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	b2da      	uxtb	r2, r3
 8001ebc:	490c      	ldr	r1, [pc, #48]	; (8001ef0 <NVIC_SetPriority+0x4c>)
 8001ebe:	79fb      	ldrb	r3, [r7, #7]
 8001ec0:	f003 030f 	and.w	r3, r3, #15
 8001ec4:	3b04      	subs	r3, #4
 8001ec6:	0112      	lsls	r2, r2, #4
 8001ec8:	b2d2      	uxtb	r2, r2
 8001eca:	440b      	add	r3, r1
 8001ecc:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ece:	e009      	b.n	8001ee4 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	b2da      	uxtb	r2, r3
 8001ed4:	4907      	ldr	r1, [pc, #28]	; (8001ef4 <NVIC_SetPriority+0x50>)
 8001ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eda:	0112      	lsls	r2, r2, #4
 8001edc:	b2d2      	uxtb	r2, r2
 8001ede:	440b      	add	r3, r1
 8001ee0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001ee4:	bf00      	nop
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr
 8001ef0:	e000ed00 	.word	0xe000ed00
 8001ef4:	e000e100 	.word	0xe000e100

08001ef8 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8001f00:	4b08      	ldr	r3, [pc, #32]	; (8001f24 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001f02:	695a      	ldr	r2, [r3, #20]
 8001f04:	4907      	ldr	r1, [pc, #28]	; (8001f24 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001f0c:	4b05      	ldr	r3, [pc, #20]	; (8001f24 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001f0e:	695a      	ldr	r2, [r3, #20]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	4013      	ands	r3, r2
 8001f14:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f16:	68fb      	ldr	r3, [r7, #12]
}
 8001f18:	bf00      	nop
 8001f1a:	3714      	adds	r7, #20
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr
 8001f24:	40021000 	.word	0x40021000

08001f28 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8001f2c:	2001      	movs	r0, #1
 8001f2e:	f7ff ffe3 	bl	8001ef8 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel6_IRQn, 0);
 8001f32:	2100      	movs	r1, #0
 8001f34:	2010      	movs	r0, #16
 8001f36:	f7ff ffb5 	bl	8001ea4 <NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001f3a:	2010      	movs	r0, #16
 8001f3c:	f7ff ff98 	bl	8001e70 <NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel7_IRQn, 0);
 8001f40:	2100      	movs	r1, #0
 8001f42:	2011      	movs	r0, #17
 8001f44:	f7ff ffae 	bl	8001ea4 <NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001f48:	2011      	movs	r0, #17
 8001f4a:	f7ff ff91 	bl	8001e70 <NVIC_EnableIRQ>

}
 8001f4e:	bf00      	nop
 8001f50:	bd80      	pop	{r7, pc}
	...

08001f54 <LL_AHB1_GRP1_EnableClock>:
{
 8001f54:	b480      	push	{r7}
 8001f56:	b085      	sub	sp, #20
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8001f5c:	4b08      	ldr	r3, [pc, #32]	; (8001f80 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001f5e:	695a      	ldr	r2, [r3, #20]
 8001f60:	4907      	ldr	r1, [pc, #28]	; (8001f80 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001f68:	4b05      	ldr	r3, [pc, #20]	; (8001f80 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001f6a:	695a      	ldr	r2, [r3, #20]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	4013      	ands	r3, r2
 8001f70:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f72:	68fb      	ldr	r3, [r7, #12]
}
 8001f74:	bf00      	nop
 8001f76:	3714      	adds	r7, #20
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr
 8001f80:	40021000 	.word	0x40021000

08001f84 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	683a      	ldr	r2, [r7, #0]
 8001f92:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f94:	bf00      	nop
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b086      	sub	sp, #24
 8001fa4:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa6:	463b      	mov	r3, r7
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	605a      	str	r2, [r3, #4]
 8001fae:	609a      	str	r2, [r3, #8]
 8001fb0:	60da      	str	r2, [r3, #12]
 8001fb2:	611a      	str	r2, [r3, #16]
 8001fb4:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001fb6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001fba:	f7ff ffcb 	bl	8001f54 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001fbe:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001fc2:	f7ff ffc7 	bl	8001f54 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_3);
 8001fc6:	2108      	movs	r1, #8
 8001fc8:	480a      	ldr	r0, [pc, #40]	; (8001ff4 <MX_GPIO_Init+0x54>)
 8001fca:	f7ff ffdb 	bl	8001f84 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8001fce:	2308      	movs	r3, #8
 8001fd0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fe2:	463b      	mov	r3, r7
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	4803      	ldr	r0, [pc, #12]	; (8001ff4 <MX_GPIO_Init+0x54>)
 8001fe8:	f7fe ffd9 	bl	8000f9e <LL_GPIO_Init>

}
 8001fec:	bf00      	nop
 8001fee:	3718      	adds	r7, #24
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	48000400 	.word	0x48000400

08001ff8 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b085      	sub	sp, #20
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f003 0307 	and.w	r3, r3, #7
 8002006:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002008:	4b0c      	ldr	r3, [pc, #48]	; (800203c <NVIC_SetPriorityGrouping+0x44>)
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800200e:	68ba      	ldr	r2, [r7, #8]
 8002010:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002014:	4013      	ands	r3, r2
 8002016:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002020:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002024:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002028:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800202a:	4a04      	ldr	r2, [pc, #16]	; (800203c <NVIC_SetPriorityGrouping+0x44>)
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	60d3      	str	r3, [r2, #12]
}
 8002030:	bf00      	nop
 8002032:	3714      	adds	r7, #20
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr
 800203c:	e000ed00 	.word	0xe000ed00

08002040 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002044:	4b05      	ldr	r3, [pc, #20]	; (800205c <LL_RCC_HSI_Enable+0x1c>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a04      	ldr	r2, [pc, #16]	; (800205c <LL_RCC_HSI_Enable+0x1c>)
 800204a:	f043 0301 	orr.w	r3, r3, #1
 800204e:	6013      	str	r3, [r2, #0]
}
 8002050:	bf00      	nop
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	40021000 	.word	0x40021000

08002060 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8002064:	4b06      	ldr	r3, [pc, #24]	; (8002080 <LL_RCC_HSI_IsReady+0x20>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0302 	and.w	r3, r3, #2
 800206c:	2b02      	cmp	r3, #2
 800206e:	bf0c      	ite	eq
 8002070:	2301      	moveq	r3, #1
 8002072:	2300      	movne	r3, #0
 8002074:	b2db      	uxtb	r3, r3
}
 8002076:	4618      	mov	r0, r3
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr
 8002080:	40021000 	.word	0x40021000

08002084 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 800208c:	4b07      	ldr	r3, [pc, #28]	; (80020ac <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	00db      	lsls	r3, r3, #3
 8002098:	4904      	ldr	r1, [pc, #16]	; (80020ac <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800209a:	4313      	orrs	r3, r2
 800209c:	600b      	str	r3, [r1, #0]
}
 800209e:	bf00      	nop
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
 80020aa:	bf00      	nop
 80020ac:	40021000 	.word	0x40021000

080020b0 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80020b8:	4b06      	ldr	r3, [pc, #24]	; (80020d4 <LL_RCC_SetSysClkSource+0x24>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f023 0203 	bic.w	r2, r3, #3
 80020c0:	4904      	ldr	r1, [pc, #16]	; (80020d4 <LL_RCC_SetSysClkSource+0x24>)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	604b      	str	r3, [r1, #4]
}
 80020c8:	bf00      	nop
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr
 80020d4:	40021000 	.word	0x40021000

080020d8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80020dc:	4b04      	ldr	r3, [pc, #16]	; (80020f0 <LL_RCC_GetSysClkSource+0x18>)
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f003 030c 	and.w	r3, r3, #12
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	40021000 	.word	0x40021000

080020f4 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80020fc:	4b06      	ldr	r3, [pc, #24]	; (8002118 <LL_RCC_SetAHBPrescaler+0x24>)
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002104:	4904      	ldr	r1, [pc, #16]	; (8002118 <LL_RCC_SetAHBPrescaler+0x24>)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4313      	orrs	r3, r2
 800210a:	604b      	str	r3, [r1, #4]
}
 800210c:	bf00      	nop
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr
 8002118:	40021000 	.word	0x40021000

0800211c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002124:	4b06      	ldr	r3, [pc, #24]	; (8002140 <LL_RCC_SetAPB1Prescaler+0x24>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800212c:	4904      	ldr	r1, [pc, #16]	; (8002140 <LL_RCC_SetAPB1Prescaler+0x24>)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4313      	orrs	r3, r2
 8002132:	604b      	str	r3, [r1, #4]
}
 8002134:	bf00      	nop
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr
 8002140:	40021000 	.word	0x40021000

08002144 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800214c:	4b06      	ldr	r3, [pc, #24]	; (8002168 <LL_RCC_SetAPB2Prescaler+0x24>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002154:	4904      	ldr	r1, [pc, #16]	; (8002168 <LL_RCC_SetAPB2Prescaler+0x24>)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4313      	orrs	r3, r2
 800215a:	604b      	str	r3, [r1, #4]
}
 800215c:	bf00      	nop
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr
 8002168:	40021000 	.word	0x40021000

0800216c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800216c:	b480      	push	{r7}
 800216e:	b085      	sub	sp, #20
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8002174:	4b08      	ldr	r3, [pc, #32]	; (8002198 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002176:	69da      	ldr	r2, [r3, #28]
 8002178:	4907      	ldr	r1, [pc, #28]	; (8002198 <LL_APB1_GRP1_EnableClock+0x2c>)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4313      	orrs	r3, r2
 800217e:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002180:	4b05      	ldr	r3, [pc, #20]	; (8002198 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002182:	69da      	ldr	r2, [r3, #28]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	4013      	ands	r3, r2
 8002188:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800218a:	68fb      	ldr	r3, [r7, #12]
}
 800218c:	bf00      	nop
 800218e:	3714      	adds	r7, #20
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr
 8002198:	40021000 	.word	0x40021000

0800219c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800219c:	b480      	push	{r7}
 800219e:	b085      	sub	sp, #20
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80021a4:	4b08      	ldr	r3, [pc, #32]	; (80021c8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80021a6:	699a      	ldr	r2, [r3, #24]
 80021a8:	4907      	ldr	r1, [pc, #28]	; (80021c8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80021b0:	4b05      	ldr	r3, [pc, #20]	; (80021c8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80021b2:	699a      	ldr	r2, [r3, #24]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	4013      	ands	r3, r2
 80021b8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80021ba:	68fb      	ldr	r3, [r7, #12]
}
 80021bc:	bf00      	nop
 80021be:	3714      	adds	r7, #20
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr
 80021c8:	40021000 	.word	0x40021000

080021cc <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80021d4:	4b06      	ldr	r3, [pc, #24]	; (80021f0 <LL_FLASH_SetLatency+0x24>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f023 0207 	bic.w	r2, r3, #7
 80021dc:	4904      	ldr	r1, [pc, #16]	; (80021f0 <LL_FLASH_SetLatency+0x24>)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	600b      	str	r3, [r1, #0]
}
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr
 80021f0:	40022000 	.word	0x40022000

080021f4 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80021f8:	4b04      	ldr	r3, [pc, #16]	; (800220c <LL_FLASH_GetLatency+0x18>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0307 	and.w	r3, r3, #7
}
 8002200:	4618      	mov	r0, r3
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	40022000 	.word	0x40022000

08002210 <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2b04      	cmp	r3, #4
 800221c:	d106      	bne.n	800222c <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 800221e:	4b09      	ldr	r3, [pc, #36]	; (8002244 <LL_SYSTICK_SetClkSource+0x34>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a08      	ldr	r2, [pc, #32]	; (8002244 <LL_SYSTICK_SetClkSource+0x34>)
 8002224:	f043 0304 	orr.w	r3, r3, #4
 8002228:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 800222a:	e005      	b.n	8002238 <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 800222c:	4b05      	ldr	r3, [pc, #20]	; (8002244 <LL_SYSTICK_SetClkSource+0x34>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a04      	ldr	r2, [pc, #16]	; (8002244 <LL_SYSTICK_SetClkSource+0x34>)
 8002232:	f023 0304 	bic.w	r3, r3, #4
 8002236:	6013      	str	r3, [r2, #0]
}
 8002238:	bf00      	nop
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr
 8002244:	e000e010 	.word	0xe000e010

08002248 <LL_TIM_GetAutoReload>:
  *       whether or not a timer instance supports a 32 bits counter.
  * @param  TIMx Timer instance
  * @retval Auto-reload value
  */
__STATIC_INLINE uint32_t LL_TIM_GetAutoReload(TIM_TypeDef *TIMx)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->ARR));
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 8002254:	4618      	mov	r0, r3
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	683a      	ldr	r2, [r7, #0]
 800226e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002270:	bf00      	nop
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <LL_TIM_OC_GetCompareCH1>:
  * @rmtoll CCR1         CCR1          LL_TIM_OC_GetCompareCH1
  * @param  TIMx Timer instance
  * @retval CompareValue (between Min_Data=0 and Max_Data=65535)
  */
__STATIC_INLINE uint32_t LL_TIM_OC_GetCompareCH1(TIM_TypeDef *TIMx)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->CCR1));
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
}
 8002288:	4618      	mov	r0, r3
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */

int main(void) {
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8002298:	2001      	movs	r0, #1
 800229a:	f7ff ff7f 	bl	800219c <LL_APB2_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800229e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80022a2:	f7ff ff63 	bl	800216c <LL_APB1_GRP1_EnableClock>

	NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022a6:	2003      	movs	r0, #3
 80022a8:	f7ff fea6 	bl	8001ff8 <NVIC_SetPriorityGrouping>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80022ac:	f000 f80e 	bl	80022cc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80022b0:	f7ff fe76 	bl	8001fa0 <MX_GPIO_Init>
	MX_DMA_Init();
 80022b4:	f7ff fe38 	bl	8001f28 <MX_DMA_Init>
	MX_USART2_UART_Init();
 80022b8:	f001 f820 	bl	80032fc <MX_USART2_UART_Init>
	MX_TIM2_Init();
 80022bc:	f000 fc98 	bl	8002bf0 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	USART2_RegisterCallback(receive_dma_data);
 80022c0:	4801      	ldr	r0, [pc, #4]	; (80022c8 <main+0x34>)
 80022c2:	f001 f809 	bl	80032d8 <USART2_RegisterCallback>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80022c6:	e7fe      	b.n	80022c6 <main+0x32>
 80022c8:	08002339 	.word	0x08002339

080022cc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
	LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 80022d0:	2000      	movs	r0, #0
 80022d2:	f7ff ff7b 	bl	80021cc <LL_FLASH_SetLatency>

	if (LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0) {
 80022d6:	f7ff ff8d 	bl	80021f4 <LL_FLASH_GetLatency>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d001      	beq.n	80022e4 <SystemClock_Config+0x18>
		Error_Handler();
 80022e0:	f000 f948 	bl	8002574 <Error_Handler>
	}
	LL_RCC_HSI_Enable();
 80022e4:	f7ff feac 	bl	8002040 <LL_RCC_HSI_Enable>

	/* Wait till HSI is ready */
	while (LL_RCC_HSI_IsReady() != 1) {
 80022e8:	bf00      	nop
 80022ea:	f7ff feb9 	bl	8002060 <LL_RCC_HSI_IsReady>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d1fa      	bne.n	80022ea <SystemClock_Config+0x1e>

	}
	LL_RCC_HSI_SetCalibTrimming(16);
 80022f4:	2010      	movs	r0, #16
 80022f6:	f7ff fec5 	bl	8002084 <LL_RCC_HSI_SetCalibTrimming>
	LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80022fa:	2000      	movs	r0, #0
 80022fc:	f7ff fefa 	bl	80020f4 <LL_RCC_SetAHBPrescaler>
	LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8002300:	2000      	movs	r0, #0
 8002302:	f7ff ff0b 	bl	800211c <LL_RCC_SetAPB1Prescaler>
	LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 8002306:	2000      	movs	r0, #0
 8002308:	f7ff ff1c 	bl	8002144 <LL_RCC_SetAPB2Prescaler>
	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 800230c:	2000      	movs	r0, #0
 800230e:	f7ff fecf 	bl	80020b0 <LL_RCC_SetSysClkSource>

	/* Wait till System clock is ready */
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI) {
 8002312:	bf00      	nop
 8002314:	f7ff fee0 	bl	80020d8 <LL_RCC_GetSysClkSource>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d1fa      	bne.n	8002314 <SystemClock_Config+0x48>

	}
	LL_Init1msTick(8000000);
 800231e:	4805      	ldr	r0, [pc, #20]	; (8002334 <SystemClock_Config+0x68>)
 8002320:	f7ff fd88 	bl	8001e34 <LL_Init1msTick>
	LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 8002324:	2004      	movs	r0, #4
 8002326:	f7ff ff73 	bl	8002210 <LL_SYSTICK_SetClkSource>
	LL_SetSystemCoreClock(8000000);
 800232a:	4802      	ldr	r0, [pc, #8]	; (8002334 <SystemClock_Config+0x68>)
 800232c:	f7ff fd90 	bl	8001e50 <LL_SetSystemCoreClock>
}
 8002330:	bf00      	nop
 8002332:	bd80      	pop	{r7, pc}
 8002334:	007a1200 	.word	0x007a1200

08002338 <receive_dma_data>:

/* USER CODE BEGIN 4 */
void receive_dma_data(const uint8_t *data, uint16_t len) {
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	460b      	mov	r3, r1
 8002342:	807b      	strh	r3, [r7, #2]
	uint8_t RX_len = len;
 8002344:	887b      	ldrh	r3, [r7, #2]
 8002346:	73bb      	strb	r3, [r7, #14]

	if (*(data) == '$') {
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	2b24      	cmp	r3, #36	; 0x24
 800234e:	d165      	bne.n	800241c <receive_dma_data+0xe4>
		for (uint8_t i = dlzka + 1; i < RX_len; i++) {
 8002350:	4b3c      	ldr	r3, [pc, #240]	; (8002444 <receive_dma_data+0x10c>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	b2db      	uxtb	r3, r3
 8002356:	3301      	adds	r3, #1
 8002358:	73fb      	strb	r3, [r7, #15]
 800235a:	e05a      	b.n	8002412 <receive_dma_data+0xda>

			if (*(data + i) == '$') {
 800235c:	7bfb      	ldrb	r3, [r7, #15]
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	4413      	add	r3, r2
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	2b24      	cmp	r3, #36	; 0x24
 8002366:	d145      	bne.n	80023f4 <receive_dma_data+0xbc>
				if (strstr(buff, "manual") != NULL) {
 8002368:	4937      	ldr	r1, [pc, #220]	; (8002448 <receive_dma_data+0x110>)
 800236a:	4838      	ldr	r0, [pc, #224]	; (800244c <receive_dma_data+0x114>)
 800236c:	f001 fe3f 	bl	8003fee <strstr>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d006      	beq.n	8002384 <receive_dma_data+0x4c>
					Mode_manual = 1;
 8002376:	4b36      	ldr	r3, [pc, #216]	; (8002450 <receive_dma_data+0x118>)
 8002378:	2201      	movs	r2, #1
 800237a:	701a      	strb	r2, [r3, #0]
					Mode_auto = 0;
 800237c:	4b35      	ldr	r3, [pc, #212]	; (8002454 <receive_dma_data+0x11c>)
 800237e:	2200      	movs	r2, #0
 8002380:	701a      	strb	r2, [r3, #0]
 8002382:	e031      	b.n	80023e8 <receive_dma_data+0xb0>
				} else if (Mode_manual == 1 && strstr(buff, "PWM")) {
 8002384:	4b32      	ldr	r3, [pc, #200]	; (8002450 <receive_dma_data+0x118>)
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	2b01      	cmp	r3, #1
 800238a:	d120      	bne.n	80023ce <receive_dma_data+0x96>
 800238c:	4932      	ldr	r1, [pc, #200]	; (8002458 <receive_dma_data+0x120>)
 800238e:	482f      	ldr	r0, [pc, #188]	; (800244c <receive_dma_data+0x114>)
 8002390:	f001 fe2d 	bl	8003fee <strstr>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d019      	beq.n	80023ce <receive_dma_data+0x96>
					digi_1 = (buff[3] - '0') * 10;
 800239a:	4b2c      	ldr	r3, [pc, #176]	; (800244c <receive_dma_data+0x114>)
 800239c:	78db      	ldrb	r3, [r3, #3]
 800239e:	3b30      	subs	r3, #48	; 0x30
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	461a      	mov	r2, r3
 80023a4:	0092      	lsls	r2, r2, #2
 80023a6:	4413      	add	r3, r2
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	b2da      	uxtb	r2, r3
 80023ac:	4b2b      	ldr	r3, [pc, #172]	; (800245c <receive_dma_data+0x124>)
 80023ae:	701a      	strb	r2, [r3, #0]
					digi_2 = (buff[4] - '0') * 1;
 80023b0:	4b26      	ldr	r3, [pc, #152]	; (800244c <receive_dma_data+0x114>)
 80023b2:	791b      	ldrb	r3, [r3, #4]
 80023b4:	3b30      	subs	r3, #48	; 0x30
 80023b6:	b2da      	uxtb	r2, r3
 80023b8:	4b29      	ldr	r3, [pc, #164]	; (8002460 <receive_dma_data+0x128>)
 80023ba:	701a      	strb	r2, [r3, #0]
					Duty_ = digi_1 + digi_2;
 80023bc:	4b27      	ldr	r3, [pc, #156]	; (800245c <receive_dma_data+0x124>)
 80023be:	781a      	ldrb	r2, [r3, #0]
 80023c0:	4b27      	ldr	r3, [pc, #156]	; (8002460 <receive_dma_data+0x128>)
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	4413      	add	r3, r2
 80023c6:	b2da      	uxtb	r2, r3
 80023c8:	4b26      	ldr	r3, [pc, #152]	; (8002464 <receive_dma_data+0x12c>)
 80023ca:	701a      	strb	r2, [r3, #0]
 80023cc:	e00c      	b.n	80023e8 <receive_dma_data+0xb0>

				} else if (strstr(buff, "auto") != NULL) {
 80023ce:	4926      	ldr	r1, [pc, #152]	; (8002468 <receive_dma_data+0x130>)
 80023d0:	481e      	ldr	r0, [pc, #120]	; (800244c <receive_dma_data+0x114>)
 80023d2:	f001 fe0c 	bl	8003fee <strstr>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d005      	beq.n	80023e8 <receive_dma_data+0xb0>
					Mode_manual = 0;
 80023dc:	4b1c      	ldr	r3, [pc, #112]	; (8002450 <receive_dma_data+0x118>)
 80023de:	2200      	movs	r2, #0
 80023e0:	701a      	strb	r2, [r3, #0]
					Mode_auto = 1;
 80023e2:	4b1c      	ldr	r3, [pc, #112]	; (8002454 <receive_dma_data+0x11c>)
 80023e4:	2201      	movs	r2, #1
 80023e6:	701a      	strb	r2, [r3, #0]
				}
				memset(buff, '\0', BUFF_LEN);
 80023e8:	2232      	movs	r2, #50	; 0x32
 80023ea:	2100      	movs	r1, #0
 80023ec:	4817      	ldr	r0, [pc, #92]	; (800244c <receive_dma_data+0x114>)
 80023ee:	f001 f979 	bl	80036e4 <memset>
 80023f2:	e00b      	b.n	800240c <receive_dma_data+0xd4>
			}

			else {
				char c = *(data + i);
 80023f4:	7bfb      	ldrb	r3, [r7, #15]
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	4413      	add	r3, r2
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	737b      	strb	r3, [r7, #13]
				strncat(buff, &c, 1);
 80023fe:	f107 030d 	add.w	r3, r7, #13
 8002402:	2201      	movs	r2, #1
 8002404:	4619      	mov	r1, r3
 8002406:	4811      	ldr	r0, [pc, #68]	; (800244c <receive_dma_data+0x114>)
 8002408:	f001 fdde 	bl	8003fc8 <strncat>
		for (uint8_t i = dlzka + 1; i < RX_len; i++) {
 800240c:	7bfb      	ldrb	r3, [r7, #15]
 800240e:	3301      	adds	r3, #1
 8002410:	73fb      	strb	r3, [r7, #15]
 8002412:	7bfa      	ldrb	r2, [r7, #15]
 8002414:	7bbb      	ldrb	r3, [r7, #14]
 8002416:	429a      	cmp	r2, r3
 8002418:	d3a0      	bcc.n	800235c <receive_dma_data+0x24>
 800241a:	e005      	b.n	8002428 <receive_dma_data+0xf0>
		}

	}

	else {
		memset(buff, '\0', BUFF_LEN);
 800241c:	2232      	movs	r2, #50	; 0x32
 800241e:	2100      	movs	r1, #0
 8002420:	480a      	ldr	r0, [pc, #40]	; (800244c <receive_dma_data+0x114>)
 8002422:	f001 f95f 	bl	80036e4 <memset>
		return;
 8002426:	e009      	b.n	800243c <receive_dma_data+0x104>
	}

	dlzka = RX_len;
 8002428:	7bbb      	ldrb	r3, [r7, #14]
 800242a:	4a06      	ldr	r2, [pc, #24]	; (8002444 <receive_dma_data+0x10c>)
 800242c:	6013      	str	r3, [r2, #0]
	if (dlzka >= 200) {
 800242e:	4b05      	ldr	r3, [pc, #20]	; (8002444 <receive_dma_data+0x10c>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2bc7      	cmp	r3, #199	; 0xc7
 8002434:	d902      	bls.n	800243c <receive_dma_data+0x104>
		dlzka = 0;
 8002436:	4b03      	ldr	r3, [pc, #12]	; (8002444 <receive_dma_data+0x10c>)
 8002438:	2200      	movs	r2, #0
 800243a:	601a      	str	r2, [r3, #0]
	}
}
 800243c:	3710      	adds	r7, #16
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	20000514 	.word	0x20000514
 8002448:	08006108 	.word	0x08006108
 800244c:	20000530 	.word	0x20000530
 8002450:	2000050c 	.word	0x2000050c
 8002454:	20000318 	.word	0x20000318
 8002458:	08006110 	.word	0x08006110
 800245c:	2000050d 	.word	0x2000050d
 8002460:	2000050e 	.word	0x2000050e
 8002464:	2000050f 	.word	0x2000050f
 8002468:	08006114 	.word	0x08006114

0800246c <PWM_IRG_callback>:

void PWM_IRG_callback(void) {
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
	if (Mode_manual) {
 8002470:	4b28      	ldr	r3, [pc, #160]	; (8002514 <PWM_IRG_callback+0xa8>)
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d02b      	beq.n	80024d0 <PWM_IRG_callback+0x64>
		old_duty = LL_TIM_OC_GetCompareCH1(TIM2);
 8002478:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800247c:	f7ff fefe 	bl	800227c <LL_TIM_OC_GetCompareCH1>
 8002480:	4603      	mov	r3, r0
 8002482:	b2da      	uxtb	r2, r3
 8002484:	4b24      	ldr	r3, [pc, #144]	; (8002518 <PWM_IRG_callback+0xac>)
 8002486:	701a      	strb	r2, [r3, #0]
		if (old_duty < Duty_) {
 8002488:	4b23      	ldr	r3, [pc, #140]	; (8002518 <PWM_IRG_callback+0xac>)
 800248a:	781a      	ldrb	r2, [r3, #0]
 800248c:	4b23      	ldr	r3, [pc, #140]	; (800251c <PWM_IRG_callback+0xb0>)
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	429a      	cmp	r2, r3
 8002492:	d20b      	bcs.n	80024ac <PWM_IRG_callback+0x40>
			old_duty++;
 8002494:	4b20      	ldr	r3, [pc, #128]	; (8002518 <PWM_IRG_callback+0xac>)
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	3301      	adds	r3, #1
 800249a:	b2da      	uxtb	r2, r3
 800249c:	4b1e      	ldr	r3, [pc, #120]	; (8002518 <PWM_IRG_callback+0xac>)
 800249e:	701a      	strb	r2, [r3, #0]
			setDutyCycle(old_duty);
 80024a0:	4b1d      	ldr	r3, [pc, #116]	; (8002518 <PWM_IRG_callback+0xac>)
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	4618      	mov	r0, r3
 80024a6:	f000 f841 	bl	800252c <setDutyCycle>
		} else {
			i = 0;
		}
		setDutyCycle(aDutyCycle[i]);
	}
}
 80024aa:	e030      	b.n	800250e <PWM_IRG_callback+0xa2>
		} else if (Duty_ < old_duty) {
 80024ac:	4b1b      	ldr	r3, [pc, #108]	; (800251c <PWM_IRG_callback+0xb0>)
 80024ae:	781a      	ldrb	r2, [r3, #0]
 80024b0:	4b19      	ldr	r3, [pc, #100]	; (8002518 <PWM_IRG_callback+0xac>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d22a      	bcs.n	800250e <PWM_IRG_callback+0xa2>
			old_duty--;
 80024b8:	4b17      	ldr	r3, [pc, #92]	; (8002518 <PWM_IRG_callback+0xac>)
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	3b01      	subs	r3, #1
 80024be:	b2da      	uxtb	r2, r3
 80024c0:	4b15      	ldr	r3, [pc, #84]	; (8002518 <PWM_IRG_callback+0xac>)
 80024c2:	701a      	strb	r2, [r3, #0]
			setDutyCycle(old_duty);
 80024c4:	4b14      	ldr	r3, [pc, #80]	; (8002518 <PWM_IRG_callback+0xac>)
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f000 f82f 	bl	800252c <setDutyCycle>
}
 80024ce:	e01e      	b.n	800250e <PWM_IRG_callback+0xa2>
	} else if (Mode_auto) {
 80024d0:	4b13      	ldr	r3, [pc, #76]	; (8002520 <PWM_IRG_callback+0xb4>)
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d01a      	beq.n	800250e <PWM_IRG_callback+0xa2>
		if (i < 197) {
 80024d8:	4b12      	ldr	r3, [pc, #72]	; (8002524 <PWM_IRG_callback+0xb8>)
 80024da:	881b      	ldrh	r3, [r3, #0]
 80024dc:	b29b      	uxth	r3, r3
 80024de:	2bc4      	cmp	r3, #196	; 0xc4
 80024e0:	d807      	bhi.n	80024f2 <PWM_IRG_callback+0x86>
			i++;
 80024e2:	4b10      	ldr	r3, [pc, #64]	; (8002524 <PWM_IRG_callback+0xb8>)
 80024e4:	881b      	ldrh	r3, [r3, #0]
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	3301      	adds	r3, #1
 80024ea:	b29a      	uxth	r2, r3
 80024ec:	4b0d      	ldr	r3, [pc, #52]	; (8002524 <PWM_IRG_callback+0xb8>)
 80024ee:	801a      	strh	r2, [r3, #0]
 80024f0:	e002      	b.n	80024f8 <PWM_IRG_callback+0x8c>
			i = 0;
 80024f2:	4b0c      	ldr	r3, [pc, #48]	; (8002524 <PWM_IRG_callback+0xb8>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	801a      	strh	r2, [r3, #0]
		setDutyCycle(aDutyCycle[i]);
 80024f8:	4b0a      	ldr	r3, [pc, #40]	; (8002524 <PWM_IRG_callback+0xb8>)
 80024fa:	881b      	ldrh	r3, [r3, #0]
 80024fc:	b29b      	uxth	r3, r3
 80024fe:	461a      	mov	r2, r3
 8002500:	4b09      	ldr	r3, [pc, #36]	; (8002528 <PWM_IRG_callback+0xbc>)
 8002502:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002506:	b2db      	uxtb	r3, r3
 8002508:	4618      	mov	r0, r3
 800250a:	f000 f80f 	bl	800252c <setDutyCycle>
}
 800250e:	bf00      	nop
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	2000050c 	.word	0x2000050c
 8002518:	20000510 	.word	0x20000510
 800251c:	2000050f 	.word	0x2000050f
 8002520:	20000318 	.word	0x20000318
 8002524:	20000518 	.word	0x20000518
 8002528:	20000000 	.word	0x20000000

0800252c <setDutyCycle>:

void setDutyCycle(uint8_t D) {
 800252c:	b580      	push	{r7, lr}
 800252e:	b084      	sub	sp, #16
 8002530:	af00      	add	r7, sp, #0
 8002532:	4603      	mov	r3, r0
 8002534:	71fb      	strb	r3, [r7, #7]
	uint8_t P;
	uint8_t T;
	T = LL_TIM_GetAutoReload(TIM2) + 1;
 8002536:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800253a:	f7ff fe85 	bl	8002248 <LL_TIM_GetAutoReload>
 800253e:	4603      	mov	r3, r0
 8002540:	b2db      	uxtb	r3, r3
 8002542:	3301      	adds	r3, #1
 8002544:	73fb      	strb	r3, [r7, #15]
	P = (D * T) / 100;
 8002546:	79fb      	ldrb	r3, [r7, #7]
 8002548:	7bfa      	ldrb	r2, [r7, #15]
 800254a:	fb02 f303 	mul.w	r3, r2, r3
 800254e:	4a08      	ldr	r2, [pc, #32]	; (8002570 <setDutyCycle+0x44>)
 8002550:	fb82 1203 	smull	r1, r2, r2, r3
 8002554:	1152      	asrs	r2, r2, #5
 8002556:	17db      	asrs	r3, r3, #31
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	73bb      	strb	r3, [r7, #14]
	LL_TIM_OC_SetCompareCH1(TIM2, P);
 800255c:	7bbb      	ldrb	r3, [r7, #14]
 800255e:	4619      	mov	r1, r3
 8002560:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002564:	f7ff fe7c 	bl	8002260 <LL_TIM_OC_SetCompareCH1>
}
 8002568:	bf00      	nop
 800256a:	3710      	adds	r7, #16
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	51eb851f 	.word	0x51eb851f

08002574 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8002578:	bf00      	nop
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
	...

08002584 <LL_DMA_DisableChannel>:
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	3b01      	subs	r3, #1
 8002592:	4a0b      	ldr	r2, [pc, #44]	; (80025c0 <LL_DMA_DisableChannel+0x3c>)
 8002594:	5cd3      	ldrb	r3, [r2, r3]
 8002596:	461a      	mov	r2, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	4413      	add	r3, r2
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	683a      	ldr	r2, [r7, #0]
 80025a0:	3a01      	subs	r2, #1
 80025a2:	4907      	ldr	r1, [pc, #28]	; (80025c0 <LL_DMA_DisableChannel+0x3c>)
 80025a4:	5c8a      	ldrb	r2, [r1, r2]
 80025a6:	4611      	mov	r1, r2
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	440a      	add	r2, r1
 80025ac:	f023 0301 	bic.w	r3, r3, #1
 80025b0:	6013      	str	r3, [r2, #0]
}
 80025b2:	bf00      	nop
 80025b4:	370c      	adds	r7, #12
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	0800611c 	.word	0x0800611c

080025c4 <LL_DMA_IsActiveFlag_TC6>:
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF6) == (DMA_ISR_TCIF6));
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80025d8:	bf0c      	ite	eq
 80025da:	2301      	moveq	r3, #1
 80025dc:	2300      	movne	r3, #0
 80025de:	b2db      	uxtb	r3, r3
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr

080025ec <LL_DMA_IsActiveFlag_TC7>:
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF7) == (DMA_ISR_TCIF7));
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002600:	bf0c      	ite	eq
 8002602:	2301      	moveq	r3, #1
 8002604:	2300      	movne	r3, #0
 8002606:	b2db      	uxtb	r3, r3
}
 8002608:	4618      	mov	r0, r3
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <LL_DMA_IsActiveFlag_HT6>:
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_HTIF6) == (DMA_ISR_HTIF6));
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002624:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002628:	bf0c      	ite	eq
 800262a:	2301      	moveq	r3, #1
 800262c:	2300      	movne	r3, #0
 800262e:	b2db      	uxtb	r3, r3
}
 8002630:	4618      	mov	r0, r3
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <LL_DMA_ClearFlag_TC6>:
  * @rmtoll IFCR         CTCIF6        LL_DMA_ClearFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC6(DMA_TypeDef *DMAx)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF6);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800264a:	605a      	str	r2, [r3, #4]
}
 800264c:	bf00      	nop
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <LL_DMA_ClearFlag_TC7>:
  * @rmtoll IFCR         CTCIF7        LL_DMA_ClearFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC7(DMA_TypeDef *DMAx)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF7);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002666:	605a      	str	r2, [r3, #4]
}
 8002668:	bf00      	nop
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <LL_DMA_ClearFlag_HT6>:
  * @rmtoll IFCR         CHTIF6        LL_DMA_ClearFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_HT6(DMA_TypeDef *DMAx)
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF6);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002682:	605a      	str	r2, [r3, #4]
}
 8002684:	bf00      	nop
 8002686:	370c      	adds	r7, #12
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr

08002690 <LL_TIM_ClearFlag_UPDATE>:
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f06f 0201 	mvn.w	r2, #1
 800269e:	611a      	str	r2, [r3, #16]
}
 80026a0:	bf00      	nop
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <LL_USART_IsActiveFlag_IDLE>:
  * @rmtoll ISR          IDLE          LL_USART_IsActiveFlag_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(USART_TypeDef *USARTx)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE));
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	69db      	ldr	r3, [r3, #28]
 80026b8:	f003 0310 	and.w	r3, r3, #16
 80026bc:	2b10      	cmp	r3, #16
 80026be:	bf0c      	ite	eq
 80026c0:	2301      	moveq	r3, #1
 80026c2:	2300      	movne	r3, #0
 80026c4:	b2db      	uxtb	r3, r3
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	370c      	adds	r7, #12
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr

080026d2 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
 80026d2:	b480      	push	{r7}
 80026d4:	b083      	sub	sp, #12
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC));
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	69db      	ldr	r3, [r3, #28]
 80026de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026e2:	2b40      	cmp	r3, #64	; 0x40
 80026e4:	bf0c      	ite	eq
 80026e6:	2301      	moveq	r3, #1
 80026e8:	2300      	movne	r3, #0
 80026ea:	b2db      	uxtb	r3, r3
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr

080026f8 <LL_USART_ClearFlag_IDLE>:
  * @rmtoll ICR          IDLECF        LL_USART_ClearFlag_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2210      	movs	r2, #16
 8002704:	621a      	str	r2, [r3, #32]
}
 8002706:	bf00      	nop
 8002708:	370c      	adds	r7, #12
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr

08002712 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002712:	b480      	push	{r7}
 8002714:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002716:	bf00      	nop
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002720:	b480      	push	{r7}
 8002722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002724:	e7fe      	b.n	8002724 <HardFault_Handler+0x4>

08002726 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002726:	b480      	push	{r7}
 8002728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800272a:	e7fe      	b.n	800272a <MemManage_Handler+0x4>

0800272c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002730:	e7fe      	b.n	8002730 <BusFault_Handler+0x4>

08002732 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002732:	b480      	push	{r7}
 8002734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002736:	e7fe      	b.n	8002736 <UsageFault_Handler+0x4>

08002738 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800273c:	bf00      	nop
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr

08002746 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002746:	b480      	push	{r7}
 8002748:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800274a:	bf00      	nop
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr

08002754 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002758:	bf00      	nop
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr

08002762 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002762:	b480      	push	{r7}
 8002764:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002766:	bf00      	nop
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr

08002770 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	af00      	add	r7, sp, #0
	if(LL_DMA_IsActiveFlag_TC6(DMA1) == SET)
 8002774:	480c      	ldr	r0, [pc, #48]	; (80027a8 <DMA1_Channel6_IRQHandler+0x38>)
 8002776:	f7ff ff25 	bl	80025c4 <LL_DMA_IsActiveFlag_TC6>
 800277a:	4603      	mov	r3, r0
 800277c:	2b01      	cmp	r3, #1
 800277e:	d105      	bne.n	800278c <DMA1_Channel6_IRQHandler+0x1c>
	{
		USART2_CheckDmaReception();
 8002780:	f000 fef6 	bl	8003570 <USART2_CheckDmaReception>
		LL_DMA_ClearFlag_TC6(DMA1);
 8002784:	4808      	ldr	r0, [pc, #32]	; (80027a8 <DMA1_Channel6_IRQHandler+0x38>)
 8002786:	f7ff ff59 	bl	800263c <LL_DMA_ClearFlag_TC6>
	else if(LL_DMA_IsActiveFlag_HT6(DMA1) == SET)
	{
		USART2_CheckDmaReception();
		LL_DMA_ClearFlag_HT6(DMA1);
	}
}
 800278a:	e00a      	b.n	80027a2 <DMA1_Channel6_IRQHandler+0x32>
	else if(LL_DMA_IsActiveFlag_HT6(DMA1) == SET)
 800278c:	4806      	ldr	r0, [pc, #24]	; (80027a8 <DMA1_Channel6_IRQHandler+0x38>)
 800278e:	f7ff ff41 	bl	8002614 <LL_DMA_IsActiveFlag_HT6>
 8002792:	4603      	mov	r3, r0
 8002794:	2b01      	cmp	r3, #1
 8002796:	d104      	bne.n	80027a2 <DMA1_Channel6_IRQHandler+0x32>
		USART2_CheckDmaReception();
 8002798:	f000 feea 	bl	8003570 <USART2_CheckDmaReception>
		LL_DMA_ClearFlag_HT6(DMA1);
 800279c:	4802      	ldr	r0, [pc, #8]	; (80027a8 <DMA1_Channel6_IRQHandler+0x38>)
 800279e:	f7ff ff69 	bl	8002674 <LL_DMA_ClearFlag_HT6>
}
 80027a2:	bf00      	nop
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	40020000 	.word	0x40020000

080027ac <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
	if(LL_DMA_IsActiveFlag_TC7(DMA1) == SET)
 80027b0:	480a      	ldr	r0, [pc, #40]	; (80027dc <DMA1_Channel7_IRQHandler+0x30>)
 80027b2:	f7ff ff1b 	bl	80025ec <LL_DMA_IsActiveFlag_TC7>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d10d      	bne.n	80027d8 <DMA1_Channel7_IRQHandler+0x2c>
	{
		LL_DMA_ClearFlag_TC7(DMA1);
 80027bc:	4807      	ldr	r0, [pc, #28]	; (80027dc <DMA1_Channel7_IRQHandler+0x30>)
 80027be:	f7ff ff4b 	bl	8002658 <LL_DMA_ClearFlag_TC7>

		while(LL_USART_IsActiveFlag_TC(USART2) == RESET);
 80027c2:	bf00      	nop
 80027c4:	4806      	ldr	r0, [pc, #24]	; (80027e0 <DMA1_Channel7_IRQHandler+0x34>)
 80027c6:	f7ff ff84 	bl	80026d2 <LL_USART_IsActiveFlag_TC>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d0f9      	beq.n	80027c4 <DMA1_Channel7_IRQHandler+0x18>
		LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_7);
 80027d0:	2107      	movs	r1, #7
 80027d2:	4802      	ldr	r0, [pc, #8]	; (80027dc <DMA1_Channel7_IRQHandler+0x30>)
 80027d4:	f7ff fed6 	bl	8002584 <LL_DMA_DisableChannel>
	}
}
 80027d8:	bf00      	nop
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	40020000 	.word	0x40020000
 80027e0:	40004400 	.word	0x40004400

080027e4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	af00      	add	r7, sp, #0
	if(LL_USART_IsActiveFlag_IDLE(USART2))
 80027e8:	4806      	ldr	r0, [pc, #24]	; (8002804 <USART2_IRQHandler+0x20>)
 80027ea:	f7ff ff5f 	bl	80026ac <LL_USART_IsActiveFlag_IDLE>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d004      	beq.n	80027fe <USART2_IRQHandler+0x1a>
	{
		USART2_CheckDmaReception();
 80027f4:	f000 febc 	bl	8003570 <USART2_CheckDmaReception>
		LL_USART_ClearFlag_IDLE(USART2);
 80027f8:	4802      	ldr	r0, [pc, #8]	; (8002804 <USART2_IRQHandler+0x20>)
 80027fa:	f7ff ff7d 	bl	80026f8 <LL_USART_ClearFlag_IDLE>
	}
}
 80027fe:	bf00      	nop
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	40004400 	.word	0x40004400

08002808 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
	LL_TIM_ClearFlag_UPDATE(TIM2);
 800280c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002810:	f7ff ff3e 	bl	8002690 <LL_TIM_ClearFlag_UPDATE>
	 PWM_IRG_callback();
 8002814:	f7ff fe2a 	bl	800246c <PWM_IRG_callback>

}
 8002818:	bf00      	nop
 800281a:	bd80      	pop	{r7, pc}

0800281c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0
	return 1;
 8002820:	2301      	movs	r3, #1
}
 8002822:	4618      	mov	r0, r3
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <_kill>:

int _kill(int pid, int sig)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002836:	f000 ff2b 	bl	8003690 <__errno>
 800283a:	4603      	mov	r3, r0
 800283c:	2216      	movs	r2, #22
 800283e:	601a      	str	r2, [r3, #0]
	return -1;
 8002840:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002844:	4618      	mov	r0, r3
 8002846:	3708      	adds	r7, #8
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}

0800284c <_exit>:

void _exit (int status)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b082      	sub	sp, #8
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002854:	f04f 31ff 	mov.w	r1, #4294967295
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f7ff ffe7 	bl	800282c <_kill>
	while (1) {}		/* Make sure we hang here */
 800285e:	e7fe      	b.n	800285e <_exit+0x12>

08002860 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b086      	sub	sp, #24
 8002864:	af00      	add	r7, sp, #0
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	60b9      	str	r1, [r7, #8]
 800286a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800286c:	2300      	movs	r3, #0
 800286e:	617b      	str	r3, [r7, #20]
 8002870:	e00a      	b.n	8002888 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002872:	f3af 8000 	nop.w
 8002876:	4601      	mov	r1, r0
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	1c5a      	adds	r2, r3, #1
 800287c:	60ba      	str	r2, [r7, #8]
 800287e:	b2ca      	uxtb	r2, r1
 8002880:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	3301      	adds	r3, #1
 8002886:	617b      	str	r3, [r7, #20]
 8002888:	697a      	ldr	r2, [r7, #20]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	429a      	cmp	r2, r3
 800288e:	dbf0      	blt.n	8002872 <_read+0x12>
	}

return len;
 8002890:	687b      	ldr	r3, [r7, #4]
}
 8002892:	4618      	mov	r0, r3
 8002894:	3718      	adds	r7, #24
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}

0800289a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800289a:	b580      	push	{r7, lr}
 800289c:	b086      	sub	sp, #24
 800289e:	af00      	add	r7, sp, #0
 80028a0:	60f8      	str	r0, [r7, #12]
 80028a2:	60b9      	str	r1, [r7, #8]
 80028a4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028a6:	2300      	movs	r3, #0
 80028a8:	617b      	str	r3, [r7, #20]
 80028aa:	e009      	b.n	80028c0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	1c5a      	adds	r2, r3, #1
 80028b0:	60ba      	str	r2, [r7, #8]
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	4618      	mov	r0, r3
 80028b6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	3301      	adds	r3, #1
 80028be:	617b      	str	r3, [r7, #20]
 80028c0:	697a      	ldr	r2, [r7, #20]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	dbf1      	blt.n	80028ac <_write+0x12>
	}
	return len;
 80028c8:	687b      	ldr	r3, [r7, #4]
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3718      	adds	r7, #24
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}

080028d2 <_close>:

int _close(int file)
{
 80028d2:	b480      	push	{r7}
 80028d4:	b083      	sub	sp, #12
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
	return -1;
 80028da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028de:	4618      	mov	r0, r3
 80028e0:	370c      	adds	r7, #12
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr

080028ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028ea:	b480      	push	{r7}
 80028ec:	b083      	sub	sp, #12
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	6078      	str	r0, [r7, #4]
 80028f2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80028fa:	605a      	str	r2, [r3, #4]
	return 0;
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr

0800290a <_isatty>:

int _isatty(int file)
{
 800290a:	b480      	push	{r7}
 800290c:	b083      	sub	sp, #12
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
	return 1;
 8002912:	2301      	movs	r3, #1
}
 8002914:	4618      	mov	r0, r3
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002920:	b480      	push	{r7}
 8002922:	b085      	sub	sp, #20
 8002924:	af00      	add	r7, sp, #0
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	60b9      	str	r1, [r7, #8]
 800292a:	607a      	str	r2, [r7, #4]
	return 0;
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3714      	adds	r7, #20
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
	...

0800293c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002944:	4b11      	ldr	r3, [pc, #68]	; (800298c <_sbrk+0x50>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d102      	bne.n	8002952 <_sbrk+0x16>
		heap_end = &end;
 800294c:	4b0f      	ldr	r3, [pc, #60]	; (800298c <_sbrk+0x50>)
 800294e:	4a10      	ldr	r2, [pc, #64]	; (8002990 <_sbrk+0x54>)
 8002950:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002952:	4b0e      	ldr	r3, [pc, #56]	; (800298c <_sbrk+0x50>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002958:	4b0c      	ldr	r3, [pc, #48]	; (800298c <_sbrk+0x50>)
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	4413      	add	r3, r2
 8002960:	466a      	mov	r2, sp
 8002962:	4293      	cmp	r3, r2
 8002964:	d907      	bls.n	8002976 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002966:	f000 fe93 	bl	8003690 <__errno>
 800296a:	4603      	mov	r3, r0
 800296c:	220c      	movs	r2, #12
 800296e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8002970:	f04f 33ff 	mov.w	r3, #4294967295
 8002974:	e006      	b.n	8002984 <_sbrk+0x48>
	}

	heap_end += incr;
 8002976:	4b05      	ldr	r3, [pc, #20]	; (800298c <_sbrk+0x50>)
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4413      	add	r3, r2
 800297e:	4a03      	ldr	r2, [pc, #12]	; (800298c <_sbrk+0x50>)
 8002980:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002982:	68fb      	ldr	r3, [r7, #12]
}
 8002984:	4618      	mov	r0, r3
 8002986:	3710      	adds	r7, #16
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	2000051c 	.word	0x2000051c
 8002990:	20000678 	.word	0x20000678

08002994 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002998:	4b1f      	ldr	r3, [pc, #124]	; (8002a18 <SystemInit+0x84>)
 800299a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800299e:	4a1e      	ldr	r2, [pc, #120]	; (8002a18 <SystemInit+0x84>)
 80029a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80029a8:	4b1c      	ldr	r3, [pc, #112]	; (8002a1c <SystemInit+0x88>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a1b      	ldr	r2, [pc, #108]	; (8002a1c <SystemInit+0x88>)
 80029ae:	f043 0301 	orr.w	r3, r3, #1
 80029b2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 80029b4:	4b19      	ldr	r3, [pc, #100]	; (8002a1c <SystemInit+0x88>)
 80029b6:	685a      	ldr	r2, [r3, #4]
 80029b8:	4918      	ldr	r1, [pc, #96]	; (8002a1c <SystemInit+0x88>)
 80029ba:	4b19      	ldr	r3, [pc, #100]	; (8002a20 <SystemInit+0x8c>)
 80029bc:	4013      	ands	r3, r2
 80029be:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80029c0:	4b16      	ldr	r3, [pc, #88]	; (8002a1c <SystemInit+0x88>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a15      	ldr	r2, [pc, #84]	; (8002a1c <SystemInit+0x88>)
 80029c6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80029ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029ce:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80029d0:	4b12      	ldr	r3, [pc, #72]	; (8002a1c <SystemInit+0x88>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a11      	ldr	r2, [pc, #68]	; (8002a1c <SystemInit+0x88>)
 80029d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029da:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80029dc:	4b0f      	ldr	r3, [pc, #60]	; (8002a1c <SystemInit+0x88>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	4a0e      	ldr	r2, [pc, #56]	; (8002a1c <SystemInit+0x88>)
 80029e2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80029e6:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 80029e8:	4b0c      	ldr	r3, [pc, #48]	; (8002a1c <SystemInit+0x88>)
 80029ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ec:	4a0b      	ldr	r2, [pc, #44]	; (8002a1c <SystemInit+0x88>)
 80029ee:	f023 030f 	bic.w	r3, r3, #15
 80029f2:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 80029f4:	4b09      	ldr	r3, [pc, #36]	; (8002a1c <SystemInit+0x88>)
 80029f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029f8:	4908      	ldr	r1, [pc, #32]	; (8002a1c <SystemInit+0x88>)
 80029fa:	4b0a      	ldr	r3, [pc, #40]	; (8002a24 <SystemInit+0x90>)
 80029fc:	4013      	ands	r3, r2
 80029fe:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8002a00:	4b06      	ldr	r3, [pc, #24]	; (8002a1c <SystemInit+0x88>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002a06:	4b04      	ldr	r3, [pc, #16]	; (8002a18 <SystemInit+0x84>)
 8002a08:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002a0c:	609a      	str	r2, [r3, #8]
#endif
}
 8002a0e:	bf00      	nop
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr
 8002a18:	e000ed00 	.word	0xe000ed00
 8002a1c:	40021000 	.word	0x40021000
 8002a20:	f87fc00c 	.word	0xf87fc00c
 8002a24:	ff00fccc 	.word	0xff00fccc

08002a28 <NVIC_EnableIRQ>:
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	4603      	mov	r3, r0
 8002a30:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002a32:	79fb      	ldrb	r3, [r7, #7]
 8002a34:	f003 021f 	and.w	r2, r3, #31
 8002a38:	4907      	ldr	r1, [pc, #28]	; (8002a58 <NVIC_EnableIRQ+0x30>)
 8002a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a3e:	095b      	lsrs	r3, r3, #5
 8002a40:	2001      	movs	r0, #1
 8002a42:	fa00 f202 	lsl.w	r2, r0, r2
 8002a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002a4a:	bf00      	nop
 8002a4c:	370c      	adds	r7, #12
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	e000e100 	.word	0xe000e100

08002a5c <NVIC_SetPriority>:
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	4603      	mov	r3, r0
 8002a64:	6039      	str	r1, [r7, #0]
 8002a66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8002a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	da0b      	bge.n	8002a88 <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	b2da      	uxtb	r2, r3
 8002a74:	490c      	ldr	r1, [pc, #48]	; (8002aa8 <NVIC_SetPriority+0x4c>)
 8002a76:	79fb      	ldrb	r3, [r7, #7]
 8002a78:	f003 030f 	and.w	r3, r3, #15
 8002a7c:	3b04      	subs	r3, #4
 8002a7e:	0112      	lsls	r2, r2, #4
 8002a80:	b2d2      	uxtb	r2, r2
 8002a82:	440b      	add	r3, r1
 8002a84:	761a      	strb	r2, [r3, #24]
}
 8002a86:	e009      	b.n	8002a9c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	b2da      	uxtb	r2, r3
 8002a8c:	4907      	ldr	r1, [pc, #28]	; (8002aac <NVIC_SetPriority+0x50>)
 8002a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a92:	0112      	lsls	r2, r2, #4
 8002a94:	b2d2      	uxtb	r2, r2
 8002a96:	440b      	add	r3, r1
 8002a98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002a9c:	bf00      	nop
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr
 8002aa8:	e000ed00 	.word	0xe000ed00
 8002aac:	e000e100 	.word	0xe000e100

08002ab0 <LL_AHB1_GRP1_EnableClock>:
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b085      	sub	sp, #20
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8002ab8:	4b08      	ldr	r3, [pc, #32]	; (8002adc <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002aba:	695a      	ldr	r2, [r3, #20]
 8002abc:	4907      	ldr	r1, [pc, #28]	; (8002adc <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8002ac4:	4b05      	ldr	r3, [pc, #20]	; (8002adc <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002ac6:	695a      	ldr	r2, [r3, #20]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	4013      	ands	r3, r2
 8002acc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002ace:	68fb      	ldr	r3, [r7, #12]
}
 8002ad0:	bf00      	nop
 8002ad2:	3714      	adds	r7, #20
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr
 8002adc:	40021000 	.word	0x40021000

08002ae0 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b085      	sub	sp, #20
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8002ae8:	4b08      	ldr	r3, [pc, #32]	; (8002b0c <LL_APB1_GRP1_EnableClock+0x2c>)
 8002aea:	69da      	ldr	r2, [r3, #28]
 8002aec:	4907      	ldr	r1, [pc, #28]	; (8002b0c <LL_APB1_GRP1_EnableClock+0x2c>)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002af4:	4b05      	ldr	r3, [pc, #20]	; (8002b0c <LL_APB1_GRP1_EnableClock+0x2c>)
 8002af6:	69da      	ldr	r2, [r3, #28]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	4013      	ands	r3, r2
 8002afc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002afe:	68fb      	ldr	r3, [r7, #12]
}
 8002b00:	bf00      	nop
 8002b02:	3714      	adds	r7, #20
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr
 8002b0c:	40021000 	.word	0x40021000

08002b10 <LL_TIM_EnableCounter>:
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f043 0201 	orr.w	r2, r3, #1
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	601a      	str	r2, [r3, #0]
}
 8002b24:	bf00      	nop
 8002b26:	370c      	adds	r7, #12
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr

08002b30 <LL_TIM_OC_EnablePreload>:
{
 8002b30:	b480      	push	{r7}
 8002b32:	b085      	sub	sp, #20
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d028      	beq.n	8002b92 <LL_TIM_OC_EnablePreload+0x62>
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	2b04      	cmp	r3, #4
 8002b44:	d023      	beq.n	8002b8e <LL_TIM_OC_EnablePreload+0x5e>
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	2b10      	cmp	r3, #16
 8002b4a:	d01e      	beq.n	8002b8a <LL_TIM_OC_EnablePreload+0x5a>
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	2b40      	cmp	r3, #64	; 0x40
 8002b50:	d019      	beq.n	8002b86 <LL_TIM_OC_EnablePreload+0x56>
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b58:	d013      	beq.n	8002b82 <LL_TIM_OC_EnablePreload+0x52>
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b60:	d00d      	beq.n	8002b7e <LL_TIM_OC_EnablePreload+0x4e>
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b68:	d007      	beq.n	8002b7a <LL_TIM_OC_EnablePreload+0x4a>
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b70:	d101      	bne.n	8002b76 <LL_TIM_OC_EnablePreload+0x46>
 8002b72:	2307      	movs	r3, #7
 8002b74:	e00e      	b.n	8002b94 <LL_TIM_OC_EnablePreload+0x64>
 8002b76:	2308      	movs	r3, #8
 8002b78:	e00c      	b.n	8002b94 <LL_TIM_OC_EnablePreload+0x64>
 8002b7a:	2306      	movs	r3, #6
 8002b7c:	e00a      	b.n	8002b94 <LL_TIM_OC_EnablePreload+0x64>
 8002b7e:	2305      	movs	r3, #5
 8002b80:	e008      	b.n	8002b94 <LL_TIM_OC_EnablePreload+0x64>
 8002b82:	2304      	movs	r3, #4
 8002b84:	e006      	b.n	8002b94 <LL_TIM_OC_EnablePreload+0x64>
 8002b86:	2303      	movs	r3, #3
 8002b88:	e004      	b.n	8002b94 <LL_TIM_OC_EnablePreload+0x64>
 8002b8a:	2302      	movs	r3, #2
 8002b8c:	e002      	b.n	8002b94 <LL_TIM_OC_EnablePreload+0x64>
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e000      	b.n	8002b94 <LL_TIM_OC_EnablePreload+0x64>
 8002b92:	2300      	movs	r3, #0
 8002b94:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	3318      	adds	r3, #24
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	7bfb      	ldrb	r3, [r7, #15]
 8002b9e:	4a0a      	ldr	r2, [pc, #40]	; (8002bc8 <LL_TIM_OC_EnablePreload+0x98>)
 8002ba0:	5cd3      	ldrb	r3, [r2, r3]
 8002ba2:	440b      	add	r3, r1
 8002ba4:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	7bfb      	ldrb	r3, [r7, #15]
 8002bac:	4907      	ldr	r1, [pc, #28]	; (8002bcc <LL_TIM_OC_EnablePreload+0x9c>)
 8002bae:	5ccb      	ldrb	r3, [r1, r3]
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	2308      	movs	r3, #8
 8002bb4:	408b      	lsls	r3, r1
 8002bb6:	431a      	orrs	r2, r3
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	601a      	str	r2, [r3, #0]
}
 8002bbc:	bf00      	nop
 8002bbe:	3714      	adds	r7, #20
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr
 8002bc8:	0800613c 	.word	0x0800613c
 8002bcc:	08006148 	.word	0x08006148

08002bd0 <LL_TIM_EnableIT_UPDATE>:
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	f043 0201 	orr.w	r2, r3, #1
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	60da      	str	r2, [r3, #12]
}
 8002be4:	bf00      	nop
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <MX_TIM2_Init>:

/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b094      	sub	sp, #80	; 0x50
 8002bf4:	af00      	add	r7, sp, #0
  /* USER CODE END TIM2_Init 0 */

	LL_TIM_InitTypeDef tim;
	LL_TIM_OC_InitTypeDef oc;
	// inicializujeme struktury (abychom je nemuseli vyplĹovat celĂ©)
	LL_TIM_StructInit(&tim);
 8002bf6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f7fe fc82 	bl	8001504 <LL_TIM_StructInit>
	LL_TIM_OC_StructInit(&oc);
 8002c00:	f107 031c 	add.w	r3, r7, #28
 8002c04:	4618      	mov	r0, r3
 8002c06:	f7fe fd09 	bl	800161c <LL_TIM_OC_StructInit>
	// povolĂ­me clock pro TIM2
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8002c0a:	2001      	movs	r0, #1
 8002c0c:	f7ff ff68 	bl	8002ae0 <LL_APB1_GRP1_EnableClock>
	tim.Prescaler = 800; // 8M/800 = 10kHz do timeru
 8002c10:	f44f 7348 	mov.w	r3, #800	; 0x320
 8002c14:	87bb      	strh	r3, [r7, #60]	; 0x3c
	tim.Autoreload = 100; // strop timeru 100, f=100Hz (T=10ms)
 8002c16:	2364      	movs	r3, #100	; 0x64
 8002c18:	647b      	str	r3, [r7, #68]	; 0x44
	LL_TIM_Init(TIM2,&tim);
 8002c1a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002c1e:	4619      	mov	r1, r3
 8002c20:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002c24:	f7fe fc88 	bl	8001538 <LL_TIM_Init>

	oc.OCPolarity = LL_TIM_OCPOLARITY_HIGH; // polarita bÄ›ĹľnĂˇ
 8002c28:	2300      	movs	r3, #0
 8002c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
	oc.OCState = LL_TIM_OCSTATE_ENABLE; // pĹ™idÄ›lujeme timeru ovlĂˇdĂˇnĂ­ vĂ˝stupu
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	623b      	str	r3, [r7, #32]
	oc.OCMode = LL_TIM_OCMODE_PWM1; // reĹľim PWM1
 8002c30:	2360      	movs	r3, #96	; 0x60
 8002c32:	61fb      	str	r3, [r7, #28]
	oc.CompareValue = 0; // startovacĂ­ hodnota PWM pro CH3
 8002c34:	2300      	movs	r3, #0
 8002c36:	62bb      	str	r3, [r7, #40]	; 0x28
	LL_TIM_OC_Init(TIM2,LL_TIM_CHANNEL_CH1,&oc); // aplikujeme nastavenĂ­ na CH1 (PA5)
 8002c38:	f107 031c 	add.w	r3, r7, #28
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	2101      	movs	r1, #1
 8002c40:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002c44:	f7fe fd0c 	bl	8001660 <LL_TIM_OC_Init>
	LL_TIM_OC_EnablePreload(TIM2,LL_TIM_CHANNEL_CH1);
 8002c48:	2101      	movs	r1, #1
 8002c4a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002c4e:	f7ff ff6f 	bl	8002b30 <LL_TIM_OC_EnablePreload>

	LL_TIM_EnableIT_UPDATE(TIM2); // povolĂ­m pĹ™eruĹˇenĂ­ od pĹ™eteÄŤenĂ­
 8002c52:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002c56:	f7ff ffbb 	bl	8002bd0 <LL_TIM_EnableIT_UPDATE>
	NVIC_SetPriority(TIM2_IRQn,2); // nĂ­zkĂˇ priorita
 8002c5a:	2102      	movs	r1, #2
 8002c5c:	201c      	movs	r0, #28
 8002c5e:	f7ff fefd 	bl	8002a5c <NVIC_SetPriority>
	NVIC_EnableIRQ(TIM2_IRQn);
 8002c62:	201c      	movs	r0, #28
 8002c64:	f7ff fee0 	bl	8002a28 <NVIC_EnableIRQ>
	// a ÄŤĂ­taÄŤ spustĂ­me
	LL_TIM_EnableCounter(TIM2);
 8002c68:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002c6c:	f7ff ff50 	bl	8002b10 <LL_TIM_EnableCounter>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c70:	1d3b      	adds	r3, r7, #4
 8002c72:	2200      	movs	r2, #0
 8002c74:	601a      	str	r2, [r3, #0]
 8002c76:	605a      	str	r2, [r3, #4]
 8002c78:	609a      	str	r2, [r3, #8]
 8002c7a:	60da      	str	r2, [r3, #12]
 8002c7c:	611a      	str	r2, [r3, #16]
 8002c7e:	615a      	str	r2, [r3, #20]
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002c80:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002c84:	f7ff ff14 	bl	8002ab0 <LL_AHB1_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8002c88:	2320      	movs	r3, #32
 8002c8a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002c8c:	2302      	movs	r3, #2
 8002c8e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002c90:	2303      	movs	r3, #3
 8002c92:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002c94:	2300      	movs	r3, #0
 8002c96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c9c:	1d3b      	adds	r3, r7, #4
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ca4:	f7fe f97b 	bl	8000f9e <LL_GPIO_Init>

}
 8002ca8:	bf00      	nop
 8002caa:	3750      	adds	r7, #80	; 0x50
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <NVIC_EnableIRQ>:
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002cba:	79fb      	ldrb	r3, [r7, #7]
 8002cbc:	f003 021f 	and.w	r2, r3, #31
 8002cc0:	4907      	ldr	r1, [pc, #28]	; (8002ce0 <NVIC_EnableIRQ+0x30>)
 8002cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cc6:	095b      	lsrs	r3, r3, #5
 8002cc8:	2001      	movs	r0, #1
 8002cca:	fa00 f202 	lsl.w	r2, r0, r2
 8002cce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002cd2:	bf00      	nop
 8002cd4:	370c      	adds	r7, #12
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	e000e100 	.word	0xe000e100

08002ce4 <NVIC_SetPriority>:
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	4603      	mov	r3, r0
 8002cec:	6039      	str	r1, [r7, #0]
 8002cee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8002cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	da0b      	bge.n	8002d10 <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	b2da      	uxtb	r2, r3
 8002cfc:	490c      	ldr	r1, [pc, #48]	; (8002d30 <NVIC_SetPriority+0x4c>)
 8002cfe:	79fb      	ldrb	r3, [r7, #7]
 8002d00:	f003 030f 	and.w	r3, r3, #15
 8002d04:	3b04      	subs	r3, #4
 8002d06:	0112      	lsls	r2, r2, #4
 8002d08:	b2d2      	uxtb	r2, r2
 8002d0a:	440b      	add	r3, r1
 8002d0c:	761a      	strb	r2, [r3, #24]
}
 8002d0e:	e009      	b.n	8002d24 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	b2da      	uxtb	r2, r3
 8002d14:	4907      	ldr	r1, [pc, #28]	; (8002d34 <NVIC_SetPriority+0x50>)
 8002d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d1a:	0112      	lsls	r2, r2, #4
 8002d1c:	b2d2      	uxtb	r2, r2
 8002d1e:	440b      	add	r3, r1
 8002d20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002d24:	bf00      	nop
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr
 8002d30:	e000ed00 	.word	0xe000ed00
 8002d34:	e000e100 	.word	0xe000e100

08002d38 <LL_DMA_EnableChannel>:
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	3b01      	subs	r3, #1
 8002d46:	4a0b      	ldr	r2, [pc, #44]	; (8002d74 <LL_DMA_EnableChannel+0x3c>)
 8002d48:	5cd3      	ldrb	r3, [r2, r3]
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	4413      	add	r3, r2
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	683a      	ldr	r2, [r7, #0]
 8002d54:	3a01      	subs	r2, #1
 8002d56:	4907      	ldr	r1, [pc, #28]	; (8002d74 <LL_DMA_EnableChannel+0x3c>)
 8002d58:	5c8a      	ldrb	r2, [r1, r2]
 8002d5a:	4611      	mov	r1, r2
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	440a      	add	r2, r1
 8002d60:	f043 0301 	orr.w	r3, r3, #1
 8002d64:	6013      	str	r3, [r2, #0]
}
 8002d66:	bf00      	nop
 8002d68:	370c      	adds	r7, #12
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop
 8002d74:	08006154 	.word	0x08006154

08002d78 <LL_DMA_SetDataTransferDirection>:
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b085      	sub	sp, #20
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	3b01      	subs	r3, #1
 8002d88:	4a0d      	ldr	r2, [pc, #52]	; (8002dc0 <LL_DMA_SetDataTransferDirection+0x48>)
 8002d8a:	5cd3      	ldrb	r3, [r2, r3]
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	4413      	add	r3, r2
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d98:	f023 0310 	bic.w	r3, r3, #16
 8002d9c:	68ba      	ldr	r2, [r7, #8]
 8002d9e:	3a01      	subs	r2, #1
 8002da0:	4907      	ldr	r1, [pc, #28]	; (8002dc0 <LL_DMA_SetDataTransferDirection+0x48>)
 8002da2:	5c8a      	ldrb	r2, [r1, r2]
 8002da4:	4611      	mov	r1, r2
 8002da6:	68fa      	ldr	r2, [r7, #12]
 8002da8:	440a      	add	r2, r1
 8002daa:	4611      	mov	r1, r2
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	600b      	str	r3, [r1, #0]
}
 8002db2:	bf00      	nop
 8002db4:	3714      	adds	r7, #20
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	08006154 	.word	0x08006154

08002dc4 <LL_DMA_GetDataTransferDirection>:
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	3b01      	subs	r3, #1
 8002dd2:	4a07      	ldr	r2, [pc, #28]	; (8002df0 <LL_DMA_GetDataTransferDirection+0x2c>)
 8002dd4:	5cd3      	ldrb	r3, [r2, r3]
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	4413      	add	r3, r2
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	f244 0310 	movw	r3, #16400	; 0x4010
 8002de2:	4013      	ands	r3, r2
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr
 8002df0:	08006154 	.word	0x08006154

08002df4 <LL_DMA_SetMode>:
{
 8002df4:	b480      	push	{r7}
 8002df6:	b085      	sub	sp, #20
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	60f8      	str	r0, [r7, #12]
 8002dfc:	60b9      	str	r1, [r7, #8]
 8002dfe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	3b01      	subs	r3, #1
 8002e04:	4a0c      	ldr	r2, [pc, #48]	; (8002e38 <LL_DMA_SetMode+0x44>)
 8002e06:	5cd3      	ldrb	r3, [r2, r3]
 8002e08:	461a      	mov	r2, r3
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	4413      	add	r3, r2
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f023 0220 	bic.w	r2, r3, #32
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	3b01      	subs	r3, #1
 8002e18:	4907      	ldr	r1, [pc, #28]	; (8002e38 <LL_DMA_SetMode+0x44>)
 8002e1a:	5ccb      	ldrb	r3, [r1, r3]
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	440b      	add	r3, r1
 8002e22:	4619      	mov	r1, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	600b      	str	r3, [r1, #0]
}
 8002e2a:	bf00      	nop
 8002e2c:	3714      	adds	r7, #20
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	08006154 	.word	0x08006154

08002e3c <LL_DMA_SetPeriphIncMode>:
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b085      	sub	sp, #20
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	60b9      	str	r1, [r7, #8]
 8002e46:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	4a0c      	ldr	r2, [pc, #48]	; (8002e80 <LL_DMA_SetPeriphIncMode+0x44>)
 8002e4e:	5cd3      	ldrb	r3, [r2, r3]
 8002e50:	461a      	mov	r2, r3
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	4413      	add	r3, r2
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	3b01      	subs	r3, #1
 8002e60:	4907      	ldr	r1, [pc, #28]	; (8002e80 <LL_DMA_SetPeriphIncMode+0x44>)
 8002e62:	5ccb      	ldrb	r3, [r1, r3]
 8002e64:	4619      	mov	r1, r3
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	440b      	add	r3, r1
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	600b      	str	r3, [r1, #0]
}
 8002e72:	bf00      	nop
 8002e74:	3714      	adds	r7, #20
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop
 8002e80:	08006154 	.word	0x08006154

08002e84 <LL_DMA_SetMemoryIncMode>:
{
 8002e84:	b480      	push	{r7}
 8002e86:	b085      	sub	sp, #20
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	3b01      	subs	r3, #1
 8002e94:	4a0c      	ldr	r2, [pc, #48]	; (8002ec8 <LL_DMA_SetMemoryIncMode+0x44>)
 8002e96:	5cd3      	ldrb	r3, [r2, r3]
 8002e98:	461a      	mov	r2, r3
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	4413      	add	r3, r2
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	3b01      	subs	r3, #1
 8002ea8:	4907      	ldr	r1, [pc, #28]	; (8002ec8 <LL_DMA_SetMemoryIncMode+0x44>)
 8002eaa:	5ccb      	ldrb	r3, [r1, r3]
 8002eac:	4619      	mov	r1, r3
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	440b      	add	r3, r1
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	600b      	str	r3, [r1, #0]
}
 8002eba:	bf00      	nop
 8002ebc:	3714      	adds	r7, #20
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	08006154 	.word	0x08006154

08002ecc <LL_DMA_SetPeriphSize>:
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b085      	sub	sp, #20
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	3b01      	subs	r3, #1
 8002edc:	4a0c      	ldr	r2, [pc, #48]	; (8002f10 <LL_DMA_SetPeriphSize+0x44>)
 8002ede:	5cd3      	ldrb	r3, [r2, r3]
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	4907      	ldr	r1, [pc, #28]	; (8002f10 <LL_DMA_SetPeriphSize+0x44>)
 8002ef2:	5ccb      	ldrb	r3, [r1, r3]
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	440b      	add	r3, r1
 8002efa:	4619      	mov	r1, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	600b      	str	r3, [r1, #0]
}
 8002f02:	bf00      	nop
 8002f04:	3714      	adds	r7, #20
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr
 8002f0e:	bf00      	nop
 8002f10:	08006154 	.word	0x08006154

08002f14 <LL_DMA_SetMemorySize>:
{
 8002f14:	b480      	push	{r7}
 8002f16:	b085      	sub	sp, #20
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	3b01      	subs	r3, #1
 8002f24:	4a0c      	ldr	r2, [pc, #48]	; (8002f58 <LL_DMA_SetMemorySize+0x44>)
 8002f26:	5cd3      	ldrb	r3, [r2, r3]
 8002f28:	461a      	mov	r2, r3
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	4413      	add	r3, r2
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	3b01      	subs	r3, #1
 8002f38:	4907      	ldr	r1, [pc, #28]	; (8002f58 <LL_DMA_SetMemorySize+0x44>)
 8002f3a:	5ccb      	ldrb	r3, [r1, r3]
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	440b      	add	r3, r1
 8002f42:	4619      	mov	r1, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	600b      	str	r3, [r1, #0]
}
 8002f4a:	bf00      	nop
 8002f4c:	3714      	adds	r7, #20
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop
 8002f58:	08006154 	.word	0x08006154

08002f5c <LL_DMA_SetChannelPriorityLevel>:
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b085      	sub	sp, #20
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	60b9      	str	r1, [r7, #8]
 8002f66:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	3b01      	subs	r3, #1
 8002f6c:	4a0c      	ldr	r2, [pc, #48]	; (8002fa0 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8002f6e:	5cd3      	ldrb	r3, [r2, r3]
 8002f70:	461a      	mov	r2, r3
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	4413      	add	r3, r2
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	4907      	ldr	r1, [pc, #28]	; (8002fa0 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8002f82:	5ccb      	ldrb	r3, [r1, r3]
 8002f84:	4619      	mov	r1, r3
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	440b      	add	r3, r1
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	600b      	str	r3, [r1, #0]
}
 8002f92:	bf00      	nop
 8002f94:	3714      	adds	r7, #20
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop
 8002fa0:	08006154 	.word	0x08006154

08002fa4 <LL_DMA_SetDataLength>:
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b085      	sub	sp, #20
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	4a0c      	ldr	r2, [pc, #48]	; (8002fe8 <LL_DMA_SetDataLength+0x44>)
 8002fb6:	5cd3      	ldrb	r3, [r2, r3]
 8002fb8:	461a      	mov	r2, r3
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	0c1b      	lsrs	r3, r3, #16
 8002fc2:	041b      	lsls	r3, r3, #16
 8002fc4:	68ba      	ldr	r2, [r7, #8]
 8002fc6:	3a01      	subs	r2, #1
 8002fc8:	4907      	ldr	r1, [pc, #28]	; (8002fe8 <LL_DMA_SetDataLength+0x44>)
 8002fca:	5c8a      	ldrb	r2, [r1, r2]
 8002fcc:	4611      	mov	r1, r2
 8002fce:	68fa      	ldr	r2, [r7, #12]
 8002fd0:	440a      	add	r2, r1
 8002fd2:	4611      	mov	r1, r2
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	604b      	str	r3, [r1, #4]
}
 8002fda:	bf00      	nop
 8002fdc:	3714      	adds	r7, #20
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	08006154 	.word	0x08006154

08002fec <LL_DMA_GetDataLength>:
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	3b01      	subs	r3, #1
 8002ffa:	4a06      	ldr	r2, [pc, #24]	; (8003014 <LL_DMA_GetDataLength+0x28>)
 8002ffc:	5cd3      	ldrb	r3, [r2, r3]
 8002ffe:	461a      	mov	r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	4413      	add	r3, r2
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	b29b      	uxth	r3, r3
}
 8003008:	4618      	mov	r0, r3
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr
 8003014:	08006154 	.word	0x08006154

08003018 <LL_DMA_ConfigAddresses>:
{
 8003018:	b480      	push	{r7}
 800301a:	b085      	sub	sp, #20
 800301c:	af00      	add	r7, sp, #0
 800301e:	60f8      	str	r0, [r7, #12]
 8003020:	60b9      	str	r1, [r7, #8]
 8003022:	607a      	str	r2, [r7, #4]
 8003024:	603b      	str	r3, [r7, #0]
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 8003026:	69bb      	ldr	r3, [r7, #24]
 8003028:	2b10      	cmp	r3, #16
 800302a:	d114      	bne.n	8003056 <LL_DMA_ConfigAddresses+0x3e>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, SrcAddress);
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	3b01      	subs	r3, #1
 8003030:	4a16      	ldr	r2, [pc, #88]	; (800308c <LL_DMA_ConfigAddresses+0x74>)
 8003032:	5cd3      	ldrb	r3, [r2, r3]
 8003034:	461a      	mov	r2, r3
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	4413      	add	r3, r2
 800303a:	461a      	mov	r2, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	3b01      	subs	r3, #1
 8003044:	4a11      	ldr	r2, [pc, #68]	; (800308c <LL_DMA_ConfigAddresses+0x74>)
 8003046:	5cd3      	ldrb	r3, [r2, r3]
 8003048:	461a      	mov	r2, r3
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	4413      	add	r3, r2
 800304e:	461a      	mov	r2, r3
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	6093      	str	r3, [r2, #8]
}
 8003054:	e013      	b.n	800307e <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	3b01      	subs	r3, #1
 800305a:	4a0c      	ldr	r2, [pc, #48]	; (800308c <LL_DMA_ConfigAddresses+0x74>)
 800305c:	5cd3      	ldrb	r3, [r2, r3]
 800305e:	461a      	mov	r2, r3
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	4413      	add	r3, r2
 8003064:	461a      	mov	r2, r3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	3b01      	subs	r3, #1
 800306e:	4a07      	ldr	r2, [pc, #28]	; (800308c <LL_DMA_ConfigAddresses+0x74>)
 8003070:	5cd3      	ldrb	r3, [r2, r3]
 8003072:	461a      	mov	r2, r3
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	4413      	add	r3, r2
 8003078:	461a      	mov	r2, r3
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	60d3      	str	r3, [r2, #12]
}
 800307e:	bf00      	nop
 8003080:	3714      	adds	r7, #20
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	08006154 	.word	0x08006154

08003090 <LL_DMA_SetPeriphAddress>:
{
 8003090:	b480      	push	{r7}
 8003092:	b085      	sub	sp, #20
 8003094:	af00      	add	r7, sp, #0
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	60b9      	str	r1, [r7, #8]
 800309a:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	3b01      	subs	r3, #1
 80030a0:	4a06      	ldr	r2, [pc, #24]	; (80030bc <LL_DMA_SetPeriphAddress+0x2c>)
 80030a2:	5cd3      	ldrb	r3, [r2, r3]
 80030a4:	461a      	mov	r2, r3
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	4413      	add	r3, r2
 80030aa:	461a      	mov	r2, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6093      	str	r3, [r2, #8]
}
 80030b0:	bf00      	nop
 80030b2:	3714      	adds	r7, #20
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr
 80030bc:	08006154 	.word	0x08006154

080030c0 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	3b01      	subs	r3, #1
 80030ce:	4a0b      	ldr	r2, [pc, #44]	; (80030fc <LL_DMA_EnableIT_TC+0x3c>)
 80030d0:	5cd3      	ldrb	r3, [r2, r3]
 80030d2:	461a      	mov	r2, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	4413      	add	r3, r2
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	683a      	ldr	r2, [r7, #0]
 80030dc:	3a01      	subs	r2, #1
 80030de:	4907      	ldr	r1, [pc, #28]	; (80030fc <LL_DMA_EnableIT_TC+0x3c>)
 80030e0:	5c8a      	ldrb	r2, [r1, r2]
 80030e2:	4611      	mov	r1, r2
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	440a      	add	r2, r1
 80030e8:	f043 0302 	orr.w	r3, r3, #2
 80030ec:	6013      	str	r3, [r2, #0]
}
 80030ee:	bf00      	nop
 80030f0:	370c      	adds	r7, #12
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	08006154 	.word	0x08006154

08003100 <LL_DMA_EnableIT_HT>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_HT(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_HTIE);
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	3b01      	subs	r3, #1
 800310e:	4a0b      	ldr	r2, [pc, #44]	; (800313c <LL_DMA_EnableIT_HT+0x3c>)
 8003110:	5cd3      	ldrb	r3, [r2, r3]
 8003112:	461a      	mov	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4413      	add	r3, r2
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	683a      	ldr	r2, [r7, #0]
 800311c:	3a01      	subs	r2, #1
 800311e:	4907      	ldr	r1, [pc, #28]	; (800313c <LL_DMA_EnableIT_HT+0x3c>)
 8003120:	5c8a      	ldrb	r2, [r1, r2]
 8003122:	4611      	mov	r1, r2
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	440a      	add	r2, r1
 8003128:	f043 0304 	orr.w	r3, r3, #4
 800312c:	6013      	str	r3, [r2, #0]
}
 800312e:	bf00      	nop
 8003130:	370c      	adds	r7, #12
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	08006154 	.word	0x08006154

08003140 <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TEIE);
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	3b01      	subs	r3, #1
 800314e:	4a0b      	ldr	r2, [pc, #44]	; (800317c <LL_DMA_EnableIT_TE+0x3c>)
 8003150:	5cd3      	ldrb	r3, [r2, r3]
 8003152:	461a      	mov	r2, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	4413      	add	r3, r2
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	683a      	ldr	r2, [r7, #0]
 800315c:	3a01      	subs	r2, #1
 800315e:	4907      	ldr	r1, [pc, #28]	; (800317c <LL_DMA_EnableIT_TE+0x3c>)
 8003160:	5c8a      	ldrb	r2, [r1, r2]
 8003162:	4611      	mov	r1, r2
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	440a      	add	r2, r1
 8003168:	f043 0308 	orr.w	r3, r3, #8
 800316c:	6013      	str	r3, [r2, #0]
}
 800316e:	bf00      	nop
 8003170:	370c      	adds	r7, #12
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr
 800317a:	bf00      	nop
 800317c:	08006154 	.word	0x08006154

08003180 <LL_AHB1_GRP1_EnableClock>:
{
 8003180:	b480      	push	{r7}
 8003182:	b085      	sub	sp, #20
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8003188:	4b08      	ldr	r3, [pc, #32]	; (80031ac <LL_AHB1_GRP1_EnableClock+0x2c>)
 800318a:	695a      	ldr	r2, [r3, #20]
 800318c:	4907      	ldr	r1, [pc, #28]	; (80031ac <LL_AHB1_GRP1_EnableClock+0x2c>)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4313      	orrs	r3, r2
 8003192:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8003194:	4b05      	ldr	r3, [pc, #20]	; (80031ac <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003196:	695a      	ldr	r2, [r3, #20]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	4013      	ands	r3, r2
 800319c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800319e:	68fb      	ldr	r3, [r7, #12]
}
 80031a0:	bf00      	nop
 80031a2:	3714      	adds	r7, #20
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr
 80031ac:	40021000 	.word	0x40021000

080031b0 <LL_APB1_GRP1_EnableClock>:
{
 80031b0:	b480      	push	{r7}
 80031b2:	b085      	sub	sp, #20
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80031b8:	4b08      	ldr	r3, [pc, #32]	; (80031dc <LL_APB1_GRP1_EnableClock+0x2c>)
 80031ba:	69da      	ldr	r2, [r3, #28]
 80031bc:	4907      	ldr	r1, [pc, #28]	; (80031dc <LL_APB1_GRP1_EnableClock+0x2c>)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80031c4:	4b05      	ldr	r3, [pc, #20]	; (80031dc <LL_APB1_GRP1_EnableClock+0x2c>)
 80031c6:	69da      	ldr	r2, [r3, #28]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	4013      	ands	r3, r2
 80031cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80031ce:	68fb      	ldr	r3, [r7, #12]
}
 80031d0:	bf00      	nop
 80031d2:	3714      	adds	r7, #20
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr
 80031dc:	40021000 	.word	0x40021000

080031e0 <LL_USART_Enable>:
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f043 0201 	orr.w	r2, r3, #1
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	601a      	str	r2, [r3, #0]
}
 80031f4:	bf00      	nop
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr

08003200 <LL_USART_ConfigAsyncMode>:
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	609a      	str	r2, [r3, #8]
}
 8003220:	bf00      	nop
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <LL_USART_EnableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f043 0210 	orr.w	r2, r3, #16
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	601a      	str	r2, [r3, #0]
}
 8003240:	bf00      	nop
 8003242:	370c      	adds	r7, #12
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	609a      	str	r2, [r3, #8]
}
 8003260:	bf00      	nop
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	609a      	str	r2, [r3, #8]
}
 8003280:	bf00      	nop
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr

0800328c <LL_USART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	609a      	str	r2, [r3, #8]
}
 80032a0:	bf00      	nop
 80032a2:	370c      	adds	r7, #12
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr

080032ac <LL_USART_DMA_GetRegAddr>:
  *         @arg @ref LL_USART_DMA_REG_DATA_TRANSMIT
  *         @arg @ref LL_USART_DMA_REG_DATA_RECEIVE
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(USART_TypeDef *USARTx, uint32_t Direction)
{
 80032ac:	b490      	push	{r4, r7}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  register uint32_t data_reg_addr = 0U;
 80032b6:	2400      	movs	r4, #0

  if (Direction == LL_USART_DMA_REG_DATA_TRANSMIT)
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d103      	bne.n	80032c6 <LL_USART_DMA_GetRegAddr+0x1a>
  {
    /* return address of TDR register */
    data_reg_addr = (uint32_t) &(USARTx->TDR);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	3328      	adds	r3, #40	; 0x28
 80032c2:	461c      	mov	r4, r3
 80032c4:	e002      	b.n	80032cc <LL_USART_DMA_GetRegAddr+0x20>
  }
  else
  {
    /* return address of RDR register */
    data_reg_addr = (uint32_t) &(USARTx->RDR);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	3324      	adds	r3, #36	; 0x24
 80032ca:	461c      	mov	r4, r3
  }

  return data_reg_addr;
 80032cc:	4623      	mov	r3, r4
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3708      	adds	r7, #8
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bc90      	pop	{r4, r7}
 80032d6:	4770      	bx	lr

080032d8 <USART2_RegisterCallback>:
//uint32_t buff[DMA_USART2_BUFFER_SIZE];
static uint16_t old_pos = 0;

static void (*USART2_ProcessData)(const char *data, uint16_t len) = 0;

void USART2_RegisterCallback(void *callback) {
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
	if (callback != 0) {
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d002      	beq.n	80032ec <USART2_RegisterCallback+0x14>
		USART2_ProcessData = callback;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a03      	ldr	r2, [pc, #12]	; (80032f8 <USART2_RegisterCallback+0x20>)
 80032ea:	6013      	str	r3, [r2, #0]
	}
}
 80032ec:	bf00      	nop
 80032ee:	370c      	adds	r7, #12
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr
 80032f8:	20000524 	.word	0x20000524

080032fc <MX_USART2_UART_Init>:

/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void) {
 80032fc:	b5b0      	push	{r4, r5, r7, lr}
 80032fe:	b090      	sub	sp, #64	; 0x40
 8003300:	af02      	add	r7, sp, #8
	LL_USART_InitTypeDef USART_InitStruct = { 0 };
 8003302:	f107 031c 	add.w	r3, r7, #28
 8003306:	2200      	movs	r2, #0
 8003308:	601a      	str	r2, [r3, #0]
 800330a:	605a      	str	r2, [r3, #4]
 800330c:	609a      	str	r2, [r3, #8]
 800330e:	60da      	str	r2, [r3, #12]
 8003310:	611a      	str	r2, [r3, #16]
 8003312:	615a      	str	r2, [r3, #20]
 8003314:	619a      	str	r2, [r3, #24]

	LL_GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8003316:	1d3b      	adds	r3, r7, #4
 8003318:	2200      	movs	r2, #0
 800331a:	601a      	str	r2, [r3, #0]
 800331c:	605a      	str	r2, [r3, #4]
 800331e:	609a      	str	r2, [r3, #8]
 8003320:	60da      	str	r2, [r3, #12]
 8003322:	611a      	str	r2, [r3, #16]
 8003324:	615a      	str	r2, [r3, #20]
	/* Peripheral clock enable */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8003326:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800332a:	f7ff ff41 	bl	80031b0 <LL_APB1_GRP1_EnableClock>

	LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800332e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003332:	f7ff ff25 	bl	8003180 <LL_AHB1_GRP1_EnableClock>
	/**USART2 GPIO Configuration
	 PA2   ------> USART2_TX
	 PA15   ------> USART2_RX
	 */
	GPIO_InitStruct.Pin = LL_GPIO_PIN_2 | LL_GPIO_PIN_15;
 8003336:	f248 0304 	movw	r3, #32772	; 0x8004
 800333a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800333c:	2302      	movs	r3, #2
 800333e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8003340:	2303      	movs	r3, #3
 8003342:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003344:	2300      	movs	r3, #0
 8003346:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003348:	2300      	movs	r3, #0
 800334a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800334c:	2307      	movs	r3, #7
 800334e:	61bb      	str	r3, [r7, #24]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003350:	1d3b      	adds	r3, r7, #4
 8003352:	4619      	mov	r1, r3
 8003354:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003358:	f7fd fe21 	bl	8000f9e <LL_GPIO_Init>

	/* USART2 DMA Init */

	/* USART2_RX Init */
	LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6,
 800335c:	2200      	movs	r2, #0
 800335e:	2106      	movs	r1, #6
 8003360:	4854      	ldr	r0, [pc, #336]	; (80034b4 <MX_USART2_UART_Init+0x1b8>)
 8003362:	f7ff fd09 	bl	8002d78 <LL_DMA_SetDataTransferDirection>
	LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
	LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6,
 8003366:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800336a:	2106      	movs	r1, #6
 800336c:	4851      	ldr	r0, [pc, #324]	; (80034b4 <MX_USART2_UART_Init+0x1b8>)
 800336e:	f7ff fdf5 	bl	8002f5c <LL_DMA_SetChannelPriorityLevel>
	LL_DMA_PRIORITY_MEDIUM);
	LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_NORMAL);
 8003372:	2200      	movs	r2, #0
 8003374:	2106      	movs	r1, #6
 8003376:	484f      	ldr	r0, [pc, #316]	; (80034b4 <MX_USART2_UART_Init+0x1b8>)
 8003378:	f7ff fd3c 	bl	8002df4 <LL_DMA_SetMode>
	LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 800337c:	2200      	movs	r2, #0
 800337e:	2106      	movs	r1, #6
 8003380:	484c      	ldr	r0, [pc, #304]	; (80034b4 <MX_USART2_UART_Init+0x1b8>)
 8003382:	f7ff fd5b 	bl	8002e3c <LL_DMA_SetPeriphIncMode>
	LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 8003386:	2280      	movs	r2, #128	; 0x80
 8003388:	2106      	movs	r1, #6
 800338a:	484a      	ldr	r0, [pc, #296]	; (80034b4 <MX_USART2_UART_Init+0x1b8>)
 800338c:	f7ff fd7a 	bl	8002e84 <LL_DMA_SetMemoryIncMode>
	LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_BYTE);
 8003390:	2200      	movs	r2, #0
 8003392:	2106      	movs	r1, #6
 8003394:	4847      	ldr	r0, [pc, #284]	; (80034b4 <MX_USART2_UART_Init+0x1b8>)
 8003396:	f7ff fd99 	bl	8002ecc <LL_DMA_SetPeriphSize>
	LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 800339a:	2200      	movs	r2, #0
 800339c:	2106      	movs	r1, #6
 800339e:	4845      	ldr	r0, [pc, #276]	; (80034b4 <MX_USART2_UART_Init+0x1b8>)
 80033a0:	f7ff fdb8 	bl	8002f14 <LL_DMA_SetMemorySize>

	LL_DMA_ConfigAddresses( DMA1, LL_DMA_CHANNEL_6,
 80033a4:	2101      	movs	r1, #1
 80033a6:	4844      	ldr	r0, [pc, #272]	; (80034b8 <MX_USART2_UART_Init+0x1bc>)
 80033a8:	f7ff ff80 	bl	80032ac <LL_USART_DMA_GetRegAddr>
 80033ac:	4604      	mov	r4, r0
 80033ae:	4d43      	ldr	r5, [pc, #268]	; (80034bc <MX_USART2_UART_Init+0x1c0>)
 80033b0:	2106      	movs	r1, #6
 80033b2:	4840      	ldr	r0, [pc, #256]	; (80034b4 <MX_USART2_UART_Init+0x1b8>)
 80033b4:	f7ff fd06 	bl	8002dc4 <LL_DMA_GetDataTransferDirection>
 80033b8:	4603      	mov	r3, r0
 80033ba:	9300      	str	r3, [sp, #0]
 80033bc:	462b      	mov	r3, r5
 80033be:	4622      	mov	r2, r4
 80033c0:	2106      	movs	r1, #6
 80033c2:	483c      	ldr	r0, [pc, #240]	; (80034b4 <MX_USART2_UART_Init+0x1b8>)
 80033c4:	f7ff fe28 	bl	8003018 <LL_DMA_ConfigAddresses>
			LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_RECEIVE),
			(uint32_t) bufferUSART2dma,
			LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6));

	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_6, DMA_USART2_BUFFER_SIZE);
 80033c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80033cc:	2106      	movs	r1, #6
 80033ce:	4839      	ldr	r0, [pc, #228]	; (80034b4 <MX_USART2_UART_Init+0x1b8>)
 80033d0:	f7ff fde8 	bl	8002fa4 <LL_DMA_SetDataLength>
	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);
 80033d4:	2106      	movs	r1, #6
 80033d6:	4837      	ldr	r0, [pc, #220]	; (80034b4 <MX_USART2_UART_Init+0x1b8>)
 80033d8:	f7ff fcae 	bl	8002d38 <LL_DMA_EnableChannel>
	LL_USART_EnableDMAReq_RX(USART2);
 80033dc:	4836      	ldr	r0, [pc, #216]	; (80034b8 <MX_USART2_UART_Init+0x1bc>)
 80033de:	f7ff ff45 	bl	800326c <LL_USART_EnableDMAReq_RX>

#if !POLLING
	LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_6);
 80033e2:	2106      	movs	r1, #6
 80033e4:	4833      	ldr	r0, [pc, #204]	; (80034b4 <MX_USART2_UART_Init+0x1b8>)
 80033e6:	f7ff fe6b 	bl	80030c0 <LL_DMA_EnableIT_TC>
	LL_DMA_EnableIT_HT(DMA1, LL_DMA_CHANNEL_6);
 80033ea:	2106      	movs	r1, #6
 80033ec:	4831      	ldr	r0, [pc, #196]	; (80034b4 <MX_USART2_UART_Init+0x1b8>)
 80033ee:	f7ff fe87 	bl	8003100 <LL_DMA_EnableIT_HT>
#endif

	/* USART2_TX Init */
	LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_7,
 80033f2:	2210      	movs	r2, #16
 80033f4:	2107      	movs	r1, #7
 80033f6:	482f      	ldr	r0, [pc, #188]	; (80034b4 <MX_USART2_UART_Init+0x1b8>)
 80033f8:	f7ff fcbe 	bl	8002d78 <LL_DMA_SetDataTransferDirection>
	LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
	LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_7,
 80033fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003400:	2107      	movs	r1, #7
 8003402:	482c      	ldr	r0, [pc, #176]	; (80034b4 <MX_USART2_UART_Init+0x1b8>)
 8003404:	f7ff fdaa 	bl	8002f5c <LL_DMA_SetChannelPriorityLevel>
	LL_DMA_PRIORITY_MEDIUM);
	LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MODE_NORMAL);
 8003408:	2200      	movs	r2, #0
 800340a:	2107      	movs	r1, #7
 800340c:	4829      	ldr	r0, [pc, #164]	; (80034b4 <MX_USART2_UART_Init+0x1b8>)
 800340e:	f7ff fcf1 	bl	8002df4 <LL_DMA_SetMode>
	LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PERIPH_NOINCREMENT);
 8003412:	2200      	movs	r2, #0
 8003414:	2107      	movs	r1, #7
 8003416:	4827      	ldr	r0, [pc, #156]	; (80034b4 <MX_USART2_UART_Init+0x1b8>)
 8003418:	f7ff fd10 	bl	8002e3c <LL_DMA_SetPeriphIncMode>
	LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MEMORY_INCREMENT);
 800341c:	2280      	movs	r2, #128	; 0x80
 800341e:	2107      	movs	r1, #7
 8003420:	4824      	ldr	r0, [pc, #144]	; (80034b4 <MX_USART2_UART_Init+0x1b8>)
 8003422:	f7ff fd2f 	bl	8002e84 <LL_DMA_SetMemoryIncMode>
	LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_PDATAALIGN_BYTE);
 8003426:	2200      	movs	r2, #0
 8003428:	2107      	movs	r1, #7
 800342a:	4822      	ldr	r0, [pc, #136]	; (80034b4 <MX_USART2_UART_Init+0x1b8>)
 800342c:	f7ff fd4e 	bl	8002ecc <LL_DMA_SetPeriphSize>
	LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_7, LL_DMA_MDATAALIGN_BYTE);
 8003430:	2200      	movs	r2, #0
 8003432:	2107      	movs	r1, #7
 8003434:	481f      	ldr	r0, [pc, #124]	; (80034b4 <MX_USART2_UART_Init+0x1b8>)
 8003436:	f7ff fd6d 	bl	8002f14 <LL_DMA_SetMemorySize>

	LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_7,
 800343a:	2100      	movs	r1, #0
 800343c:	481e      	ldr	r0, [pc, #120]	; (80034b8 <MX_USART2_UART_Init+0x1bc>)
 800343e:	f7ff ff35 	bl	80032ac <LL_USART_DMA_GetRegAddr>
 8003442:	4603      	mov	r3, r0
 8003444:	461a      	mov	r2, r3
 8003446:	2107      	movs	r1, #7
 8003448:	481a      	ldr	r0, [pc, #104]	; (80034b4 <MX_USART2_UART_Init+0x1b8>)
 800344a:	f7ff fe21 	bl	8003090 <LL_DMA_SetPeriphAddress>
			LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_TRANSMIT));
	LL_USART_EnableDMAReq_TX(USART2);
 800344e:	481a      	ldr	r0, [pc, #104]	; (80034b8 <MX_USART2_UART_Init+0x1bc>)
 8003450:	f7ff ff1c 	bl	800328c <LL_USART_EnableDMAReq_TX>

	LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_7);
 8003454:	2107      	movs	r1, #7
 8003456:	4817      	ldr	r0, [pc, #92]	; (80034b4 <MX_USART2_UART_Init+0x1b8>)
 8003458:	f7ff fe72 	bl	8003140 <LL_DMA_EnableIT_TE>

	/* USART2 interrupt Init */
	NVIC_SetPriority(USART2_IRQn, 0);
 800345c:	2100      	movs	r1, #0
 800345e:	2026      	movs	r0, #38	; 0x26
 8003460:	f7ff fc40 	bl	8002ce4 <NVIC_SetPriority>
	NVIC_EnableIRQ(USART2_IRQn);
 8003464:	2026      	movs	r0, #38	; 0x26
 8003466:	f7ff fc23 	bl	8002cb0 <NVIC_EnableIRQ>

	USART_InitStruct.BaudRate = 115200;
 800346a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800346e:	61fb      	str	r3, [r7, #28]
	USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8003470:	2300      	movs	r3, #0
 8003472:	623b      	str	r3, [r7, #32]
	USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8003474:	2300      	movs	r3, #0
 8003476:	627b      	str	r3, [r7, #36]	; 0x24
	USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8003478:	2300      	movs	r3, #0
 800347a:	62bb      	str	r3, [r7, #40]	; 0x28
	USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800347c:	230c      	movs	r3, #12
 800347e:	62fb      	str	r3, [r7, #44]	; 0x2c
	USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8003480:	2300      	movs	r3, #0
 8003482:	633b      	str	r3, [r7, #48]	; 0x30
	USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8003484:	2300      	movs	r3, #0
 8003486:	637b      	str	r3, [r7, #52]	; 0x34
	LL_USART_Init(USART2, &USART_InitStruct);
 8003488:	f107 031c 	add.w	r3, r7, #28
 800348c:	4619      	mov	r1, r3
 800348e:	480a      	ldr	r0, [pc, #40]	; (80034b8 <MX_USART2_UART_Init+0x1bc>)
 8003490:	f7fe fc4a 	bl	8001d28 <LL_USART_Init>
	LL_USART_DisableIT_CTS(USART2);
 8003494:	4808      	ldr	r0, [pc, #32]	; (80034b8 <MX_USART2_UART_Init+0x1bc>)
 8003496:	f7ff fed9 	bl	800324c <LL_USART_DisableIT_CTS>
#if !POLLING
	LL_USART_EnableIT_IDLE(USART2);
 800349a:	4807      	ldr	r0, [pc, #28]	; (80034b8 <MX_USART2_UART_Init+0x1bc>)
 800349c:	f7ff fec6 	bl	800322c <LL_USART_EnableIT_IDLE>
#endif
	LL_USART_ConfigAsyncMode(USART2);
 80034a0:	4805      	ldr	r0, [pc, #20]	; (80034b8 <MX_USART2_UART_Init+0x1bc>)
 80034a2:	f7ff fead 	bl	8003200 <LL_USART_ConfigAsyncMode>
	LL_USART_Enable(USART2);
 80034a6:	4804      	ldr	r0, [pc, #16]	; (80034b8 <MX_USART2_UART_Init+0x1bc>)
 80034a8:	f7ff fe9a 	bl	80031e0 <LL_USART_Enable>
}
 80034ac:	bf00      	nop
 80034ae:	3738      	adds	r7, #56	; 0x38
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bdb0      	pop	{r4, r5, r7, pc}
 80034b4:	40020000 	.word	0x40020000
 80034b8:	40004400 	.word	0x40004400
 80034bc:	20000564 	.word	0x20000564

080034c0 <DMA_RX_Init_fc>:

void DMA_RX_Init_fc(void) {
 80034c0:	b5b0      	push	{r4, r5, r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af02      	add	r7, sp, #8
	/* USART2_RX Init */
	LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6,
 80034c6:	2200      	movs	r2, #0
 80034c8:	2106      	movs	r1, #6
 80034ca:	4826      	ldr	r0, [pc, #152]	; (8003564 <DMA_RX_Init_fc+0xa4>)
 80034cc:	f7ff fc54 	bl	8002d78 <LL_DMA_SetDataTransferDirection>
	LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
	LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_6,
 80034d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80034d4:	2106      	movs	r1, #6
 80034d6:	4823      	ldr	r0, [pc, #140]	; (8003564 <DMA_RX_Init_fc+0xa4>)
 80034d8:	f7ff fd40 	bl	8002f5c <LL_DMA_SetChannelPriorityLevel>
	LL_DMA_PRIORITY_MEDIUM);
	LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MODE_NORMAL);
 80034dc:	2200      	movs	r2, #0
 80034de:	2106      	movs	r1, #6
 80034e0:	4820      	ldr	r0, [pc, #128]	; (8003564 <DMA_RX_Init_fc+0xa4>)
 80034e2:	f7ff fc87 	bl	8002df4 <LL_DMA_SetMode>
	LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PERIPH_NOINCREMENT);
 80034e6:	2200      	movs	r2, #0
 80034e8:	2106      	movs	r1, #6
 80034ea:	481e      	ldr	r0, [pc, #120]	; (8003564 <DMA_RX_Init_fc+0xa4>)
 80034ec:	f7ff fca6 	bl	8002e3c <LL_DMA_SetPeriphIncMode>
	LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MEMORY_INCREMENT);
 80034f0:	2280      	movs	r2, #128	; 0x80
 80034f2:	2106      	movs	r1, #6
 80034f4:	481b      	ldr	r0, [pc, #108]	; (8003564 <DMA_RX_Init_fc+0xa4>)
 80034f6:	f7ff fcc5 	bl	8002e84 <LL_DMA_SetMemoryIncMode>
	LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_PDATAALIGN_BYTE);
 80034fa:	2200      	movs	r2, #0
 80034fc:	2106      	movs	r1, #6
 80034fe:	4819      	ldr	r0, [pc, #100]	; (8003564 <DMA_RX_Init_fc+0xa4>)
 8003500:	f7ff fce4 	bl	8002ecc <LL_DMA_SetPeriphSize>
	LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_6, LL_DMA_MDATAALIGN_BYTE);
 8003504:	2200      	movs	r2, #0
 8003506:	2106      	movs	r1, #6
 8003508:	4816      	ldr	r0, [pc, #88]	; (8003564 <DMA_RX_Init_fc+0xa4>)
 800350a:	f7ff fd03 	bl	8002f14 <LL_DMA_SetMemorySize>

	LL_DMA_ConfigAddresses( DMA1, LL_DMA_CHANNEL_6,
 800350e:	2101      	movs	r1, #1
 8003510:	4815      	ldr	r0, [pc, #84]	; (8003568 <DMA_RX_Init_fc+0xa8>)
 8003512:	f7ff fecb 	bl	80032ac <LL_USART_DMA_GetRegAddr>
 8003516:	4604      	mov	r4, r0
 8003518:	4d14      	ldr	r5, [pc, #80]	; (800356c <DMA_RX_Init_fc+0xac>)
 800351a:	2106      	movs	r1, #6
 800351c:	4811      	ldr	r0, [pc, #68]	; (8003564 <DMA_RX_Init_fc+0xa4>)
 800351e:	f7ff fc51 	bl	8002dc4 <LL_DMA_GetDataTransferDirection>
 8003522:	4603      	mov	r3, r0
 8003524:	9300      	str	r3, [sp, #0]
 8003526:	462b      	mov	r3, r5
 8003528:	4622      	mov	r2, r4
 800352a:	2106      	movs	r1, #6
 800352c:	480d      	ldr	r0, [pc, #52]	; (8003564 <DMA_RX_Init_fc+0xa4>)
 800352e:	f7ff fd73 	bl	8003018 <LL_DMA_ConfigAddresses>
			LL_USART_DMA_GetRegAddr(USART2, LL_USART_DMA_REG_DATA_RECEIVE),
			(uint32_t) bufferUSART2dma,
			LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_6));

	LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_6, DMA_USART2_BUFFER_SIZE);
 8003532:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003536:	2106      	movs	r1, #6
 8003538:	480a      	ldr	r0, [pc, #40]	; (8003564 <DMA_RX_Init_fc+0xa4>)
 800353a:	f7ff fd33 	bl	8002fa4 <LL_DMA_SetDataLength>
	LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_6);
 800353e:	2106      	movs	r1, #6
 8003540:	4808      	ldr	r0, [pc, #32]	; (8003564 <DMA_RX_Init_fc+0xa4>)
 8003542:	f7ff fbf9 	bl	8002d38 <LL_DMA_EnableChannel>
	LL_USART_EnableDMAReq_RX(USART2);
 8003546:	4808      	ldr	r0, [pc, #32]	; (8003568 <DMA_RX_Init_fc+0xa8>)
 8003548:	f7ff fe90 	bl	800326c <LL_USART_EnableDMAReq_RX>

#if !POLLING
	LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_6);
 800354c:	2106      	movs	r1, #6
 800354e:	4805      	ldr	r0, [pc, #20]	; (8003564 <DMA_RX_Init_fc+0xa4>)
 8003550:	f7ff fdb6 	bl	80030c0 <LL_DMA_EnableIT_TC>
	LL_DMA_EnableIT_HT(DMA1, LL_DMA_CHANNEL_6);
 8003554:	2106      	movs	r1, #6
 8003556:	4803      	ldr	r0, [pc, #12]	; (8003564 <DMA_RX_Init_fc+0xa4>)
 8003558:	f7ff fdd2 	bl	8003100 <LL_DMA_EnableIT_HT>
#endif
}
 800355c:	bf00      	nop
 800355e:	46bd      	mov	sp, r7
 8003560:	bdb0      	pop	{r4, r5, r7, pc}
 8003562:	bf00      	nop
 8003564:	40020000 	.word	0x40020000
 8003568:	40004400 	.word	0x40004400
 800356c:	20000564 	.word	0x20000564

08003570 <USART2_CheckDmaReception>:

uint16_t DMA_buffer_size() {
	return old_pos;
}

void USART2_CheckDmaReception(void) {
 8003570:	b580      	push	{r7, lr}
 8003572:	b082      	sub	sp, #8
 8003574:	af00      	add	r7, sp, #0
	if (USART2_ProcessData == 0)
 8003576:	4b2d      	ldr	r3, [pc, #180]	; (800362c <USART2_CheckDmaReception+0xbc>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d052      	beq.n	8003624 <USART2_CheckDmaReception+0xb4>
		return;

	old_pos = 0;
 800357e:	4b2c      	ldr	r3, [pc, #176]	; (8003630 <USART2_CheckDmaReception+0xc0>)
 8003580:	2200      	movs	r2, #0
 8003582:	801a      	strh	r2, [r3, #0]

	uint16_t pos = DMA_USART2_BUFFER_SIZE
			- LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_6);
 8003584:	2106      	movs	r1, #6
 8003586:	482b      	ldr	r0, [pc, #172]	; (8003634 <USART2_CheckDmaReception+0xc4>)
 8003588:	f7ff fd30 	bl	8002fec <LL_DMA_GetDataLength>
 800358c:	4603      	mov	r3, r0
 800358e:	b29b      	uxth	r3, r3
	uint16_t pos = DMA_USART2_BUFFER_SIZE
 8003590:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8003594:	80fb      	strh	r3, [r7, #6]

	if (pos != old_pos) {
 8003596:	4b26      	ldr	r3, [pc, #152]	; (8003630 <USART2_CheckDmaReception+0xc0>)
 8003598:	881b      	ldrh	r3, [r3, #0]
 800359a:	88fa      	ldrh	r2, [r7, #6]
 800359c:	429a      	cmp	r2, r3
 800359e:	d02a      	beq.n	80035f6 <USART2_CheckDmaReception+0x86>
		if (pos > old_pos) {
 80035a0:	4b23      	ldr	r3, [pc, #140]	; (8003630 <USART2_CheckDmaReception+0xc0>)
 80035a2:	881b      	ldrh	r3, [r3, #0]
 80035a4:	88fa      	ldrh	r2, [r7, #6]
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d90e      	bls.n	80035c8 <USART2_CheckDmaReception+0x58>
			USART2_ProcessData(&bufferUSART2dma[old_pos], pos - old_pos);
 80035aa:	4b20      	ldr	r3, [pc, #128]	; (800362c <USART2_CheckDmaReception+0xbc>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a20      	ldr	r2, [pc, #128]	; (8003630 <USART2_CheckDmaReception+0xc0>)
 80035b0:	8812      	ldrh	r2, [r2, #0]
 80035b2:	4611      	mov	r1, r2
 80035b4:	4a20      	ldr	r2, [pc, #128]	; (8003638 <USART2_CheckDmaReception+0xc8>)
 80035b6:	1888      	adds	r0, r1, r2
 80035b8:	4a1d      	ldr	r2, [pc, #116]	; (8003630 <USART2_CheckDmaReception+0xc0>)
 80035ba:	8812      	ldrh	r2, [r2, #0]
 80035bc:	88f9      	ldrh	r1, [r7, #6]
 80035be:	1a8a      	subs	r2, r1, r2
 80035c0:	b292      	uxth	r2, r2
 80035c2:	4611      	mov	r1, r2
 80035c4:	4798      	blx	r3
 80035c6:	e016      	b.n	80035f6 <USART2_CheckDmaReception+0x86>
		} else {
			USART2_ProcessData(&bufferUSART2dma[old_pos],
 80035c8:	4b18      	ldr	r3, [pc, #96]	; (800362c <USART2_CheckDmaReception+0xbc>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a18      	ldr	r2, [pc, #96]	; (8003630 <USART2_CheckDmaReception+0xc0>)
 80035ce:	8812      	ldrh	r2, [r2, #0]
 80035d0:	4611      	mov	r1, r2
 80035d2:	4a19      	ldr	r2, [pc, #100]	; (8003638 <USART2_CheckDmaReception+0xc8>)
 80035d4:	1888      	adds	r0, r1, r2
 80035d6:	4a16      	ldr	r2, [pc, #88]	; (8003630 <USART2_CheckDmaReception+0xc0>)
 80035d8:	8812      	ldrh	r2, [r2, #0]
 80035da:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80035de:	b292      	uxth	r2, r2
 80035e0:	4611      	mov	r1, r2
 80035e2:	4798      	blx	r3
			DMA_USART2_BUFFER_SIZE - old_pos);

			if (pos > 0) {
 80035e4:	88fb      	ldrh	r3, [r7, #6]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d005      	beq.n	80035f6 <USART2_CheckDmaReception+0x86>
				USART2_ProcessData(&bufferUSART2dma[0], pos);
 80035ea:	4b10      	ldr	r3, [pc, #64]	; (800362c <USART2_CheckDmaReception+0xbc>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	88fa      	ldrh	r2, [r7, #6]
 80035f0:	4611      	mov	r1, r2
 80035f2:	4811      	ldr	r0, [pc, #68]	; (8003638 <USART2_CheckDmaReception+0xc8>)
 80035f4:	4798      	blx	r3
			}
		}
	}

	old_pos = pos;
 80035f6:	4a0e      	ldr	r2, [pc, #56]	; (8003630 <USART2_CheckDmaReception+0xc0>)
 80035f8:	88fb      	ldrh	r3, [r7, #6]
 80035fa:	8013      	strh	r3, [r2, #0]

//buff[] = bufferUSART2dma;
//USART2_PutBuffer(bufferUSART2dma, sizeof(bufferUSART2dma));

	if (old_pos >= 200) {
 80035fc:	4b0c      	ldr	r3, [pc, #48]	; (8003630 <USART2_CheckDmaReception+0xc0>)
 80035fe:	881b      	ldrh	r3, [r3, #0]
 8003600:	2bc7      	cmp	r3, #199	; 0xc7
 8003602:	d910      	bls.n	8003626 <USART2_CheckDmaReception+0xb6>
		old_pos = 0;
 8003604:	4b0a      	ldr	r3, [pc, #40]	; (8003630 <USART2_CheckDmaReception+0xc0>)
 8003606:	2200      	movs	r2, #0
 8003608:	801a      	strh	r2, [r3, #0]
		memset(bufferUSART2dma, '\0', DMA_USART2_BUFFER_SIZE);
 800360a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800360e:	2100      	movs	r1, #0
 8003610:	4809      	ldr	r0, [pc, #36]	; (8003638 <USART2_CheckDmaReception+0xc8>)
 8003612:	f000 f867 	bl	80036e4 <memset>
		LL_DMA_DeInit(DMA1, LL_DMA_CHANNEL_6);
 8003616:	2106      	movs	r1, #6
 8003618:	4806      	ldr	r0, [pc, #24]	; (8003634 <USART2_CheckDmaReception+0xc4>)
 800361a:	f7fd fb25 	bl	8000c68 <LL_DMA_DeInit>
		DMA_RX_Init_fc();
 800361e:	f7ff ff4f 	bl	80034c0 <DMA_RX_Init_fc>
 8003622:	e000      	b.n	8003626 <USART2_CheckDmaReception+0xb6>
		return;
 8003624:	bf00      	nop
	}
//uint8_t pom = strlen(bufferUSART2dma);

}
 8003626:	3708      	adds	r7, #8
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	20000524 	.word	0x20000524
 8003630:	20000520 	.word	0x20000520
 8003634:	40020000 	.word	0x40020000
 8003638:	20000564 	.word	0x20000564

0800363c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800363c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003674 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003640:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003642:	e003      	b.n	800364c <LoopCopyDataInit>

08003644 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003644:	4b0c      	ldr	r3, [pc, #48]	; (8003678 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003646:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003648:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800364a:	3104      	adds	r1, #4

0800364c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800364c:	480b      	ldr	r0, [pc, #44]	; (800367c <LoopForever+0xa>)
	ldr	r3, =_edata
 800364e:	4b0c      	ldr	r3, [pc, #48]	; (8003680 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003650:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003652:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003654:	d3f6      	bcc.n	8003644 <CopyDataInit>
	ldr	r2, =_sbss
 8003656:	4a0b      	ldr	r2, [pc, #44]	; (8003684 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003658:	e002      	b.n	8003660 <LoopFillZerobss>

0800365a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800365a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800365c:	f842 3b04 	str.w	r3, [r2], #4

08003660 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003660:	4b09      	ldr	r3, [pc, #36]	; (8003688 <LoopForever+0x16>)
	cmp	r2, r3
 8003662:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003664:	d3f9      	bcc.n	800365a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003666:	f7ff f995 	bl	8002994 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800366a:	f000 f817 	bl	800369c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800366e:	f7fe fe11 	bl	8002294 <main>

08003672 <LoopForever>:

LoopForever:
    b LoopForever
 8003672:	e7fe      	b.n	8003672 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003674:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8003678:	08006544 	.word	0x08006544
	ldr	r0, =_sdata
 800367c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003680:	200004f0 	.word	0x200004f0
	ldr	r2, =_sbss
 8003684:	200004f0 	.word	0x200004f0
	ldr	r3, = _ebss
 8003688:	20000674 	.word	0x20000674

0800368c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800368c:	e7fe      	b.n	800368c <ADC1_2_IRQHandler>
	...

08003690 <__errno>:
 8003690:	4b01      	ldr	r3, [pc, #4]	; (8003698 <__errno+0x8>)
 8003692:	6818      	ldr	r0, [r3, #0]
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	20000320 	.word	0x20000320

0800369c <__libc_init_array>:
 800369c:	b570      	push	{r4, r5, r6, lr}
 800369e:	4d0d      	ldr	r5, [pc, #52]	; (80036d4 <__libc_init_array+0x38>)
 80036a0:	4c0d      	ldr	r4, [pc, #52]	; (80036d8 <__libc_init_array+0x3c>)
 80036a2:	1b64      	subs	r4, r4, r5
 80036a4:	10a4      	asrs	r4, r4, #2
 80036a6:	2600      	movs	r6, #0
 80036a8:	42a6      	cmp	r6, r4
 80036aa:	d109      	bne.n	80036c0 <__libc_init_array+0x24>
 80036ac:	4d0b      	ldr	r5, [pc, #44]	; (80036dc <__libc_init_array+0x40>)
 80036ae:	4c0c      	ldr	r4, [pc, #48]	; (80036e0 <__libc_init_array+0x44>)
 80036b0:	f002 fd1c 	bl	80060ec <_init>
 80036b4:	1b64      	subs	r4, r4, r5
 80036b6:	10a4      	asrs	r4, r4, #2
 80036b8:	2600      	movs	r6, #0
 80036ba:	42a6      	cmp	r6, r4
 80036bc:	d105      	bne.n	80036ca <__libc_init_array+0x2e>
 80036be:	bd70      	pop	{r4, r5, r6, pc}
 80036c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80036c4:	4798      	blx	r3
 80036c6:	3601      	adds	r6, #1
 80036c8:	e7ee      	b.n	80036a8 <__libc_init_array+0xc>
 80036ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80036ce:	4798      	blx	r3
 80036d0:	3601      	adds	r6, #1
 80036d2:	e7f2      	b.n	80036ba <__libc_init_array+0x1e>
 80036d4:	0800653c 	.word	0x0800653c
 80036d8:	0800653c 	.word	0x0800653c
 80036dc:	0800653c 	.word	0x0800653c
 80036e0:	08006540 	.word	0x08006540

080036e4 <memset>:
 80036e4:	4402      	add	r2, r0
 80036e6:	4603      	mov	r3, r0
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d100      	bne.n	80036ee <memset+0xa>
 80036ec:	4770      	bx	lr
 80036ee:	f803 1b01 	strb.w	r1, [r3], #1
 80036f2:	e7f9      	b.n	80036e8 <memset+0x4>

080036f4 <__cvt>:
 80036f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80036f8:	ec55 4b10 	vmov	r4, r5, d0
 80036fc:	2d00      	cmp	r5, #0
 80036fe:	460e      	mov	r6, r1
 8003700:	4619      	mov	r1, r3
 8003702:	462b      	mov	r3, r5
 8003704:	bfbb      	ittet	lt
 8003706:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800370a:	461d      	movlt	r5, r3
 800370c:	2300      	movge	r3, #0
 800370e:	232d      	movlt	r3, #45	; 0x2d
 8003710:	700b      	strb	r3, [r1, #0]
 8003712:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003714:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003718:	4691      	mov	r9, r2
 800371a:	f023 0820 	bic.w	r8, r3, #32
 800371e:	bfbc      	itt	lt
 8003720:	4622      	movlt	r2, r4
 8003722:	4614      	movlt	r4, r2
 8003724:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003728:	d005      	beq.n	8003736 <__cvt+0x42>
 800372a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800372e:	d100      	bne.n	8003732 <__cvt+0x3e>
 8003730:	3601      	adds	r6, #1
 8003732:	2102      	movs	r1, #2
 8003734:	e000      	b.n	8003738 <__cvt+0x44>
 8003736:	2103      	movs	r1, #3
 8003738:	ab03      	add	r3, sp, #12
 800373a:	9301      	str	r3, [sp, #4]
 800373c:	ab02      	add	r3, sp, #8
 800373e:	9300      	str	r3, [sp, #0]
 8003740:	ec45 4b10 	vmov	d0, r4, r5
 8003744:	4653      	mov	r3, sl
 8003746:	4632      	mov	r2, r6
 8003748:	f000 fcf6 	bl	8004138 <_dtoa_r>
 800374c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003750:	4607      	mov	r7, r0
 8003752:	d102      	bne.n	800375a <__cvt+0x66>
 8003754:	f019 0f01 	tst.w	r9, #1
 8003758:	d022      	beq.n	80037a0 <__cvt+0xac>
 800375a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800375e:	eb07 0906 	add.w	r9, r7, r6
 8003762:	d110      	bne.n	8003786 <__cvt+0x92>
 8003764:	783b      	ldrb	r3, [r7, #0]
 8003766:	2b30      	cmp	r3, #48	; 0x30
 8003768:	d10a      	bne.n	8003780 <__cvt+0x8c>
 800376a:	2200      	movs	r2, #0
 800376c:	2300      	movs	r3, #0
 800376e:	4620      	mov	r0, r4
 8003770:	4629      	mov	r1, r5
 8003772:	f7fd f9a9 	bl	8000ac8 <__aeabi_dcmpeq>
 8003776:	b918      	cbnz	r0, 8003780 <__cvt+0x8c>
 8003778:	f1c6 0601 	rsb	r6, r6, #1
 800377c:	f8ca 6000 	str.w	r6, [sl]
 8003780:	f8da 3000 	ldr.w	r3, [sl]
 8003784:	4499      	add	r9, r3
 8003786:	2200      	movs	r2, #0
 8003788:	2300      	movs	r3, #0
 800378a:	4620      	mov	r0, r4
 800378c:	4629      	mov	r1, r5
 800378e:	f7fd f99b 	bl	8000ac8 <__aeabi_dcmpeq>
 8003792:	b108      	cbz	r0, 8003798 <__cvt+0xa4>
 8003794:	f8cd 900c 	str.w	r9, [sp, #12]
 8003798:	2230      	movs	r2, #48	; 0x30
 800379a:	9b03      	ldr	r3, [sp, #12]
 800379c:	454b      	cmp	r3, r9
 800379e:	d307      	bcc.n	80037b0 <__cvt+0xbc>
 80037a0:	9b03      	ldr	r3, [sp, #12]
 80037a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80037a4:	1bdb      	subs	r3, r3, r7
 80037a6:	4638      	mov	r0, r7
 80037a8:	6013      	str	r3, [r2, #0]
 80037aa:	b004      	add	sp, #16
 80037ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037b0:	1c59      	adds	r1, r3, #1
 80037b2:	9103      	str	r1, [sp, #12]
 80037b4:	701a      	strb	r2, [r3, #0]
 80037b6:	e7f0      	b.n	800379a <__cvt+0xa6>

080037b8 <__exponent>:
 80037b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80037ba:	4603      	mov	r3, r0
 80037bc:	2900      	cmp	r1, #0
 80037be:	bfb8      	it	lt
 80037c0:	4249      	neglt	r1, r1
 80037c2:	f803 2b02 	strb.w	r2, [r3], #2
 80037c6:	bfb4      	ite	lt
 80037c8:	222d      	movlt	r2, #45	; 0x2d
 80037ca:	222b      	movge	r2, #43	; 0x2b
 80037cc:	2909      	cmp	r1, #9
 80037ce:	7042      	strb	r2, [r0, #1]
 80037d0:	dd2a      	ble.n	8003828 <__exponent+0x70>
 80037d2:	f10d 0407 	add.w	r4, sp, #7
 80037d6:	46a4      	mov	ip, r4
 80037d8:	270a      	movs	r7, #10
 80037da:	46a6      	mov	lr, r4
 80037dc:	460a      	mov	r2, r1
 80037de:	fb91 f6f7 	sdiv	r6, r1, r7
 80037e2:	fb07 1516 	mls	r5, r7, r6, r1
 80037e6:	3530      	adds	r5, #48	; 0x30
 80037e8:	2a63      	cmp	r2, #99	; 0x63
 80037ea:	f104 34ff 	add.w	r4, r4, #4294967295
 80037ee:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80037f2:	4631      	mov	r1, r6
 80037f4:	dcf1      	bgt.n	80037da <__exponent+0x22>
 80037f6:	3130      	adds	r1, #48	; 0x30
 80037f8:	f1ae 0502 	sub.w	r5, lr, #2
 80037fc:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003800:	1c44      	adds	r4, r0, #1
 8003802:	4629      	mov	r1, r5
 8003804:	4561      	cmp	r1, ip
 8003806:	d30a      	bcc.n	800381e <__exponent+0x66>
 8003808:	f10d 0209 	add.w	r2, sp, #9
 800380c:	eba2 020e 	sub.w	r2, r2, lr
 8003810:	4565      	cmp	r5, ip
 8003812:	bf88      	it	hi
 8003814:	2200      	movhi	r2, #0
 8003816:	4413      	add	r3, r2
 8003818:	1a18      	subs	r0, r3, r0
 800381a:	b003      	add	sp, #12
 800381c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800381e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003822:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003826:	e7ed      	b.n	8003804 <__exponent+0x4c>
 8003828:	2330      	movs	r3, #48	; 0x30
 800382a:	3130      	adds	r1, #48	; 0x30
 800382c:	7083      	strb	r3, [r0, #2]
 800382e:	70c1      	strb	r1, [r0, #3]
 8003830:	1d03      	adds	r3, r0, #4
 8003832:	e7f1      	b.n	8003818 <__exponent+0x60>

08003834 <_printf_float>:
 8003834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003838:	ed2d 8b02 	vpush	{d8}
 800383c:	b08d      	sub	sp, #52	; 0x34
 800383e:	460c      	mov	r4, r1
 8003840:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003844:	4616      	mov	r6, r2
 8003846:	461f      	mov	r7, r3
 8003848:	4605      	mov	r5, r0
 800384a:	f001 fa61 	bl	8004d10 <_localeconv_r>
 800384e:	f8d0 a000 	ldr.w	sl, [r0]
 8003852:	4650      	mov	r0, sl
 8003854:	f7fc fcbc 	bl	80001d0 <strlen>
 8003858:	2300      	movs	r3, #0
 800385a:	930a      	str	r3, [sp, #40]	; 0x28
 800385c:	6823      	ldr	r3, [r4, #0]
 800385e:	9305      	str	r3, [sp, #20]
 8003860:	f8d8 3000 	ldr.w	r3, [r8]
 8003864:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003868:	3307      	adds	r3, #7
 800386a:	f023 0307 	bic.w	r3, r3, #7
 800386e:	f103 0208 	add.w	r2, r3, #8
 8003872:	f8c8 2000 	str.w	r2, [r8]
 8003876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800387a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800387e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003882:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003886:	9307      	str	r3, [sp, #28]
 8003888:	f8cd 8018 	str.w	r8, [sp, #24]
 800388c:	ee08 0a10 	vmov	s16, r0
 8003890:	4b9f      	ldr	r3, [pc, #636]	; (8003b10 <_printf_float+0x2dc>)
 8003892:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003896:	f04f 32ff 	mov.w	r2, #4294967295
 800389a:	f7fd f947 	bl	8000b2c <__aeabi_dcmpun>
 800389e:	bb88      	cbnz	r0, 8003904 <_printf_float+0xd0>
 80038a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80038a4:	4b9a      	ldr	r3, [pc, #616]	; (8003b10 <_printf_float+0x2dc>)
 80038a6:	f04f 32ff 	mov.w	r2, #4294967295
 80038aa:	f7fd f921 	bl	8000af0 <__aeabi_dcmple>
 80038ae:	bb48      	cbnz	r0, 8003904 <_printf_float+0xd0>
 80038b0:	2200      	movs	r2, #0
 80038b2:	2300      	movs	r3, #0
 80038b4:	4640      	mov	r0, r8
 80038b6:	4649      	mov	r1, r9
 80038b8:	f7fd f910 	bl	8000adc <__aeabi_dcmplt>
 80038bc:	b110      	cbz	r0, 80038c4 <_printf_float+0x90>
 80038be:	232d      	movs	r3, #45	; 0x2d
 80038c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80038c4:	4b93      	ldr	r3, [pc, #588]	; (8003b14 <_printf_float+0x2e0>)
 80038c6:	4894      	ldr	r0, [pc, #592]	; (8003b18 <_printf_float+0x2e4>)
 80038c8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80038cc:	bf94      	ite	ls
 80038ce:	4698      	movls	r8, r3
 80038d0:	4680      	movhi	r8, r0
 80038d2:	2303      	movs	r3, #3
 80038d4:	6123      	str	r3, [r4, #16]
 80038d6:	9b05      	ldr	r3, [sp, #20]
 80038d8:	f023 0204 	bic.w	r2, r3, #4
 80038dc:	6022      	str	r2, [r4, #0]
 80038de:	f04f 0900 	mov.w	r9, #0
 80038e2:	9700      	str	r7, [sp, #0]
 80038e4:	4633      	mov	r3, r6
 80038e6:	aa0b      	add	r2, sp, #44	; 0x2c
 80038e8:	4621      	mov	r1, r4
 80038ea:	4628      	mov	r0, r5
 80038ec:	f000 f9d8 	bl	8003ca0 <_printf_common>
 80038f0:	3001      	adds	r0, #1
 80038f2:	f040 8090 	bne.w	8003a16 <_printf_float+0x1e2>
 80038f6:	f04f 30ff 	mov.w	r0, #4294967295
 80038fa:	b00d      	add	sp, #52	; 0x34
 80038fc:	ecbd 8b02 	vpop	{d8}
 8003900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003904:	4642      	mov	r2, r8
 8003906:	464b      	mov	r3, r9
 8003908:	4640      	mov	r0, r8
 800390a:	4649      	mov	r1, r9
 800390c:	f7fd f90e 	bl	8000b2c <__aeabi_dcmpun>
 8003910:	b140      	cbz	r0, 8003924 <_printf_float+0xf0>
 8003912:	464b      	mov	r3, r9
 8003914:	2b00      	cmp	r3, #0
 8003916:	bfbc      	itt	lt
 8003918:	232d      	movlt	r3, #45	; 0x2d
 800391a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800391e:	487f      	ldr	r0, [pc, #508]	; (8003b1c <_printf_float+0x2e8>)
 8003920:	4b7f      	ldr	r3, [pc, #508]	; (8003b20 <_printf_float+0x2ec>)
 8003922:	e7d1      	b.n	80038c8 <_printf_float+0x94>
 8003924:	6863      	ldr	r3, [r4, #4]
 8003926:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800392a:	9206      	str	r2, [sp, #24]
 800392c:	1c5a      	adds	r2, r3, #1
 800392e:	d13f      	bne.n	80039b0 <_printf_float+0x17c>
 8003930:	2306      	movs	r3, #6
 8003932:	6063      	str	r3, [r4, #4]
 8003934:	9b05      	ldr	r3, [sp, #20]
 8003936:	6861      	ldr	r1, [r4, #4]
 8003938:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800393c:	2300      	movs	r3, #0
 800393e:	9303      	str	r3, [sp, #12]
 8003940:	ab0a      	add	r3, sp, #40	; 0x28
 8003942:	e9cd b301 	strd	fp, r3, [sp, #4]
 8003946:	ab09      	add	r3, sp, #36	; 0x24
 8003948:	ec49 8b10 	vmov	d0, r8, r9
 800394c:	9300      	str	r3, [sp, #0]
 800394e:	6022      	str	r2, [r4, #0]
 8003950:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003954:	4628      	mov	r0, r5
 8003956:	f7ff fecd 	bl	80036f4 <__cvt>
 800395a:	9b06      	ldr	r3, [sp, #24]
 800395c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800395e:	2b47      	cmp	r3, #71	; 0x47
 8003960:	4680      	mov	r8, r0
 8003962:	d108      	bne.n	8003976 <_printf_float+0x142>
 8003964:	1cc8      	adds	r0, r1, #3
 8003966:	db02      	blt.n	800396e <_printf_float+0x13a>
 8003968:	6863      	ldr	r3, [r4, #4]
 800396a:	4299      	cmp	r1, r3
 800396c:	dd41      	ble.n	80039f2 <_printf_float+0x1be>
 800396e:	f1ab 0b02 	sub.w	fp, fp, #2
 8003972:	fa5f fb8b 	uxtb.w	fp, fp
 8003976:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800397a:	d820      	bhi.n	80039be <_printf_float+0x18a>
 800397c:	3901      	subs	r1, #1
 800397e:	465a      	mov	r2, fp
 8003980:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003984:	9109      	str	r1, [sp, #36]	; 0x24
 8003986:	f7ff ff17 	bl	80037b8 <__exponent>
 800398a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800398c:	1813      	adds	r3, r2, r0
 800398e:	2a01      	cmp	r2, #1
 8003990:	4681      	mov	r9, r0
 8003992:	6123      	str	r3, [r4, #16]
 8003994:	dc02      	bgt.n	800399c <_printf_float+0x168>
 8003996:	6822      	ldr	r2, [r4, #0]
 8003998:	07d2      	lsls	r2, r2, #31
 800399a:	d501      	bpl.n	80039a0 <_printf_float+0x16c>
 800399c:	3301      	adds	r3, #1
 800399e:	6123      	str	r3, [r4, #16]
 80039a0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d09c      	beq.n	80038e2 <_printf_float+0xae>
 80039a8:	232d      	movs	r3, #45	; 0x2d
 80039aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039ae:	e798      	b.n	80038e2 <_printf_float+0xae>
 80039b0:	9a06      	ldr	r2, [sp, #24]
 80039b2:	2a47      	cmp	r2, #71	; 0x47
 80039b4:	d1be      	bne.n	8003934 <_printf_float+0x100>
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d1bc      	bne.n	8003934 <_printf_float+0x100>
 80039ba:	2301      	movs	r3, #1
 80039bc:	e7b9      	b.n	8003932 <_printf_float+0xfe>
 80039be:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80039c2:	d118      	bne.n	80039f6 <_printf_float+0x1c2>
 80039c4:	2900      	cmp	r1, #0
 80039c6:	6863      	ldr	r3, [r4, #4]
 80039c8:	dd0b      	ble.n	80039e2 <_printf_float+0x1ae>
 80039ca:	6121      	str	r1, [r4, #16]
 80039cc:	b913      	cbnz	r3, 80039d4 <_printf_float+0x1a0>
 80039ce:	6822      	ldr	r2, [r4, #0]
 80039d0:	07d0      	lsls	r0, r2, #31
 80039d2:	d502      	bpl.n	80039da <_printf_float+0x1a6>
 80039d4:	3301      	adds	r3, #1
 80039d6:	440b      	add	r3, r1
 80039d8:	6123      	str	r3, [r4, #16]
 80039da:	65a1      	str	r1, [r4, #88]	; 0x58
 80039dc:	f04f 0900 	mov.w	r9, #0
 80039e0:	e7de      	b.n	80039a0 <_printf_float+0x16c>
 80039e2:	b913      	cbnz	r3, 80039ea <_printf_float+0x1b6>
 80039e4:	6822      	ldr	r2, [r4, #0]
 80039e6:	07d2      	lsls	r2, r2, #31
 80039e8:	d501      	bpl.n	80039ee <_printf_float+0x1ba>
 80039ea:	3302      	adds	r3, #2
 80039ec:	e7f4      	b.n	80039d8 <_printf_float+0x1a4>
 80039ee:	2301      	movs	r3, #1
 80039f0:	e7f2      	b.n	80039d8 <_printf_float+0x1a4>
 80039f2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80039f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80039f8:	4299      	cmp	r1, r3
 80039fa:	db05      	blt.n	8003a08 <_printf_float+0x1d4>
 80039fc:	6823      	ldr	r3, [r4, #0]
 80039fe:	6121      	str	r1, [r4, #16]
 8003a00:	07d8      	lsls	r0, r3, #31
 8003a02:	d5ea      	bpl.n	80039da <_printf_float+0x1a6>
 8003a04:	1c4b      	adds	r3, r1, #1
 8003a06:	e7e7      	b.n	80039d8 <_printf_float+0x1a4>
 8003a08:	2900      	cmp	r1, #0
 8003a0a:	bfd4      	ite	le
 8003a0c:	f1c1 0202 	rsble	r2, r1, #2
 8003a10:	2201      	movgt	r2, #1
 8003a12:	4413      	add	r3, r2
 8003a14:	e7e0      	b.n	80039d8 <_printf_float+0x1a4>
 8003a16:	6823      	ldr	r3, [r4, #0]
 8003a18:	055a      	lsls	r2, r3, #21
 8003a1a:	d407      	bmi.n	8003a2c <_printf_float+0x1f8>
 8003a1c:	6923      	ldr	r3, [r4, #16]
 8003a1e:	4642      	mov	r2, r8
 8003a20:	4631      	mov	r1, r6
 8003a22:	4628      	mov	r0, r5
 8003a24:	47b8      	blx	r7
 8003a26:	3001      	adds	r0, #1
 8003a28:	d12c      	bne.n	8003a84 <_printf_float+0x250>
 8003a2a:	e764      	b.n	80038f6 <_printf_float+0xc2>
 8003a2c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003a30:	f240 80e0 	bls.w	8003bf4 <_printf_float+0x3c0>
 8003a34:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003a38:	2200      	movs	r2, #0
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	f7fd f844 	bl	8000ac8 <__aeabi_dcmpeq>
 8003a40:	2800      	cmp	r0, #0
 8003a42:	d034      	beq.n	8003aae <_printf_float+0x27a>
 8003a44:	4a37      	ldr	r2, [pc, #220]	; (8003b24 <_printf_float+0x2f0>)
 8003a46:	2301      	movs	r3, #1
 8003a48:	4631      	mov	r1, r6
 8003a4a:	4628      	mov	r0, r5
 8003a4c:	47b8      	blx	r7
 8003a4e:	3001      	adds	r0, #1
 8003a50:	f43f af51 	beq.w	80038f6 <_printf_float+0xc2>
 8003a54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	db02      	blt.n	8003a62 <_printf_float+0x22e>
 8003a5c:	6823      	ldr	r3, [r4, #0]
 8003a5e:	07d8      	lsls	r0, r3, #31
 8003a60:	d510      	bpl.n	8003a84 <_printf_float+0x250>
 8003a62:	ee18 3a10 	vmov	r3, s16
 8003a66:	4652      	mov	r2, sl
 8003a68:	4631      	mov	r1, r6
 8003a6a:	4628      	mov	r0, r5
 8003a6c:	47b8      	blx	r7
 8003a6e:	3001      	adds	r0, #1
 8003a70:	f43f af41 	beq.w	80038f6 <_printf_float+0xc2>
 8003a74:	f04f 0800 	mov.w	r8, #0
 8003a78:	f104 091a 	add.w	r9, r4, #26
 8003a7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	4543      	cmp	r3, r8
 8003a82:	dc09      	bgt.n	8003a98 <_printf_float+0x264>
 8003a84:	6823      	ldr	r3, [r4, #0]
 8003a86:	079b      	lsls	r3, r3, #30
 8003a88:	f100 8105 	bmi.w	8003c96 <_printf_float+0x462>
 8003a8c:	68e0      	ldr	r0, [r4, #12]
 8003a8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003a90:	4298      	cmp	r0, r3
 8003a92:	bfb8      	it	lt
 8003a94:	4618      	movlt	r0, r3
 8003a96:	e730      	b.n	80038fa <_printf_float+0xc6>
 8003a98:	2301      	movs	r3, #1
 8003a9a:	464a      	mov	r2, r9
 8003a9c:	4631      	mov	r1, r6
 8003a9e:	4628      	mov	r0, r5
 8003aa0:	47b8      	blx	r7
 8003aa2:	3001      	adds	r0, #1
 8003aa4:	f43f af27 	beq.w	80038f6 <_printf_float+0xc2>
 8003aa8:	f108 0801 	add.w	r8, r8, #1
 8003aac:	e7e6      	b.n	8003a7c <_printf_float+0x248>
 8003aae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	dc39      	bgt.n	8003b28 <_printf_float+0x2f4>
 8003ab4:	4a1b      	ldr	r2, [pc, #108]	; (8003b24 <_printf_float+0x2f0>)
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	4631      	mov	r1, r6
 8003aba:	4628      	mov	r0, r5
 8003abc:	47b8      	blx	r7
 8003abe:	3001      	adds	r0, #1
 8003ac0:	f43f af19 	beq.w	80038f6 <_printf_float+0xc2>
 8003ac4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	d102      	bne.n	8003ad2 <_printf_float+0x29e>
 8003acc:	6823      	ldr	r3, [r4, #0]
 8003ace:	07d9      	lsls	r1, r3, #31
 8003ad0:	d5d8      	bpl.n	8003a84 <_printf_float+0x250>
 8003ad2:	ee18 3a10 	vmov	r3, s16
 8003ad6:	4652      	mov	r2, sl
 8003ad8:	4631      	mov	r1, r6
 8003ada:	4628      	mov	r0, r5
 8003adc:	47b8      	blx	r7
 8003ade:	3001      	adds	r0, #1
 8003ae0:	f43f af09 	beq.w	80038f6 <_printf_float+0xc2>
 8003ae4:	f04f 0900 	mov.w	r9, #0
 8003ae8:	f104 0a1a 	add.w	sl, r4, #26
 8003aec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003aee:	425b      	negs	r3, r3
 8003af0:	454b      	cmp	r3, r9
 8003af2:	dc01      	bgt.n	8003af8 <_printf_float+0x2c4>
 8003af4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003af6:	e792      	b.n	8003a1e <_printf_float+0x1ea>
 8003af8:	2301      	movs	r3, #1
 8003afa:	4652      	mov	r2, sl
 8003afc:	4631      	mov	r1, r6
 8003afe:	4628      	mov	r0, r5
 8003b00:	47b8      	blx	r7
 8003b02:	3001      	adds	r0, #1
 8003b04:	f43f aef7 	beq.w	80038f6 <_printf_float+0xc2>
 8003b08:	f109 0901 	add.w	r9, r9, #1
 8003b0c:	e7ee      	b.n	8003aec <_printf_float+0x2b8>
 8003b0e:	bf00      	nop
 8003b10:	7fefffff 	.word	0x7fefffff
 8003b14:	08006160 	.word	0x08006160
 8003b18:	08006164 	.word	0x08006164
 8003b1c:	0800616c 	.word	0x0800616c
 8003b20:	08006168 	.word	0x08006168
 8003b24:	08006170 	.word	0x08006170
 8003b28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003b2a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	bfa8      	it	ge
 8003b30:	461a      	movge	r2, r3
 8003b32:	2a00      	cmp	r2, #0
 8003b34:	4691      	mov	r9, r2
 8003b36:	dc37      	bgt.n	8003ba8 <_printf_float+0x374>
 8003b38:	f04f 0b00 	mov.w	fp, #0
 8003b3c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003b40:	f104 021a 	add.w	r2, r4, #26
 8003b44:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003b46:	9305      	str	r3, [sp, #20]
 8003b48:	eba3 0309 	sub.w	r3, r3, r9
 8003b4c:	455b      	cmp	r3, fp
 8003b4e:	dc33      	bgt.n	8003bb8 <_printf_float+0x384>
 8003b50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003b54:	429a      	cmp	r2, r3
 8003b56:	db3b      	blt.n	8003bd0 <_printf_float+0x39c>
 8003b58:	6823      	ldr	r3, [r4, #0]
 8003b5a:	07da      	lsls	r2, r3, #31
 8003b5c:	d438      	bmi.n	8003bd0 <_printf_float+0x39c>
 8003b5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003b60:	9b05      	ldr	r3, [sp, #20]
 8003b62:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	eba2 0901 	sub.w	r9, r2, r1
 8003b6a:	4599      	cmp	r9, r3
 8003b6c:	bfa8      	it	ge
 8003b6e:	4699      	movge	r9, r3
 8003b70:	f1b9 0f00 	cmp.w	r9, #0
 8003b74:	dc35      	bgt.n	8003be2 <_printf_float+0x3ae>
 8003b76:	f04f 0800 	mov.w	r8, #0
 8003b7a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003b7e:	f104 0a1a 	add.w	sl, r4, #26
 8003b82:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003b86:	1a9b      	subs	r3, r3, r2
 8003b88:	eba3 0309 	sub.w	r3, r3, r9
 8003b8c:	4543      	cmp	r3, r8
 8003b8e:	f77f af79 	ble.w	8003a84 <_printf_float+0x250>
 8003b92:	2301      	movs	r3, #1
 8003b94:	4652      	mov	r2, sl
 8003b96:	4631      	mov	r1, r6
 8003b98:	4628      	mov	r0, r5
 8003b9a:	47b8      	blx	r7
 8003b9c:	3001      	adds	r0, #1
 8003b9e:	f43f aeaa 	beq.w	80038f6 <_printf_float+0xc2>
 8003ba2:	f108 0801 	add.w	r8, r8, #1
 8003ba6:	e7ec      	b.n	8003b82 <_printf_float+0x34e>
 8003ba8:	4613      	mov	r3, r2
 8003baa:	4631      	mov	r1, r6
 8003bac:	4642      	mov	r2, r8
 8003bae:	4628      	mov	r0, r5
 8003bb0:	47b8      	blx	r7
 8003bb2:	3001      	adds	r0, #1
 8003bb4:	d1c0      	bne.n	8003b38 <_printf_float+0x304>
 8003bb6:	e69e      	b.n	80038f6 <_printf_float+0xc2>
 8003bb8:	2301      	movs	r3, #1
 8003bba:	4631      	mov	r1, r6
 8003bbc:	4628      	mov	r0, r5
 8003bbe:	9205      	str	r2, [sp, #20]
 8003bc0:	47b8      	blx	r7
 8003bc2:	3001      	adds	r0, #1
 8003bc4:	f43f ae97 	beq.w	80038f6 <_printf_float+0xc2>
 8003bc8:	9a05      	ldr	r2, [sp, #20]
 8003bca:	f10b 0b01 	add.w	fp, fp, #1
 8003bce:	e7b9      	b.n	8003b44 <_printf_float+0x310>
 8003bd0:	ee18 3a10 	vmov	r3, s16
 8003bd4:	4652      	mov	r2, sl
 8003bd6:	4631      	mov	r1, r6
 8003bd8:	4628      	mov	r0, r5
 8003bda:	47b8      	blx	r7
 8003bdc:	3001      	adds	r0, #1
 8003bde:	d1be      	bne.n	8003b5e <_printf_float+0x32a>
 8003be0:	e689      	b.n	80038f6 <_printf_float+0xc2>
 8003be2:	9a05      	ldr	r2, [sp, #20]
 8003be4:	464b      	mov	r3, r9
 8003be6:	4442      	add	r2, r8
 8003be8:	4631      	mov	r1, r6
 8003bea:	4628      	mov	r0, r5
 8003bec:	47b8      	blx	r7
 8003bee:	3001      	adds	r0, #1
 8003bf0:	d1c1      	bne.n	8003b76 <_printf_float+0x342>
 8003bf2:	e680      	b.n	80038f6 <_printf_float+0xc2>
 8003bf4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003bf6:	2a01      	cmp	r2, #1
 8003bf8:	dc01      	bgt.n	8003bfe <_printf_float+0x3ca>
 8003bfa:	07db      	lsls	r3, r3, #31
 8003bfc:	d538      	bpl.n	8003c70 <_printf_float+0x43c>
 8003bfe:	2301      	movs	r3, #1
 8003c00:	4642      	mov	r2, r8
 8003c02:	4631      	mov	r1, r6
 8003c04:	4628      	mov	r0, r5
 8003c06:	47b8      	blx	r7
 8003c08:	3001      	adds	r0, #1
 8003c0a:	f43f ae74 	beq.w	80038f6 <_printf_float+0xc2>
 8003c0e:	ee18 3a10 	vmov	r3, s16
 8003c12:	4652      	mov	r2, sl
 8003c14:	4631      	mov	r1, r6
 8003c16:	4628      	mov	r0, r5
 8003c18:	47b8      	blx	r7
 8003c1a:	3001      	adds	r0, #1
 8003c1c:	f43f ae6b 	beq.w	80038f6 <_printf_float+0xc2>
 8003c20:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003c24:	2200      	movs	r2, #0
 8003c26:	2300      	movs	r3, #0
 8003c28:	f7fc ff4e 	bl	8000ac8 <__aeabi_dcmpeq>
 8003c2c:	b9d8      	cbnz	r0, 8003c66 <_printf_float+0x432>
 8003c2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003c30:	f108 0201 	add.w	r2, r8, #1
 8003c34:	3b01      	subs	r3, #1
 8003c36:	4631      	mov	r1, r6
 8003c38:	4628      	mov	r0, r5
 8003c3a:	47b8      	blx	r7
 8003c3c:	3001      	adds	r0, #1
 8003c3e:	d10e      	bne.n	8003c5e <_printf_float+0x42a>
 8003c40:	e659      	b.n	80038f6 <_printf_float+0xc2>
 8003c42:	2301      	movs	r3, #1
 8003c44:	4652      	mov	r2, sl
 8003c46:	4631      	mov	r1, r6
 8003c48:	4628      	mov	r0, r5
 8003c4a:	47b8      	blx	r7
 8003c4c:	3001      	adds	r0, #1
 8003c4e:	f43f ae52 	beq.w	80038f6 <_printf_float+0xc2>
 8003c52:	f108 0801 	add.w	r8, r8, #1
 8003c56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003c58:	3b01      	subs	r3, #1
 8003c5a:	4543      	cmp	r3, r8
 8003c5c:	dcf1      	bgt.n	8003c42 <_printf_float+0x40e>
 8003c5e:	464b      	mov	r3, r9
 8003c60:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003c64:	e6dc      	b.n	8003a20 <_printf_float+0x1ec>
 8003c66:	f04f 0800 	mov.w	r8, #0
 8003c6a:	f104 0a1a 	add.w	sl, r4, #26
 8003c6e:	e7f2      	b.n	8003c56 <_printf_float+0x422>
 8003c70:	2301      	movs	r3, #1
 8003c72:	4642      	mov	r2, r8
 8003c74:	e7df      	b.n	8003c36 <_printf_float+0x402>
 8003c76:	2301      	movs	r3, #1
 8003c78:	464a      	mov	r2, r9
 8003c7a:	4631      	mov	r1, r6
 8003c7c:	4628      	mov	r0, r5
 8003c7e:	47b8      	blx	r7
 8003c80:	3001      	adds	r0, #1
 8003c82:	f43f ae38 	beq.w	80038f6 <_printf_float+0xc2>
 8003c86:	f108 0801 	add.w	r8, r8, #1
 8003c8a:	68e3      	ldr	r3, [r4, #12]
 8003c8c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003c8e:	1a5b      	subs	r3, r3, r1
 8003c90:	4543      	cmp	r3, r8
 8003c92:	dcf0      	bgt.n	8003c76 <_printf_float+0x442>
 8003c94:	e6fa      	b.n	8003a8c <_printf_float+0x258>
 8003c96:	f04f 0800 	mov.w	r8, #0
 8003c9a:	f104 0919 	add.w	r9, r4, #25
 8003c9e:	e7f4      	b.n	8003c8a <_printf_float+0x456>

08003ca0 <_printf_common>:
 8003ca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ca4:	4616      	mov	r6, r2
 8003ca6:	4699      	mov	r9, r3
 8003ca8:	688a      	ldr	r2, [r1, #8]
 8003caa:	690b      	ldr	r3, [r1, #16]
 8003cac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	bfb8      	it	lt
 8003cb4:	4613      	movlt	r3, r2
 8003cb6:	6033      	str	r3, [r6, #0]
 8003cb8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003cbc:	4607      	mov	r7, r0
 8003cbe:	460c      	mov	r4, r1
 8003cc0:	b10a      	cbz	r2, 8003cc6 <_printf_common+0x26>
 8003cc2:	3301      	adds	r3, #1
 8003cc4:	6033      	str	r3, [r6, #0]
 8003cc6:	6823      	ldr	r3, [r4, #0]
 8003cc8:	0699      	lsls	r1, r3, #26
 8003cca:	bf42      	ittt	mi
 8003ccc:	6833      	ldrmi	r3, [r6, #0]
 8003cce:	3302      	addmi	r3, #2
 8003cd0:	6033      	strmi	r3, [r6, #0]
 8003cd2:	6825      	ldr	r5, [r4, #0]
 8003cd4:	f015 0506 	ands.w	r5, r5, #6
 8003cd8:	d106      	bne.n	8003ce8 <_printf_common+0x48>
 8003cda:	f104 0a19 	add.w	sl, r4, #25
 8003cde:	68e3      	ldr	r3, [r4, #12]
 8003ce0:	6832      	ldr	r2, [r6, #0]
 8003ce2:	1a9b      	subs	r3, r3, r2
 8003ce4:	42ab      	cmp	r3, r5
 8003ce6:	dc26      	bgt.n	8003d36 <_printf_common+0x96>
 8003ce8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003cec:	1e13      	subs	r3, r2, #0
 8003cee:	6822      	ldr	r2, [r4, #0]
 8003cf0:	bf18      	it	ne
 8003cf2:	2301      	movne	r3, #1
 8003cf4:	0692      	lsls	r2, r2, #26
 8003cf6:	d42b      	bmi.n	8003d50 <_printf_common+0xb0>
 8003cf8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003cfc:	4649      	mov	r1, r9
 8003cfe:	4638      	mov	r0, r7
 8003d00:	47c0      	blx	r8
 8003d02:	3001      	adds	r0, #1
 8003d04:	d01e      	beq.n	8003d44 <_printf_common+0xa4>
 8003d06:	6823      	ldr	r3, [r4, #0]
 8003d08:	68e5      	ldr	r5, [r4, #12]
 8003d0a:	6832      	ldr	r2, [r6, #0]
 8003d0c:	f003 0306 	and.w	r3, r3, #6
 8003d10:	2b04      	cmp	r3, #4
 8003d12:	bf08      	it	eq
 8003d14:	1aad      	subeq	r5, r5, r2
 8003d16:	68a3      	ldr	r3, [r4, #8]
 8003d18:	6922      	ldr	r2, [r4, #16]
 8003d1a:	bf0c      	ite	eq
 8003d1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d20:	2500      	movne	r5, #0
 8003d22:	4293      	cmp	r3, r2
 8003d24:	bfc4      	itt	gt
 8003d26:	1a9b      	subgt	r3, r3, r2
 8003d28:	18ed      	addgt	r5, r5, r3
 8003d2a:	2600      	movs	r6, #0
 8003d2c:	341a      	adds	r4, #26
 8003d2e:	42b5      	cmp	r5, r6
 8003d30:	d11a      	bne.n	8003d68 <_printf_common+0xc8>
 8003d32:	2000      	movs	r0, #0
 8003d34:	e008      	b.n	8003d48 <_printf_common+0xa8>
 8003d36:	2301      	movs	r3, #1
 8003d38:	4652      	mov	r2, sl
 8003d3a:	4649      	mov	r1, r9
 8003d3c:	4638      	mov	r0, r7
 8003d3e:	47c0      	blx	r8
 8003d40:	3001      	adds	r0, #1
 8003d42:	d103      	bne.n	8003d4c <_printf_common+0xac>
 8003d44:	f04f 30ff 	mov.w	r0, #4294967295
 8003d48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d4c:	3501      	adds	r5, #1
 8003d4e:	e7c6      	b.n	8003cde <_printf_common+0x3e>
 8003d50:	18e1      	adds	r1, r4, r3
 8003d52:	1c5a      	adds	r2, r3, #1
 8003d54:	2030      	movs	r0, #48	; 0x30
 8003d56:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003d5a:	4422      	add	r2, r4
 8003d5c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003d60:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003d64:	3302      	adds	r3, #2
 8003d66:	e7c7      	b.n	8003cf8 <_printf_common+0x58>
 8003d68:	2301      	movs	r3, #1
 8003d6a:	4622      	mov	r2, r4
 8003d6c:	4649      	mov	r1, r9
 8003d6e:	4638      	mov	r0, r7
 8003d70:	47c0      	blx	r8
 8003d72:	3001      	adds	r0, #1
 8003d74:	d0e6      	beq.n	8003d44 <_printf_common+0xa4>
 8003d76:	3601      	adds	r6, #1
 8003d78:	e7d9      	b.n	8003d2e <_printf_common+0x8e>
	...

08003d7c <_printf_i>:
 8003d7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d80:	460c      	mov	r4, r1
 8003d82:	4691      	mov	r9, r2
 8003d84:	7e27      	ldrb	r7, [r4, #24]
 8003d86:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003d88:	2f78      	cmp	r7, #120	; 0x78
 8003d8a:	4680      	mov	r8, r0
 8003d8c:	469a      	mov	sl, r3
 8003d8e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003d92:	d807      	bhi.n	8003da4 <_printf_i+0x28>
 8003d94:	2f62      	cmp	r7, #98	; 0x62
 8003d96:	d80a      	bhi.n	8003dae <_printf_i+0x32>
 8003d98:	2f00      	cmp	r7, #0
 8003d9a:	f000 80d8 	beq.w	8003f4e <_printf_i+0x1d2>
 8003d9e:	2f58      	cmp	r7, #88	; 0x58
 8003da0:	f000 80a3 	beq.w	8003eea <_printf_i+0x16e>
 8003da4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003da8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003dac:	e03a      	b.n	8003e24 <_printf_i+0xa8>
 8003dae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003db2:	2b15      	cmp	r3, #21
 8003db4:	d8f6      	bhi.n	8003da4 <_printf_i+0x28>
 8003db6:	a001      	add	r0, pc, #4	; (adr r0, 8003dbc <_printf_i+0x40>)
 8003db8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003dbc:	08003e15 	.word	0x08003e15
 8003dc0:	08003e29 	.word	0x08003e29
 8003dc4:	08003da5 	.word	0x08003da5
 8003dc8:	08003da5 	.word	0x08003da5
 8003dcc:	08003da5 	.word	0x08003da5
 8003dd0:	08003da5 	.word	0x08003da5
 8003dd4:	08003e29 	.word	0x08003e29
 8003dd8:	08003da5 	.word	0x08003da5
 8003ddc:	08003da5 	.word	0x08003da5
 8003de0:	08003da5 	.word	0x08003da5
 8003de4:	08003da5 	.word	0x08003da5
 8003de8:	08003f35 	.word	0x08003f35
 8003dec:	08003e59 	.word	0x08003e59
 8003df0:	08003f17 	.word	0x08003f17
 8003df4:	08003da5 	.word	0x08003da5
 8003df8:	08003da5 	.word	0x08003da5
 8003dfc:	08003f57 	.word	0x08003f57
 8003e00:	08003da5 	.word	0x08003da5
 8003e04:	08003e59 	.word	0x08003e59
 8003e08:	08003da5 	.word	0x08003da5
 8003e0c:	08003da5 	.word	0x08003da5
 8003e10:	08003f1f 	.word	0x08003f1f
 8003e14:	680b      	ldr	r3, [r1, #0]
 8003e16:	1d1a      	adds	r2, r3, #4
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	600a      	str	r2, [r1, #0]
 8003e1c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003e20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e24:	2301      	movs	r3, #1
 8003e26:	e0a3      	b.n	8003f70 <_printf_i+0x1f4>
 8003e28:	6825      	ldr	r5, [r4, #0]
 8003e2a:	6808      	ldr	r0, [r1, #0]
 8003e2c:	062e      	lsls	r6, r5, #24
 8003e2e:	f100 0304 	add.w	r3, r0, #4
 8003e32:	d50a      	bpl.n	8003e4a <_printf_i+0xce>
 8003e34:	6805      	ldr	r5, [r0, #0]
 8003e36:	600b      	str	r3, [r1, #0]
 8003e38:	2d00      	cmp	r5, #0
 8003e3a:	da03      	bge.n	8003e44 <_printf_i+0xc8>
 8003e3c:	232d      	movs	r3, #45	; 0x2d
 8003e3e:	426d      	negs	r5, r5
 8003e40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e44:	485e      	ldr	r0, [pc, #376]	; (8003fc0 <_printf_i+0x244>)
 8003e46:	230a      	movs	r3, #10
 8003e48:	e019      	b.n	8003e7e <_printf_i+0x102>
 8003e4a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003e4e:	6805      	ldr	r5, [r0, #0]
 8003e50:	600b      	str	r3, [r1, #0]
 8003e52:	bf18      	it	ne
 8003e54:	b22d      	sxthne	r5, r5
 8003e56:	e7ef      	b.n	8003e38 <_printf_i+0xbc>
 8003e58:	680b      	ldr	r3, [r1, #0]
 8003e5a:	6825      	ldr	r5, [r4, #0]
 8003e5c:	1d18      	adds	r0, r3, #4
 8003e5e:	6008      	str	r0, [r1, #0]
 8003e60:	0628      	lsls	r0, r5, #24
 8003e62:	d501      	bpl.n	8003e68 <_printf_i+0xec>
 8003e64:	681d      	ldr	r5, [r3, #0]
 8003e66:	e002      	b.n	8003e6e <_printf_i+0xf2>
 8003e68:	0669      	lsls	r1, r5, #25
 8003e6a:	d5fb      	bpl.n	8003e64 <_printf_i+0xe8>
 8003e6c:	881d      	ldrh	r5, [r3, #0]
 8003e6e:	4854      	ldr	r0, [pc, #336]	; (8003fc0 <_printf_i+0x244>)
 8003e70:	2f6f      	cmp	r7, #111	; 0x6f
 8003e72:	bf0c      	ite	eq
 8003e74:	2308      	moveq	r3, #8
 8003e76:	230a      	movne	r3, #10
 8003e78:	2100      	movs	r1, #0
 8003e7a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003e7e:	6866      	ldr	r6, [r4, #4]
 8003e80:	60a6      	str	r6, [r4, #8]
 8003e82:	2e00      	cmp	r6, #0
 8003e84:	bfa2      	ittt	ge
 8003e86:	6821      	ldrge	r1, [r4, #0]
 8003e88:	f021 0104 	bicge.w	r1, r1, #4
 8003e8c:	6021      	strge	r1, [r4, #0]
 8003e8e:	b90d      	cbnz	r5, 8003e94 <_printf_i+0x118>
 8003e90:	2e00      	cmp	r6, #0
 8003e92:	d04d      	beq.n	8003f30 <_printf_i+0x1b4>
 8003e94:	4616      	mov	r6, r2
 8003e96:	fbb5 f1f3 	udiv	r1, r5, r3
 8003e9a:	fb03 5711 	mls	r7, r3, r1, r5
 8003e9e:	5dc7      	ldrb	r7, [r0, r7]
 8003ea0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003ea4:	462f      	mov	r7, r5
 8003ea6:	42bb      	cmp	r3, r7
 8003ea8:	460d      	mov	r5, r1
 8003eaa:	d9f4      	bls.n	8003e96 <_printf_i+0x11a>
 8003eac:	2b08      	cmp	r3, #8
 8003eae:	d10b      	bne.n	8003ec8 <_printf_i+0x14c>
 8003eb0:	6823      	ldr	r3, [r4, #0]
 8003eb2:	07df      	lsls	r7, r3, #31
 8003eb4:	d508      	bpl.n	8003ec8 <_printf_i+0x14c>
 8003eb6:	6923      	ldr	r3, [r4, #16]
 8003eb8:	6861      	ldr	r1, [r4, #4]
 8003eba:	4299      	cmp	r1, r3
 8003ebc:	bfde      	ittt	le
 8003ebe:	2330      	movle	r3, #48	; 0x30
 8003ec0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003ec4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003ec8:	1b92      	subs	r2, r2, r6
 8003eca:	6122      	str	r2, [r4, #16]
 8003ecc:	f8cd a000 	str.w	sl, [sp]
 8003ed0:	464b      	mov	r3, r9
 8003ed2:	aa03      	add	r2, sp, #12
 8003ed4:	4621      	mov	r1, r4
 8003ed6:	4640      	mov	r0, r8
 8003ed8:	f7ff fee2 	bl	8003ca0 <_printf_common>
 8003edc:	3001      	adds	r0, #1
 8003ede:	d14c      	bne.n	8003f7a <_printf_i+0x1fe>
 8003ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ee4:	b004      	add	sp, #16
 8003ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003eea:	4835      	ldr	r0, [pc, #212]	; (8003fc0 <_printf_i+0x244>)
 8003eec:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003ef0:	6823      	ldr	r3, [r4, #0]
 8003ef2:	680e      	ldr	r6, [r1, #0]
 8003ef4:	061f      	lsls	r7, r3, #24
 8003ef6:	f856 5b04 	ldr.w	r5, [r6], #4
 8003efa:	600e      	str	r6, [r1, #0]
 8003efc:	d514      	bpl.n	8003f28 <_printf_i+0x1ac>
 8003efe:	07d9      	lsls	r1, r3, #31
 8003f00:	bf44      	itt	mi
 8003f02:	f043 0320 	orrmi.w	r3, r3, #32
 8003f06:	6023      	strmi	r3, [r4, #0]
 8003f08:	b91d      	cbnz	r5, 8003f12 <_printf_i+0x196>
 8003f0a:	6823      	ldr	r3, [r4, #0]
 8003f0c:	f023 0320 	bic.w	r3, r3, #32
 8003f10:	6023      	str	r3, [r4, #0]
 8003f12:	2310      	movs	r3, #16
 8003f14:	e7b0      	b.n	8003e78 <_printf_i+0xfc>
 8003f16:	6823      	ldr	r3, [r4, #0]
 8003f18:	f043 0320 	orr.w	r3, r3, #32
 8003f1c:	6023      	str	r3, [r4, #0]
 8003f1e:	2378      	movs	r3, #120	; 0x78
 8003f20:	4828      	ldr	r0, [pc, #160]	; (8003fc4 <_printf_i+0x248>)
 8003f22:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003f26:	e7e3      	b.n	8003ef0 <_printf_i+0x174>
 8003f28:	065e      	lsls	r6, r3, #25
 8003f2a:	bf48      	it	mi
 8003f2c:	b2ad      	uxthmi	r5, r5
 8003f2e:	e7e6      	b.n	8003efe <_printf_i+0x182>
 8003f30:	4616      	mov	r6, r2
 8003f32:	e7bb      	b.n	8003eac <_printf_i+0x130>
 8003f34:	680b      	ldr	r3, [r1, #0]
 8003f36:	6826      	ldr	r6, [r4, #0]
 8003f38:	6960      	ldr	r0, [r4, #20]
 8003f3a:	1d1d      	adds	r5, r3, #4
 8003f3c:	600d      	str	r5, [r1, #0]
 8003f3e:	0635      	lsls	r5, r6, #24
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	d501      	bpl.n	8003f48 <_printf_i+0x1cc>
 8003f44:	6018      	str	r0, [r3, #0]
 8003f46:	e002      	b.n	8003f4e <_printf_i+0x1d2>
 8003f48:	0671      	lsls	r1, r6, #25
 8003f4a:	d5fb      	bpl.n	8003f44 <_printf_i+0x1c8>
 8003f4c:	8018      	strh	r0, [r3, #0]
 8003f4e:	2300      	movs	r3, #0
 8003f50:	6123      	str	r3, [r4, #16]
 8003f52:	4616      	mov	r6, r2
 8003f54:	e7ba      	b.n	8003ecc <_printf_i+0x150>
 8003f56:	680b      	ldr	r3, [r1, #0]
 8003f58:	1d1a      	adds	r2, r3, #4
 8003f5a:	600a      	str	r2, [r1, #0]
 8003f5c:	681e      	ldr	r6, [r3, #0]
 8003f5e:	6862      	ldr	r2, [r4, #4]
 8003f60:	2100      	movs	r1, #0
 8003f62:	4630      	mov	r0, r6
 8003f64:	f7fc f93c 	bl	80001e0 <memchr>
 8003f68:	b108      	cbz	r0, 8003f6e <_printf_i+0x1f2>
 8003f6a:	1b80      	subs	r0, r0, r6
 8003f6c:	6060      	str	r0, [r4, #4]
 8003f6e:	6863      	ldr	r3, [r4, #4]
 8003f70:	6123      	str	r3, [r4, #16]
 8003f72:	2300      	movs	r3, #0
 8003f74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f78:	e7a8      	b.n	8003ecc <_printf_i+0x150>
 8003f7a:	6923      	ldr	r3, [r4, #16]
 8003f7c:	4632      	mov	r2, r6
 8003f7e:	4649      	mov	r1, r9
 8003f80:	4640      	mov	r0, r8
 8003f82:	47d0      	blx	sl
 8003f84:	3001      	adds	r0, #1
 8003f86:	d0ab      	beq.n	8003ee0 <_printf_i+0x164>
 8003f88:	6823      	ldr	r3, [r4, #0]
 8003f8a:	079b      	lsls	r3, r3, #30
 8003f8c:	d413      	bmi.n	8003fb6 <_printf_i+0x23a>
 8003f8e:	68e0      	ldr	r0, [r4, #12]
 8003f90:	9b03      	ldr	r3, [sp, #12]
 8003f92:	4298      	cmp	r0, r3
 8003f94:	bfb8      	it	lt
 8003f96:	4618      	movlt	r0, r3
 8003f98:	e7a4      	b.n	8003ee4 <_printf_i+0x168>
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	4632      	mov	r2, r6
 8003f9e:	4649      	mov	r1, r9
 8003fa0:	4640      	mov	r0, r8
 8003fa2:	47d0      	blx	sl
 8003fa4:	3001      	adds	r0, #1
 8003fa6:	d09b      	beq.n	8003ee0 <_printf_i+0x164>
 8003fa8:	3501      	adds	r5, #1
 8003faa:	68e3      	ldr	r3, [r4, #12]
 8003fac:	9903      	ldr	r1, [sp, #12]
 8003fae:	1a5b      	subs	r3, r3, r1
 8003fb0:	42ab      	cmp	r3, r5
 8003fb2:	dcf2      	bgt.n	8003f9a <_printf_i+0x21e>
 8003fb4:	e7eb      	b.n	8003f8e <_printf_i+0x212>
 8003fb6:	2500      	movs	r5, #0
 8003fb8:	f104 0619 	add.w	r6, r4, #25
 8003fbc:	e7f5      	b.n	8003faa <_printf_i+0x22e>
 8003fbe:	bf00      	nop
 8003fc0:	08006172 	.word	0x08006172
 8003fc4:	08006183 	.word	0x08006183

08003fc8 <strncat>:
 8003fc8:	b530      	push	{r4, r5, lr}
 8003fca:	4604      	mov	r4, r0
 8003fcc:	7825      	ldrb	r5, [r4, #0]
 8003fce:	4623      	mov	r3, r4
 8003fd0:	3401      	adds	r4, #1
 8003fd2:	2d00      	cmp	r5, #0
 8003fd4:	d1fa      	bne.n	8003fcc <strncat+0x4>
 8003fd6:	3a01      	subs	r2, #1
 8003fd8:	d304      	bcc.n	8003fe4 <strncat+0x1c>
 8003fda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003fde:	f803 4b01 	strb.w	r4, [r3], #1
 8003fe2:	b904      	cbnz	r4, 8003fe6 <strncat+0x1e>
 8003fe4:	bd30      	pop	{r4, r5, pc}
 8003fe6:	2a00      	cmp	r2, #0
 8003fe8:	d1f5      	bne.n	8003fd6 <strncat+0xe>
 8003fea:	701a      	strb	r2, [r3, #0]
 8003fec:	e7f3      	b.n	8003fd6 <strncat+0xe>

08003fee <strstr>:
 8003fee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ff0:	780c      	ldrb	r4, [r1, #0]
 8003ff2:	b164      	cbz	r4, 800400e <strstr+0x20>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	781a      	ldrb	r2, [r3, #0]
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	1c5e      	adds	r6, r3, #1
 8003ffc:	b90a      	cbnz	r2, 8004002 <strstr+0x14>
 8003ffe:	4610      	mov	r0, r2
 8004000:	e005      	b.n	800400e <strstr+0x20>
 8004002:	4294      	cmp	r4, r2
 8004004:	d108      	bne.n	8004018 <strstr+0x2a>
 8004006:	460d      	mov	r5, r1
 8004008:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800400c:	b902      	cbnz	r2, 8004010 <strstr+0x22>
 800400e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004010:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8004014:	4297      	cmp	r7, r2
 8004016:	d0f7      	beq.n	8004008 <strstr+0x1a>
 8004018:	4633      	mov	r3, r6
 800401a:	e7ec      	b.n	8003ff6 <strstr+0x8>

0800401c <quorem>:
 800401c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004020:	6903      	ldr	r3, [r0, #16]
 8004022:	690c      	ldr	r4, [r1, #16]
 8004024:	42a3      	cmp	r3, r4
 8004026:	4607      	mov	r7, r0
 8004028:	f2c0 8081 	blt.w	800412e <quorem+0x112>
 800402c:	3c01      	subs	r4, #1
 800402e:	f101 0814 	add.w	r8, r1, #20
 8004032:	f100 0514 	add.w	r5, r0, #20
 8004036:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800403a:	9301      	str	r3, [sp, #4]
 800403c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004040:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004044:	3301      	adds	r3, #1
 8004046:	429a      	cmp	r2, r3
 8004048:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800404c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004050:	fbb2 f6f3 	udiv	r6, r2, r3
 8004054:	d331      	bcc.n	80040ba <quorem+0x9e>
 8004056:	f04f 0e00 	mov.w	lr, #0
 800405a:	4640      	mov	r0, r8
 800405c:	46ac      	mov	ip, r5
 800405e:	46f2      	mov	sl, lr
 8004060:	f850 2b04 	ldr.w	r2, [r0], #4
 8004064:	b293      	uxth	r3, r2
 8004066:	fb06 e303 	mla	r3, r6, r3, lr
 800406a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800406e:	b29b      	uxth	r3, r3
 8004070:	ebaa 0303 	sub.w	r3, sl, r3
 8004074:	0c12      	lsrs	r2, r2, #16
 8004076:	f8dc a000 	ldr.w	sl, [ip]
 800407a:	fb06 e202 	mla	r2, r6, r2, lr
 800407e:	fa13 f38a 	uxtah	r3, r3, sl
 8004082:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004086:	fa1f fa82 	uxth.w	sl, r2
 800408a:	f8dc 2000 	ldr.w	r2, [ip]
 800408e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8004092:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004096:	b29b      	uxth	r3, r3
 8004098:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800409c:	4581      	cmp	r9, r0
 800409e:	f84c 3b04 	str.w	r3, [ip], #4
 80040a2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80040a6:	d2db      	bcs.n	8004060 <quorem+0x44>
 80040a8:	f855 300b 	ldr.w	r3, [r5, fp]
 80040ac:	b92b      	cbnz	r3, 80040ba <quorem+0x9e>
 80040ae:	9b01      	ldr	r3, [sp, #4]
 80040b0:	3b04      	subs	r3, #4
 80040b2:	429d      	cmp	r5, r3
 80040b4:	461a      	mov	r2, r3
 80040b6:	d32e      	bcc.n	8004116 <quorem+0xfa>
 80040b8:	613c      	str	r4, [r7, #16]
 80040ba:	4638      	mov	r0, r7
 80040bc:	f001 f8c0 	bl	8005240 <__mcmp>
 80040c0:	2800      	cmp	r0, #0
 80040c2:	db24      	blt.n	800410e <quorem+0xf2>
 80040c4:	3601      	adds	r6, #1
 80040c6:	4628      	mov	r0, r5
 80040c8:	f04f 0c00 	mov.w	ip, #0
 80040cc:	f858 2b04 	ldr.w	r2, [r8], #4
 80040d0:	f8d0 e000 	ldr.w	lr, [r0]
 80040d4:	b293      	uxth	r3, r2
 80040d6:	ebac 0303 	sub.w	r3, ip, r3
 80040da:	0c12      	lsrs	r2, r2, #16
 80040dc:	fa13 f38e 	uxtah	r3, r3, lr
 80040e0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80040e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80040ee:	45c1      	cmp	r9, r8
 80040f0:	f840 3b04 	str.w	r3, [r0], #4
 80040f4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80040f8:	d2e8      	bcs.n	80040cc <quorem+0xb0>
 80040fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80040fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004102:	b922      	cbnz	r2, 800410e <quorem+0xf2>
 8004104:	3b04      	subs	r3, #4
 8004106:	429d      	cmp	r5, r3
 8004108:	461a      	mov	r2, r3
 800410a:	d30a      	bcc.n	8004122 <quorem+0x106>
 800410c:	613c      	str	r4, [r7, #16]
 800410e:	4630      	mov	r0, r6
 8004110:	b003      	add	sp, #12
 8004112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004116:	6812      	ldr	r2, [r2, #0]
 8004118:	3b04      	subs	r3, #4
 800411a:	2a00      	cmp	r2, #0
 800411c:	d1cc      	bne.n	80040b8 <quorem+0x9c>
 800411e:	3c01      	subs	r4, #1
 8004120:	e7c7      	b.n	80040b2 <quorem+0x96>
 8004122:	6812      	ldr	r2, [r2, #0]
 8004124:	3b04      	subs	r3, #4
 8004126:	2a00      	cmp	r2, #0
 8004128:	d1f0      	bne.n	800410c <quorem+0xf0>
 800412a:	3c01      	subs	r4, #1
 800412c:	e7eb      	b.n	8004106 <quorem+0xea>
 800412e:	2000      	movs	r0, #0
 8004130:	e7ee      	b.n	8004110 <quorem+0xf4>
 8004132:	0000      	movs	r0, r0
 8004134:	0000      	movs	r0, r0
	...

08004138 <_dtoa_r>:
 8004138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800413c:	ed2d 8b02 	vpush	{d8}
 8004140:	ec57 6b10 	vmov	r6, r7, d0
 8004144:	b095      	sub	sp, #84	; 0x54
 8004146:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004148:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800414c:	9105      	str	r1, [sp, #20]
 800414e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8004152:	4604      	mov	r4, r0
 8004154:	9209      	str	r2, [sp, #36]	; 0x24
 8004156:	930f      	str	r3, [sp, #60]	; 0x3c
 8004158:	b975      	cbnz	r5, 8004178 <_dtoa_r+0x40>
 800415a:	2010      	movs	r0, #16
 800415c:	f000 fddc 	bl	8004d18 <malloc>
 8004160:	4602      	mov	r2, r0
 8004162:	6260      	str	r0, [r4, #36]	; 0x24
 8004164:	b920      	cbnz	r0, 8004170 <_dtoa_r+0x38>
 8004166:	4bb2      	ldr	r3, [pc, #712]	; (8004430 <_dtoa_r+0x2f8>)
 8004168:	21ea      	movs	r1, #234	; 0xea
 800416a:	48b2      	ldr	r0, [pc, #712]	; (8004434 <_dtoa_r+0x2fc>)
 800416c:	f001 fa32 	bl	80055d4 <__assert_func>
 8004170:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004174:	6005      	str	r5, [r0, #0]
 8004176:	60c5      	str	r5, [r0, #12]
 8004178:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800417a:	6819      	ldr	r1, [r3, #0]
 800417c:	b151      	cbz	r1, 8004194 <_dtoa_r+0x5c>
 800417e:	685a      	ldr	r2, [r3, #4]
 8004180:	604a      	str	r2, [r1, #4]
 8004182:	2301      	movs	r3, #1
 8004184:	4093      	lsls	r3, r2
 8004186:	608b      	str	r3, [r1, #8]
 8004188:	4620      	mov	r0, r4
 800418a:	f000 fe1b 	bl	8004dc4 <_Bfree>
 800418e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004190:	2200      	movs	r2, #0
 8004192:	601a      	str	r2, [r3, #0]
 8004194:	1e3b      	subs	r3, r7, #0
 8004196:	bfb9      	ittee	lt
 8004198:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800419c:	9303      	strlt	r3, [sp, #12]
 800419e:	2300      	movge	r3, #0
 80041a0:	f8c8 3000 	strge.w	r3, [r8]
 80041a4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80041a8:	4ba3      	ldr	r3, [pc, #652]	; (8004438 <_dtoa_r+0x300>)
 80041aa:	bfbc      	itt	lt
 80041ac:	2201      	movlt	r2, #1
 80041ae:	f8c8 2000 	strlt.w	r2, [r8]
 80041b2:	ea33 0309 	bics.w	r3, r3, r9
 80041b6:	d11b      	bne.n	80041f0 <_dtoa_r+0xb8>
 80041b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80041ba:	f242 730f 	movw	r3, #9999	; 0x270f
 80041be:	6013      	str	r3, [r2, #0]
 80041c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80041c4:	4333      	orrs	r3, r6
 80041c6:	f000 857a 	beq.w	8004cbe <_dtoa_r+0xb86>
 80041ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80041cc:	b963      	cbnz	r3, 80041e8 <_dtoa_r+0xb0>
 80041ce:	4b9b      	ldr	r3, [pc, #620]	; (800443c <_dtoa_r+0x304>)
 80041d0:	e024      	b.n	800421c <_dtoa_r+0xe4>
 80041d2:	4b9b      	ldr	r3, [pc, #620]	; (8004440 <_dtoa_r+0x308>)
 80041d4:	9300      	str	r3, [sp, #0]
 80041d6:	3308      	adds	r3, #8
 80041d8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80041da:	6013      	str	r3, [r2, #0]
 80041dc:	9800      	ldr	r0, [sp, #0]
 80041de:	b015      	add	sp, #84	; 0x54
 80041e0:	ecbd 8b02 	vpop	{d8}
 80041e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041e8:	4b94      	ldr	r3, [pc, #592]	; (800443c <_dtoa_r+0x304>)
 80041ea:	9300      	str	r3, [sp, #0]
 80041ec:	3303      	adds	r3, #3
 80041ee:	e7f3      	b.n	80041d8 <_dtoa_r+0xa0>
 80041f0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80041f4:	2200      	movs	r2, #0
 80041f6:	ec51 0b17 	vmov	r0, r1, d7
 80041fa:	2300      	movs	r3, #0
 80041fc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8004200:	f7fc fc62 	bl	8000ac8 <__aeabi_dcmpeq>
 8004204:	4680      	mov	r8, r0
 8004206:	b158      	cbz	r0, 8004220 <_dtoa_r+0xe8>
 8004208:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800420a:	2301      	movs	r3, #1
 800420c:	6013      	str	r3, [r2, #0]
 800420e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004210:	2b00      	cmp	r3, #0
 8004212:	f000 8551 	beq.w	8004cb8 <_dtoa_r+0xb80>
 8004216:	488b      	ldr	r0, [pc, #556]	; (8004444 <_dtoa_r+0x30c>)
 8004218:	6018      	str	r0, [r3, #0]
 800421a:	1e43      	subs	r3, r0, #1
 800421c:	9300      	str	r3, [sp, #0]
 800421e:	e7dd      	b.n	80041dc <_dtoa_r+0xa4>
 8004220:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8004224:	aa12      	add	r2, sp, #72	; 0x48
 8004226:	a913      	add	r1, sp, #76	; 0x4c
 8004228:	4620      	mov	r0, r4
 800422a:	f001 f8ad 	bl	8005388 <__d2b>
 800422e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004232:	4683      	mov	fp, r0
 8004234:	2d00      	cmp	r5, #0
 8004236:	d07c      	beq.n	8004332 <_dtoa_r+0x1fa>
 8004238:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800423a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800423e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004242:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8004246:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800424a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800424e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004252:	4b7d      	ldr	r3, [pc, #500]	; (8004448 <_dtoa_r+0x310>)
 8004254:	2200      	movs	r2, #0
 8004256:	4630      	mov	r0, r6
 8004258:	4639      	mov	r1, r7
 800425a:	f7fc f815 	bl	8000288 <__aeabi_dsub>
 800425e:	a36e      	add	r3, pc, #440	; (adr r3, 8004418 <_dtoa_r+0x2e0>)
 8004260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004264:	f7fc f9c8 	bl	80005f8 <__aeabi_dmul>
 8004268:	a36d      	add	r3, pc, #436	; (adr r3, 8004420 <_dtoa_r+0x2e8>)
 800426a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800426e:	f7fc f80d 	bl	800028c <__adddf3>
 8004272:	4606      	mov	r6, r0
 8004274:	4628      	mov	r0, r5
 8004276:	460f      	mov	r7, r1
 8004278:	f7fc f954 	bl	8000524 <__aeabi_i2d>
 800427c:	a36a      	add	r3, pc, #424	; (adr r3, 8004428 <_dtoa_r+0x2f0>)
 800427e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004282:	f7fc f9b9 	bl	80005f8 <__aeabi_dmul>
 8004286:	4602      	mov	r2, r0
 8004288:	460b      	mov	r3, r1
 800428a:	4630      	mov	r0, r6
 800428c:	4639      	mov	r1, r7
 800428e:	f7fb fffd 	bl	800028c <__adddf3>
 8004292:	4606      	mov	r6, r0
 8004294:	460f      	mov	r7, r1
 8004296:	f7fc fc5f 	bl	8000b58 <__aeabi_d2iz>
 800429a:	2200      	movs	r2, #0
 800429c:	4682      	mov	sl, r0
 800429e:	2300      	movs	r3, #0
 80042a0:	4630      	mov	r0, r6
 80042a2:	4639      	mov	r1, r7
 80042a4:	f7fc fc1a 	bl	8000adc <__aeabi_dcmplt>
 80042a8:	b148      	cbz	r0, 80042be <_dtoa_r+0x186>
 80042aa:	4650      	mov	r0, sl
 80042ac:	f7fc f93a 	bl	8000524 <__aeabi_i2d>
 80042b0:	4632      	mov	r2, r6
 80042b2:	463b      	mov	r3, r7
 80042b4:	f7fc fc08 	bl	8000ac8 <__aeabi_dcmpeq>
 80042b8:	b908      	cbnz	r0, 80042be <_dtoa_r+0x186>
 80042ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80042be:	f1ba 0f16 	cmp.w	sl, #22
 80042c2:	d854      	bhi.n	800436e <_dtoa_r+0x236>
 80042c4:	4b61      	ldr	r3, [pc, #388]	; (800444c <_dtoa_r+0x314>)
 80042c6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80042ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80042d2:	f7fc fc03 	bl	8000adc <__aeabi_dcmplt>
 80042d6:	2800      	cmp	r0, #0
 80042d8:	d04b      	beq.n	8004372 <_dtoa_r+0x23a>
 80042da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80042de:	2300      	movs	r3, #0
 80042e0:	930e      	str	r3, [sp, #56]	; 0x38
 80042e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80042e4:	1b5d      	subs	r5, r3, r5
 80042e6:	1e6b      	subs	r3, r5, #1
 80042e8:	9304      	str	r3, [sp, #16]
 80042ea:	bf43      	ittte	mi
 80042ec:	2300      	movmi	r3, #0
 80042ee:	f1c5 0801 	rsbmi	r8, r5, #1
 80042f2:	9304      	strmi	r3, [sp, #16]
 80042f4:	f04f 0800 	movpl.w	r8, #0
 80042f8:	f1ba 0f00 	cmp.w	sl, #0
 80042fc:	db3b      	blt.n	8004376 <_dtoa_r+0x23e>
 80042fe:	9b04      	ldr	r3, [sp, #16]
 8004300:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8004304:	4453      	add	r3, sl
 8004306:	9304      	str	r3, [sp, #16]
 8004308:	2300      	movs	r3, #0
 800430a:	9306      	str	r3, [sp, #24]
 800430c:	9b05      	ldr	r3, [sp, #20]
 800430e:	2b09      	cmp	r3, #9
 8004310:	d869      	bhi.n	80043e6 <_dtoa_r+0x2ae>
 8004312:	2b05      	cmp	r3, #5
 8004314:	bfc4      	itt	gt
 8004316:	3b04      	subgt	r3, #4
 8004318:	9305      	strgt	r3, [sp, #20]
 800431a:	9b05      	ldr	r3, [sp, #20]
 800431c:	f1a3 0302 	sub.w	r3, r3, #2
 8004320:	bfcc      	ite	gt
 8004322:	2500      	movgt	r5, #0
 8004324:	2501      	movle	r5, #1
 8004326:	2b03      	cmp	r3, #3
 8004328:	d869      	bhi.n	80043fe <_dtoa_r+0x2c6>
 800432a:	e8df f003 	tbb	[pc, r3]
 800432e:	4e2c      	.short	0x4e2c
 8004330:	5a4c      	.short	0x5a4c
 8004332:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8004336:	441d      	add	r5, r3
 8004338:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800433c:	2b20      	cmp	r3, #32
 800433e:	bfc1      	itttt	gt
 8004340:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004344:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8004348:	fa09 f303 	lslgt.w	r3, r9, r3
 800434c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004350:	bfda      	itte	le
 8004352:	f1c3 0320 	rsble	r3, r3, #32
 8004356:	fa06 f003 	lslle.w	r0, r6, r3
 800435a:	4318      	orrgt	r0, r3
 800435c:	f7fc f8d2 	bl	8000504 <__aeabi_ui2d>
 8004360:	2301      	movs	r3, #1
 8004362:	4606      	mov	r6, r0
 8004364:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8004368:	3d01      	subs	r5, #1
 800436a:	9310      	str	r3, [sp, #64]	; 0x40
 800436c:	e771      	b.n	8004252 <_dtoa_r+0x11a>
 800436e:	2301      	movs	r3, #1
 8004370:	e7b6      	b.n	80042e0 <_dtoa_r+0x1a8>
 8004372:	900e      	str	r0, [sp, #56]	; 0x38
 8004374:	e7b5      	b.n	80042e2 <_dtoa_r+0x1aa>
 8004376:	f1ca 0300 	rsb	r3, sl, #0
 800437a:	9306      	str	r3, [sp, #24]
 800437c:	2300      	movs	r3, #0
 800437e:	eba8 080a 	sub.w	r8, r8, sl
 8004382:	930d      	str	r3, [sp, #52]	; 0x34
 8004384:	e7c2      	b.n	800430c <_dtoa_r+0x1d4>
 8004386:	2300      	movs	r3, #0
 8004388:	9308      	str	r3, [sp, #32]
 800438a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800438c:	2b00      	cmp	r3, #0
 800438e:	dc39      	bgt.n	8004404 <_dtoa_r+0x2cc>
 8004390:	f04f 0901 	mov.w	r9, #1
 8004394:	f8cd 9004 	str.w	r9, [sp, #4]
 8004398:	464b      	mov	r3, r9
 800439a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800439e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80043a0:	2200      	movs	r2, #0
 80043a2:	6042      	str	r2, [r0, #4]
 80043a4:	2204      	movs	r2, #4
 80043a6:	f102 0614 	add.w	r6, r2, #20
 80043aa:	429e      	cmp	r6, r3
 80043ac:	6841      	ldr	r1, [r0, #4]
 80043ae:	d92f      	bls.n	8004410 <_dtoa_r+0x2d8>
 80043b0:	4620      	mov	r0, r4
 80043b2:	f000 fcc7 	bl	8004d44 <_Balloc>
 80043b6:	9000      	str	r0, [sp, #0]
 80043b8:	2800      	cmp	r0, #0
 80043ba:	d14b      	bne.n	8004454 <_dtoa_r+0x31c>
 80043bc:	4b24      	ldr	r3, [pc, #144]	; (8004450 <_dtoa_r+0x318>)
 80043be:	4602      	mov	r2, r0
 80043c0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80043c4:	e6d1      	b.n	800416a <_dtoa_r+0x32>
 80043c6:	2301      	movs	r3, #1
 80043c8:	e7de      	b.n	8004388 <_dtoa_r+0x250>
 80043ca:	2300      	movs	r3, #0
 80043cc:	9308      	str	r3, [sp, #32]
 80043ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043d0:	eb0a 0903 	add.w	r9, sl, r3
 80043d4:	f109 0301 	add.w	r3, r9, #1
 80043d8:	2b01      	cmp	r3, #1
 80043da:	9301      	str	r3, [sp, #4]
 80043dc:	bfb8      	it	lt
 80043de:	2301      	movlt	r3, #1
 80043e0:	e7dd      	b.n	800439e <_dtoa_r+0x266>
 80043e2:	2301      	movs	r3, #1
 80043e4:	e7f2      	b.n	80043cc <_dtoa_r+0x294>
 80043e6:	2501      	movs	r5, #1
 80043e8:	2300      	movs	r3, #0
 80043ea:	9305      	str	r3, [sp, #20]
 80043ec:	9508      	str	r5, [sp, #32]
 80043ee:	f04f 39ff 	mov.w	r9, #4294967295
 80043f2:	2200      	movs	r2, #0
 80043f4:	f8cd 9004 	str.w	r9, [sp, #4]
 80043f8:	2312      	movs	r3, #18
 80043fa:	9209      	str	r2, [sp, #36]	; 0x24
 80043fc:	e7cf      	b.n	800439e <_dtoa_r+0x266>
 80043fe:	2301      	movs	r3, #1
 8004400:	9308      	str	r3, [sp, #32]
 8004402:	e7f4      	b.n	80043ee <_dtoa_r+0x2b6>
 8004404:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8004408:	f8cd 9004 	str.w	r9, [sp, #4]
 800440c:	464b      	mov	r3, r9
 800440e:	e7c6      	b.n	800439e <_dtoa_r+0x266>
 8004410:	3101      	adds	r1, #1
 8004412:	6041      	str	r1, [r0, #4]
 8004414:	0052      	lsls	r2, r2, #1
 8004416:	e7c6      	b.n	80043a6 <_dtoa_r+0x26e>
 8004418:	636f4361 	.word	0x636f4361
 800441c:	3fd287a7 	.word	0x3fd287a7
 8004420:	8b60c8b3 	.word	0x8b60c8b3
 8004424:	3fc68a28 	.word	0x3fc68a28
 8004428:	509f79fb 	.word	0x509f79fb
 800442c:	3fd34413 	.word	0x3fd34413
 8004430:	080061a1 	.word	0x080061a1
 8004434:	080061b8 	.word	0x080061b8
 8004438:	7ff00000 	.word	0x7ff00000
 800443c:	0800619d 	.word	0x0800619d
 8004440:	08006194 	.word	0x08006194
 8004444:	08006171 	.word	0x08006171
 8004448:	3ff80000 	.word	0x3ff80000
 800444c:	080062b0 	.word	0x080062b0
 8004450:	08006217 	.word	0x08006217
 8004454:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004456:	9a00      	ldr	r2, [sp, #0]
 8004458:	601a      	str	r2, [r3, #0]
 800445a:	9b01      	ldr	r3, [sp, #4]
 800445c:	2b0e      	cmp	r3, #14
 800445e:	f200 80ad 	bhi.w	80045bc <_dtoa_r+0x484>
 8004462:	2d00      	cmp	r5, #0
 8004464:	f000 80aa 	beq.w	80045bc <_dtoa_r+0x484>
 8004468:	f1ba 0f00 	cmp.w	sl, #0
 800446c:	dd36      	ble.n	80044dc <_dtoa_r+0x3a4>
 800446e:	4ac3      	ldr	r2, [pc, #780]	; (800477c <_dtoa_r+0x644>)
 8004470:	f00a 030f 	and.w	r3, sl, #15
 8004474:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004478:	ed93 7b00 	vldr	d7, [r3]
 800447c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8004480:	ea4f 172a 	mov.w	r7, sl, asr #4
 8004484:	eeb0 8a47 	vmov.f32	s16, s14
 8004488:	eef0 8a67 	vmov.f32	s17, s15
 800448c:	d016      	beq.n	80044bc <_dtoa_r+0x384>
 800448e:	4bbc      	ldr	r3, [pc, #752]	; (8004780 <_dtoa_r+0x648>)
 8004490:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004494:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004498:	f7fc f9d8 	bl	800084c <__aeabi_ddiv>
 800449c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80044a0:	f007 070f 	and.w	r7, r7, #15
 80044a4:	2503      	movs	r5, #3
 80044a6:	4eb6      	ldr	r6, [pc, #728]	; (8004780 <_dtoa_r+0x648>)
 80044a8:	b957      	cbnz	r7, 80044c0 <_dtoa_r+0x388>
 80044aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80044ae:	ec53 2b18 	vmov	r2, r3, d8
 80044b2:	f7fc f9cb 	bl	800084c <__aeabi_ddiv>
 80044b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80044ba:	e029      	b.n	8004510 <_dtoa_r+0x3d8>
 80044bc:	2502      	movs	r5, #2
 80044be:	e7f2      	b.n	80044a6 <_dtoa_r+0x36e>
 80044c0:	07f9      	lsls	r1, r7, #31
 80044c2:	d508      	bpl.n	80044d6 <_dtoa_r+0x39e>
 80044c4:	ec51 0b18 	vmov	r0, r1, d8
 80044c8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80044cc:	f7fc f894 	bl	80005f8 <__aeabi_dmul>
 80044d0:	ec41 0b18 	vmov	d8, r0, r1
 80044d4:	3501      	adds	r5, #1
 80044d6:	107f      	asrs	r7, r7, #1
 80044d8:	3608      	adds	r6, #8
 80044da:	e7e5      	b.n	80044a8 <_dtoa_r+0x370>
 80044dc:	f000 80a6 	beq.w	800462c <_dtoa_r+0x4f4>
 80044e0:	f1ca 0600 	rsb	r6, sl, #0
 80044e4:	4ba5      	ldr	r3, [pc, #660]	; (800477c <_dtoa_r+0x644>)
 80044e6:	4fa6      	ldr	r7, [pc, #664]	; (8004780 <_dtoa_r+0x648>)
 80044e8:	f006 020f 	and.w	r2, r6, #15
 80044ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80044f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044f4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80044f8:	f7fc f87e 	bl	80005f8 <__aeabi_dmul>
 80044fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004500:	1136      	asrs	r6, r6, #4
 8004502:	2300      	movs	r3, #0
 8004504:	2502      	movs	r5, #2
 8004506:	2e00      	cmp	r6, #0
 8004508:	f040 8085 	bne.w	8004616 <_dtoa_r+0x4de>
 800450c:	2b00      	cmp	r3, #0
 800450e:	d1d2      	bne.n	80044b6 <_dtoa_r+0x37e>
 8004510:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004512:	2b00      	cmp	r3, #0
 8004514:	f000 808c 	beq.w	8004630 <_dtoa_r+0x4f8>
 8004518:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800451c:	4b99      	ldr	r3, [pc, #612]	; (8004784 <_dtoa_r+0x64c>)
 800451e:	2200      	movs	r2, #0
 8004520:	4630      	mov	r0, r6
 8004522:	4639      	mov	r1, r7
 8004524:	f7fc fada 	bl	8000adc <__aeabi_dcmplt>
 8004528:	2800      	cmp	r0, #0
 800452a:	f000 8081 	beq.w	8004630 <_dtoa_r+0x4f8>
 800452e:	9b01      	ldr	r3, [sp, #4]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d07d      	beq.n	8004630 <_dtoa_r+0x4f8>
 8004534:	f1b9 0f00 	cmp.w	r9, #0
 8004538:	dd3c      	ble.n	80045b4 <_dtoa_r+0x47c>
 800453a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800453e:	9307      	str	r3, [sp, #28]
 8004540:	2200      	movs	r2, #0
 8004542:	4b91      	ldr	r3, [pc, #580]	; (8004788 <_dtoa_r+0x650>)
 8004544:	4630      	mov	r0, r6
 8004546:	4639      	mov	r1, r7
 8004548:	f7fc f856 	bl	80005f8 <__aeabi_dmul>
 800454c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004550:	3501      	adds	r5, #1
 8004552:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8004556:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800455a:	4628      	mov	r0, r5
 800455c:	f7fb ffe2 	bl	8000524 <__aeabi_i2d>
 8004560:	4632      	mov	r2, r6
 8004562:	463b      	mov	r3, r7
 8004564:	f7fc f848 	bl	80005f8 <__aeabi_dmul>
 8004568:	4b88      	ldr	r3, [pc, #544]	; (800478c <_dtoa_r+0x654>)
 800456a:	2200      	movs	r2, #0
 800456c:	f7fb fe8e 	bl	800028c <__adddf3>
 8004570:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8004574:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004578:	9303      	str	r3, [sp, #12]
 800457a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800457c:	2b00      	cmp	r3, #0
 800457e:	d15c      	bne.n	800463a <_dtoa_r+0x502>
 8004580:	4b83      	ldr	r3, [pc, #524]	; (8004790 <_dtoa_r+0x658>)
 8004582:	2200      	movs	r2, #0
 8004584:	4630      	mov	r0, r6
 8004586:	4639      	mov	r1, r7
 8004588:	f7fb fe7e 	bl	8000288 <__aeabi_dsub>
 800458c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004590:	4606      	mov	r6, r0
 8004592:	460f      	mov	r7, r1
 8004594:	f7fc fac0 	bl	8000b18 <__aeabi_dcmpgt>
 8004598:	2800      	cmp	r0, #0
 800459a:	f040 8296 	bne.w	8004aca <_dtoa_r+0x992>
 800459e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80045a2:	4630      	mov	r0, r6
 80045a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80045a8:	4639      	mov	r1, r7
 80045aa:	f7fc fa97 	bl	8000adc <__aeabi_dcmplt>
 80045ae:	2800      	cmp	r0, #0
 80045b0:	f040 8288 	bne.w	8004ac4 <_dtoa_r+0x98c>
 80045b4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80045b8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80045bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80045be:	2b00      	cmp	r3, #0
 80045c0:	f2c0 8158 	blt.w	8004874 <_dtoa_r+0x73c>
 80045c4:	f1ba 0f0e 	cmp.w	sl, #14
 80045c8:	f300 8154 	bgt.w	8004874 <_dtoa_r+0x73c>
 80045cc:	4b6b      	ldr	r3, [pc, #428]	; (800477c <_dtoa_r+0x644>)
 80045ce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80045d2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80045d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045d8:	2b00      	cmp	r3, #0
 80045da:	f280 80e3 	bge.w	80047a4 <_dtoa_r+0x66c>
 80045de:	9b01      	ldr	r3, [sp, #4]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	f300 80df 	bgt.w	80047a4 <_dtoa_r+0x66c>
 80045e6:	f040 826d 	bne.w	8004ac4 <_dtoa_r+0x98c>
 80045ea:	4b69      	ldr	r3, [pc, #420]	; (8004790 <_dtoa_r+0x658>)
 80045ec:	2200      	movs	r2, #0
 80045ee:	4640      	mov	r0, r8
 80045f0:	4649      	mov	r1, r9
 80045f2:	f7fc f801 	bl	80005f8 <__aeabi_dmul>
 80045f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80045fa:	f7fc fa83 	bl	8000b04 <__aeabi_dcmpge>
 80045fe:	9e01      	ldr	r6, [sp, #4]
 8004600:	4637      	mov	r7, r6
 8004602:	2800      	cmp	r0, #0
 8004604:	f040 8243 	bne.w	8004a8e <_dtoa_r+0x956>
 8004608:	9d00      	ldr	r5, [sp, #0]
 800460a:	2331      	movs	r3, #49	; 0x31
 800460c:	f805 3b01 	strb.w	r3, [r5], #1
 8004610:	f10a 0a01 	add.w	sl, sl, #1
 8004614:	e23f      	b.n	8004a96 <_dtoa_r+0x95e>
 8004616:	07f2      	lsls	r2, r6, #31
 8004618:	d505      	bpl.n	8004626 <_dtoa_r+0x4ee>
 800461a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800461e:	f7fb ffeb 	bl	80005f8 <__aeabi_dmul>
 8004622:	3501      	adds	r5, #1
 8004624:	2301      	movs	r3, #1
 8004626:	1076      	asrs	r6, r6, #1
 8004628:	3708      	adds	r7, #8
 800462a:	e76c      	b.n	8004506 <_dtoa_r+0x3ce>
 800462c:	2502      	movs	r5, #2
 800462e:	e76f      	b.n	8004510 <_dtoa_r+0x3d8>
 8004630:	9b01      	ldr	r3, [sp, #4]
 8004632:	f8cd a01c 	str.w	sl, [sp, #28]
 8004636:	930c      	str	r3, [sp, #48]	; 0x30
 8004638:	e78d      	b.n	8004556 <_dtoa_r+0x41e>
 800463a:	9900      	ldr	r1, [sp, #0]
 800463c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800463e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004640:	4b4e      	ldr	r3, [pc, #312]	; (800477c <_dtoa_r+0x644>)
 8004642:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004646:	4401      	add	r1, r0
 8004648:	9102      	str	r1, [sp, #8]
 800464a:	9908      	ldr	r1, [sp, #32]
 800464c:	eeb0 8a47 	vmov.f32	s16, s14
 8004650:	eef0 8a67 	vmov.f32	s17, s15
 8004654:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004658:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800465c:	2900      	cmp	r1, #0
 800465e:	d045      	beq.n	80046ec <_dtoa_r+0x5b4>
 8004660:	494c      	ldr	r1, [pc, #304]	; (8004794 <_dtoa_r+0x65c>)
 8004662:	2000      	movs	r0, #0
 8004664:	f7fc f8f2 	bl	800084c <__aeabi_ddiv>
 8004668:	ec53 2b18 	vmov	r2, r3, d8
 800466c:	f7fb fe0c 	bl	8000288 <__aeabi_dsub>
 8004670:	9d00      	ldr	r5, [sp, #0]
 8004672:	ec41 0b18 	vmov	d8, r0, r1
 8004676:	4639      	mov	r1, r7
 8004678:	4630      	mov	r0, r6
 800467a:	f7fc fa6d 	bl	8000b58 <__aeabi_d2iz>
 800467e:	900c      	str	r0, [sp, #48]	; 0x30
 8004680:	f7fb ff50 	bl	8000524 <__aeabi_i2d>
 8004684:	4602      	mov	r2, r0
 8004686:	460b      	mov	r3, r1
 8004688:	4630      	mov	r0, r6
 800468a:	4639      	mov	r1, r7
 800468c:	f7fb fdfc 	bl	8000288 <__aeabi_dsub>
 8004690:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004692:	3330      	adds	r3, #48	; 0x30
 8004694:	f805 3b01 	strb.w	r3, [r5], #1
 8004698:	ec53 2b18 	vmov	r2, r3, d8
 800469c:	4606      	mov	r6, r0
 800469e:	460f      	mov	r7, r1
 80046a0:	f7fc fa1c 	bl	8000adc <__aeabi_dcmplt>
 80046a4:	2800      	cmp	r0, #0
 80046a6:	d165      	bne.n	8004774 <_dtoa_r+0x63c>
 80046a8:	4632      	mov	r2, r6
 80046aa:	463b      	mov	r3, r7
 80046ac:	4935      	ldr	r1, [pc, #212]	; (8004784 <_dtoa_r+0x64c>)
 80046ae:	2000      	movs	r0, #0
 80046b0:	f7fb fdea 	bl	8000288 <__aeabi_dsub>
 80046b4:	ec53 2b18 	vmov	r2, r3, d8
 80046b8:	f7fc fa10 	bl	8000adc <__aeabi_dcmplt>
 80046bc:	2800      	cmp	r0, #0
 80046be:	f040 80b9 	bne.w	8004834 <_dtoa_r+0x6fc>
 80046c2:	9b02      	ldr	r3, [sp, #8]
 80046c4:	429d      	cmp	r5, r3
 80046c6:	f43f af75 	beq.w	80045b4 <_dtoa_r+0x47c>
 80046ca:	4b2f      	ldr	r3, [pc, #188]	; (8004788 <_dtoa_r+0x650>)
 80046cc:	ec51 0b18 	vmov	r0, r1, d8
 80046d0:	2200      	movs	r2, #0
 80046d2:	f7fb ff91 	bl	80005f8 <__aeabi_dmul>
 80046d6:	4b2c      	ldr	r3, [pc, #176]	; (8004788 <_dtoa_r+0x650>)
 80046d8:	ec41 0b18 	vmov	d8, r0, r1
 80046dc:	2200      	movs	r2, #0
 80046de:	4630      	mov	r0, r6
 80046e0:	4639      	mov	r1, r7
 80046e2:	f7fb ff89 	bl	80005f8 <__aeabi_dmul>
 80046e6:	4606      	mov	r6, r0
 80046e8:	460f      	mov	r7, r1
 80046ea:	e7c4      	b.n	8004676 <_dtoa_r+0x53e>
 80046ec:	ec51 0b17 	vmov	r0, r1, d7
 80046f0:	f7fb ff82 	bl	80005f8 <__aeabi_dmul>
 80046f4:	9b02      	ldr	r3, [sp, #8]
 80046f6:	9d00      	ldr	r5, [sp, #0]
 80046f8:	930c      	str	r3, [sp, #48]	; 0x30
 80046fa:	ec41 0b18 	vmov	d8, r0, r1
 80046fe:	4639      	mov	r1, r7
 8004700:	4630      	mov	r0, r6
 8004702:	f7fc fa29 	bl	8000b58 <__aeabi_d2iz>
 8004706:	9011      	str	r0, [sp, #68]	; 0x44
 8004708:	f7fb ff0c 	bl	8000524 <__aeabi_i2d>
 800470c:	4602      	mov	r2, r0
 800470e:	460b      	mov	r3, r1
 8004710:	4630      	mov	r0, r6
 8004712:	4639      	mov	r1, r7
 8004714:	f7fb fdb8 	bl	8000288 <__aeabi_dsub>
 8004718:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800471a:	3330      	adds	r3, #48	; 0x30
 800471c:	f805 3b01 	strb.w	r3, [r5], #1
 8004720:	9b02      	ldr	r3, [sp, #8]
 8004722:	429d      	cmp	r5, r3
 8004724:	4606      	mov	r6, r0
 8004726:	460f      	mov	r7, r1
 8004728:	f04f 0200 	mov.w	r2, #0
 800472c:	d134      	bne.n	8004798 <_dtoa_r+0x660>
 800472e:	4b19      	ldr	r3, [pc, #100]	; (8004794 <_dtoa_r+0x65c>)
 8004730:	ec51 0b18 	vmov	r0, r1, d8
 8004734:	f7fb fdaa 	bl	800028c <__adddf3>
 8004738:	4602      	mov	r2, r0
 800473a:	460b      	mov	r3, r1
 800473c:	4630      	mov	r0, r6
 800473e:	4639      	mov	r1, r7
 8004740:	f7fc f9ea 	bl	8000b18 <__aeabi_dcmpgt>
 8004744:	2800      	cmp	r0, #0
 8004746:	d175      	bne.n	8004834 <_dtoa_r+0x6fc>
 8004748:	ec53 2b18 	vmov	r2, r3, d8
 800474c:	4911      	ldr	r1, [pc, #68]	; (8004794 <_dtoa_r+0x65c>)
 800474e:	2000      	movs	r0, #0
 8004750:	f7fb fd9a 	bl	8000288 <__aeabi_dsub>
 8004754:	4602      	mov	r2, r0
 8004756:	460b      	mov	r3, r1
 8004758:	4630      	mov	r0, r6
 800475a:	4639      	mov	r1, r7
 800475c:	f7fc f9be 	bl	8000adc <__aeabi_dcmplt>
 8004760:	2800      	cmp	r0, #0
 8004762:	f43f af27 	beq.w	80045b4 <_dtoa_r+0x47c>
 8004766:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004768:	1e6b      	subs	r3, r5, #1
 800476a:	930c      	str	r3, [sp, #48]	; 0x30
 800476c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004770:	2b30      	cmp	r3, #48	; 0x30
 8004772:	d0f8      	beq.n	8004766 <_dtoa_r+0x62e>
 8004774:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8004778:	e04a      	b.n	8004810 <_dtoa_r+0x6d8>
 800477a:	bf00      	nop
 800477c:	080062b0 	.word	0x080062b0
 8004780:	08006288 	.word	0x08006288
 8004784:	3ff00000 	.word	0x3ff00000
 8004788:	40240000 	.word	0x40240000
 800478c:	401c0000 	.word	0x401c0000
 8004790:	40140000 	.word	0x40140000
 8004794:	3fe00000 	.word	0x3fe00000
 8004798:	4baf      	ldr	r3, [pc, #700]	; (8004a58 <_dtoa_r+0x920>)
 800479a:	f7fb ff2d 	bl	80005f8 <__aeabi_dmul>
 800479e:	4606      	mov	r6, r0
 80047a0:	460f      	mov	r7, r1
 80047a2:	e7ac      	b.n	80046fe <_dtoa_r+0x5c6>
 80047a4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80047a8:	9d00      	ldr	r5, [sp, #0]
 80047aa:	4642      	mov	r2, r8
 80047ac:	464b      	mov	r3, r9
 80047ae:	4630      	mov	r0, r6
 80047b0:	4639      	mov	r1, r7
 80047b2:	f7fc f84b 	bl	800084c <__aeabi_ddiv>
 80047b6:	f7fc f9cf 	bl	8000b58 <__aeabi_d2iz>
 80047ba:	9002      	str	r0, [sp, #8]
 80047bc:	f7fb feb2 	bl	8000524 <__aeabi_i2d>
 80047c0:	4642      	mov	r2, r8
 80047c2:	464b      	mov	r3, r9
 80047c4:	f7fb ff18 	bl	80005f8 <__aeabi_dmul>
 80047c8:	4602      	mov	r2, r0
 80047ca:	460b      	mov	r3, r1
 80047cc:	4630      	mov	r0, r6
 80047ce:	4639      	mov	r1, r7
 80047d0:	f7fb fd5a 	bl	8000288 <__aeabi_dsub>
 80047d4:	9e02      	ldr	r6, [sp, #8]
 80047d6:	9f01      	ldr	r7, [sp, #4]
 80047d8:	3630      	adds	r6, #48	; 0x30
 80047da:	f805 6b01 	strb.w	r6, [r5], #1
 80047de:	9e00      	ldr	r6, [sp, #0]
 80047e0:	1bae      	subs	r6, r5, r6
 80047e2:	42b7      	cmp	r7, r6
 80047e4:	4602      	mov	r2, r0
 80047e6:	460b      	mov	r3, r1
 80047e8:	d137      	bne.n	800485a <_dtoa_r+0x722>
 80047ea:	f7fb fd4f 	bl	800028c <__adddf3>
 80047ee:	4642      	mov	r2, r8
 80047f0:	464b      	mov	r3, r9
 80047f2:	4606      	mov	r6, r0
 80047f4:	460f      	mov	r7, r1
 80047f6:	f7fc f98f 	bl	8000b18 <__aeabi_dcmpgt>
 80047fa:	b9c8      	cbnz	r0, 8004830 <_dtoa_r+0x6f8>
 80047fc:	4642      	mov	r2, r8
 80047fe:	464b      	mov	r3, r9
 8004800:	4630      	mov	r0, r6
 8004802:	4639      	mov	r1, r7
 8004804:	f7fc f960 	bl	8000ac8 <__aeabi_dcmpeq>
 8004808:	b110      	cbz	r0, 8004810 <_dtoa_r+0x6d8>
 800480a:	9b02      	ldr	r3, [sp, #8]
 800480c:	07d9      	lsls	r1, r3, #31
 800480e:	d40f      	bmi.n	8004830 <_dtoa_r+0x6f8>
 8004810:	4620      	mov	r0, r4
 8004812:	4659      	mov	r1, fp
 8004814:	f000 fad6 	bl	8004dc4 <_Bfree>
 8004818:	2300      	movs	r3, #0
 800481a:	702b      	strb	r3, [r5, #0]
 800481c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800481e:	f10a 0001 	add.w	r0, sl, #1
 8004822:	6018      	str	r0, [r3, #0]
 8004824:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004826:	2b00      	cmp	r3, #0
 8004828:	f43f acd8 	beq.w	80041dc <_dtoa_r+0xa4>
 800482c:	601d      	str	r5, [r3, #0]
 800482e:	e4d5      	b.n	80041dc <_dtoa_r+0xa4>
 8004830:	f8cd a01c 	str.w	sl, [sp, #28]
 8004834:	462b      	mov	r3, r5
 8004836:	461d      	mov	r5, r3
 8004838:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800483c:	2a39      	cmp	r2, #57	; 0x39
 800483e:	d108      	bne.n	8004852 <_dtoa_r+0x71a>
 8004840:	9a00      	ldr	r2, [sp, #0]
 8004842:	429a      	cmp	r2, r3
 8004844:	d1f7      	bne.n	8004836 <_dtoa_r+0x6fe>
 8004846:	9a07      	ldr	r2, [sp, #28]
 8004848:	9900      	ldr	r1, [sp, #0]
 800484a:	3201      	adds	r2, #1
 800484c:	9207      	str	r2, [sp, #28]
 800484e:	2230      	movs	r2, #48	; 0x30
 8004850:	700a      	strb	r2, [r1, #0]
 8004852:	781a      	ldrb	r2, [r3, #0]
 8004854:	3201      	adds	r2, #1
 8004856:	701a      	strb	r2, [r3, #0]
 8004858:	e78c      	b.n	8004774 <_dtoa_r+0x63c>
 800485a:	4b7f      	ldr	r3, [pc, #508]	; (8004a58 <_dtoa_r+0x920>)
 800485c:	2200      	movs	r2, #0
 800485e:	f7fb fecb 	bl	80005f8 <__aeabi_dmul>
 8004862:	2200      	movs	r2, #0
 8004864:	2300      	movs	r3, #0
 8004866:	4606      	mov	r6, r0
 8004868:	460f      	mov	r7, r1
 800486a:	f7fc f92d 	bl	8000ac8 <__aeabi_dcmpeq>
 800486e:	2800      	cmp	r0, #0
 8004870:	d09b      	beq.n	80047aa <_dtoa_r+0x672>
 8004872:	e7cd      	b.n	8004810 <_dtoa_r+0x6d8>
 8004874:	9a08      	ldr	r2, [sp, #32]
 8004876:	2a00      	cmp	r2, #0
 8004878:	f000 80c4 	beq.w	8004a04 <_dtoa_r+0x8cc>
 800487c:	9a05      	ldr	r2, [sp, #20]
 800487e:	2a01      	cmp	r2, #1
 8004880:	f300 80a8 	bgt.w	80049d4 <_dtoa_r+0x89c>
 8004884:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004886:	2a00      	cmp	r2, #0
 8004888:	f000 80a0 	beq.w	80049cc <_dtoa_r+0x894>
 800488c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004890:	9e06      	ldr	r6, [sp, #24]
 8004892:	4645      	mov	r5, r8
 8004894:	9a04      	ldr	r2, [sp, #16]
 8004896:	2101      	movs	r1, #1
 8004898:	441a      	add	r2, r3
 800489a:	4620      	mov	r0, r4
 800489c:	4498      	add	r8, r3
 800489e:	9204      	str	r2, [sp, #16]
 80048a0:	f000 fb4c 	bl	8004f3c <__i2b>
 80048a4:	4607      	mov	r7, r0
 80048a6:	2d00      	cmp	r5, #0
 80048a8:	dd0b      	ble.n	80048c2 <_dtoa_r+0x78a>
 80048aa:	9b04      	ldr	r3, [sp, #16]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	dd08      	ble.n	80048c2 <_dtoa_r+0x78a>
 80048b0:	42ab      	cmp	r3, r5
 80048b2:	9a04      	ldr	r2, [sp, #16]
 80048b4:	bfa8      	it	ge
 80048b6:	462b      	movge	r3, r5
 80048b8:	eba8 0803 	sub.w	r8, r8, r3
 80048bc:	1aed      	subs	r5, r5, r3
 80048be:	1ad3      	subs	r3, r2, r3
 80048c0:	9304      	str	r3, [sp, #16]
 80048c2:	9b06      	ldr	r3, [sp, #24]
 80048c4:	b1fb      	cbz	r3, 8004906 <_dtoa_r+0x7ce>
 80048c6:	9b08      	ldr	r3, [sp, #32]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	f000 809f 	beq.w	8004a0c <_dtoa_r+0x8d4>
 80048ce:	2e00      	cmp	r6, #0
 80048d0:	dd11      	ble.n	80048f6 <_dtoa_r+0x7be>
 80048d2:	4639      	mov	r1, r7
 80048d4:	4632      	mov	r2, r6
 80048d6:	4620      	mov	r0, r4
 80048d8:	f000 fbec 	bl	80050b4 <__pow5mult>
 80048dc:	465a      	mov	r2, fp
 80048de:	4601      	mov	r1, r0
 80048e0:	4607      	mov	r7, r0
 80048e2:	4620      	mov	r0, r4
 80048e4:	f000 fb40 	bl	8004f68 <__multiply>
 80048e8:	4659      	mov	r1, fp
 80048ea:	9007      	str	r0, [sp, #28]
 80048ec:	4620      	mov	r0, r4
 80048ee:	f000 fa69 	bl	8004dc4 <_Bfree>
 80048f2:	9b07      	ldr	r3, [sp, #28]
 80048f4:	469b      	mov	fp, r3
 80048f6:	9b06      	ldr	r3, [sp, #24]
 80048f8:	1b9a      	subs	r2, r3, r6
 80048fa:	d004      	beq.n	8004906 <_dtoa_r+0x7ce>
 80048fc:	4659      	mov	r1, fp
 80048fe:	4620      	mov	r0, r4
 8004900:	f000 fbd8 	bl	80050b4 <__pow5mult>
 8004904:	4683      	mov	fp, r0
 8004906:	2101      	movs	r1, #1
 8004908:	4620      	mov	r0, r4
 800490a:	f000 fb17 	bl	8004f3c <__i2b>
 800490e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004910:	2b00      	cmp	r3, #0
 8004912:	4606      	mov	r6, r0
 8004914:	dd7c      	ble.n	8004a10 <_dtoa_r+0x8d8>
 8004916:	461a      	mov	r2, r3
 8004918:	4601      	mov	r1, r0
 800491a:	4620      	mov	r0, r4
 800491c:	f000 fbca 	bl	80050b4 <__pow5mult>
 8004920:	9b05      	ldr	r3, [sp, #20]
 8004922:	2b01      	cmp	r3, #1
 8004924:	4606      	mov	r6, r0
 8004926:	dd76      	ble.n	8004a16 <_dtoa_r+0x8de>
 8004928:	2300      	movs	r3, #0
 800492a:	9306      	str	r3, [sp, #24]
 800492c:	6933      	ldr	r3, [r6, #16]
 800492e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004932:	6918      	ldr	r0, [r3, #16]
 8004934:	f000 fab2 	bl	8004e9c <__hi0bits>
 8004938:	f1c0 0020 	rsb	r0, r0, #32
 800493c:	9b04      	ldr	r3, [sp, #16]
 800493e:	4418      	add	r0, r3
 8004940:	f010 001f 	ands.w	r0, r0, #31
 8004944:	f000 8086 	beq.w	8004a54 <_dtoa_r+0x91c>
 8004948:	f1c0 0320 	rsb	r3, r0, #32
 800494c:	2b04      	cmp	r3, #4
 800494e:	dd7f      	ble.n	8004a50 <_dtoa_r+0x918>
 8004950:	f1c0 001c 	rsb	r0, r0, #28
 8004954:	9b04      	ldr	r3, [sp, #16]
 8004956:	4403      	add	r3, r0
 8004958:	4480      	add	r8, r0
 800495a:	4405      	add	r5, r0
 800495c:	9304      	str	r3, [sp, #16]
 800495e:	f1b8 0f00 	cmp.w	r8, #0
 8004962:	dd05      	ble.n	8004970 <_dtoa_r+0x838>
 8004964:	4659      	mov	r1, fp
 8004966:	4642      	mov	r2, r8
 8004968:	4620      	mov	r0, r4
 800496a:	f000 fbfd 	bl	8005168 <__lshift>
 800496e:	4683      	mov	fp, r0
 8004970:	9b04      	ldr	r3, [sp, #16]
 8004972:	2b00      	cmp	r3, #0
 8004974:	dd05      	ble.n	8004982 <_dtoa_r+0x84a>
 8004976:	4631      	mov	r1, r6
 8004978:	461a      	mov	r2, r3
 800497a:	4620      	mov	r0, r4
 800497c:	f000 fbf4 	bl	8005168 <__lshift>
 8004980:	4606      	mov	r6, r0
 8004982:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004984:	2b00      	cmp	r3, #0
 8004986:	d069      	beq.n	8004a5c <_dtoa_r+0x924>
 8004988:	4631      	mov	r1, r6
 800498a:	4658      	mov	r0, fp
 800498c:	f000 fc58 	bl	8005240 <__mcmp>
 8004990:	2800      	cmp	r0, #0
 8004992:	da63      	bge.n	8004a5c <_dtoa_r+0x924>
 8004994:	2300      	movs	r3, #0
 8004996:	4659      	mov	r1, fp
 8004998:	220a      	movs	r2, #10
 800499a:	4620      	mov	r0, r4
 800499c:	f000 fa34 	bl	8004e08 <__multadd>
 80049a0:	9b08      	ldr	r3, [sp, #32]
 80049a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80049a6:	4683      	mov	fp, r0
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	f000 818f 	beq.w	8004ccc <_dtoa_r+0xb94>
 80049ae:	4639      	mov	r1, r7
 80049b0:	2300      	movs	r3, #0
 80049b2:	220a      	movs	r2, #10
 80049b4:	4620      	mov	r0, r4
 80049b6:	f000 fa27 	bl	8004e08 <__multadd>
 80049ba:	f1b9 0f00 	cmp.w	r9, #0
 80049be:	4607      	mov	r7, r0
 80049c0:	f300 808e 	bgt.w	8004ae0 <_dtoa_r+0x9a8>
 80049c4:	9b05      	ldr	r3, [sp, #20]
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	dc50      	bgt.n	8004a6c <_dtoa_r+0x934>
 80049ca:	e089      	b.n	8004ae0 <_dtoa_r+0x9a8>
 80049cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80049ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80049d2:	e75d      	b.n	8004890 <_dtoa_r+0x758>
 80049d4:	9b01      	ldr	r3, [sp, #4]
 80049d6:	1e5e      	subs	r6, r3, #1
 80049d8:	9b06      	ldr	r3, [sp, #24]
 80049da:	42b3      	cmp	r3, r6
 80049dc:	bfbf      	itttt	lt
 80049de:	9b06      	ldrlt	r3, [sp, #24]
 80049e0:	9606      	strlt	r6, [sp, #24]
 80049e2:	1af2      	sublt	r2, r6, r3
 80049e4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80049e6:	bfb6      	itet	lt
 80049e8:	189b      	addlt	r3, r3, r2
 80049ea:	1b9e      	subge	r6, r3, r6
 80049ec:	930d      	strlt	r3, [sp, #52]	; 0x34
 80049ee:	9b01      	ldr	r3, [sp, #4]
 80049f0:	bfb8      	it	lt
 80049f2:	2600      	movlt	r6, #0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	bfb5      	itete	lt
 80049f8:	eba8 0503 	sublt.w	r5, r8, r3
 80049fc:	9b01      	ldrge	r3, [sp, #4]
 80049fe:	2300      	movlt	r3, #0
 8004a00:	4645      	movge	r5, r8
 8004a02:	e747      	b.n	8004894 <_dtoa_r+0x75c>
 8004a04:	9e06      	ldr	r6, [sp, #24]
 8004a06:	9f08      	ldr	r7, [sp, #32]
 8004a08:	4645      	mov	r5, r8
 8004a0a:	e74c      	b.n	80048a6 <_dtoa_r+0x76e>
 8004a0c:	9a06      	ldr	r2, [sp, #24]
 8004a0e:	e775      	b.n	80048fc <_dtoa_r+0x7c4>
 8004a10:	9b05      	ldr	r3, [sp, #20]
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	dc18      	bgt.n	8004a48 <_dtoa_r+0x910>
 8004a16:	9b02      	ldr	r3, [sp, #8]
 8004a18:	b9b3      	cbnz	r3, 8004a48 <_dtoa_r+0x910>
 8004a1a:	9b03      	ldr	r3, [sp, #12]
 8004a1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a20:	b9a3      	cbnz	r3, 8004a4c <_dtoa_r+0x914>
 8004a22:	9b03      	ldr	r3, [sp, #12]
 8004a24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004a28:	0d1b      	lsrs	r3, r3, #20
 8004a2a:	051b      	lsls	r3, r3, #20
 8004a2c:	b12b      	cbz	r3, 8004a3a <_dtoa_r+0x902>
 8004a2e:	9b04      	ldr	r3, [sp, #16]
 8004a30:	3301      	adds	r3, #1
 8004a32:	9304      	str	r3, [sp, #16]
 8004a34:	f108 0801 	add.w	r8, r8, #1
 8004a38:	2301      	movs	r3, #1
 8004a3a:	9306      	str	r3, [sp, #24]
 8004a3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	f47f af74 	bne.w	800492c <_dtoa_r+0x7f4>
 8004a44:	2001      	movs	r0, #1
 8004a46:	e779      	b.n	800493c <_dtoa_r+0x804>
 8004a48:	2300      	movs	r3, #0
 8004a4a:	e7f6      	b.n	8004a3a <_dtoa_r+0x902>
 8004a4c:	9b02      	ldr	r3, [sp, #8]
 8004a4e:	e7f4      	b.n	8004a3a <_dtoa_r+0x902>
 8004a50:	d085      	beq.n	800495e <_dtoa_r+0x826>
 8004a52:	4618      	mov	r0, r3
 8004a54:	301c      	adds	r0, #28
 8004a56:	e77d      	b.n	8004954 <_dtoa_r+0x81c>
 8004a58:	40240000 	.word	0x40240000
 8004a5c:	9b01      	ldr	r3, [sp, #4]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	dc38      	bgt.n	8004ad4 <_dtoa_r+0x99c>
 8004a62:	9b05      	ldr	r3, [sp, #20]
 8004a64:	2b02      	cmp	r3, #2
 8004a66:	dd35      	ble.n	8004ad4 <_dtoa_r+0x99c>
 8004a68:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8004a6c:	f1b9 0f00 	cmp.w	r9, #0
 8004a70:	d10d      	bne.n	8004a8e <_dtoa_r+0x956>
 8004a72:	4631      	mov	r1, r6
 8004a74:	464b      	mov	r3, r9
 8004a76:	2205      	movs	r2, #5
 8004a78:	4620      	mov	r0, r4
 8004a7a:	f000 f9c5 	bl	8004e08 <__multadd>
 8004a7e:	4601      	mov	r1, r0
 8004a80:	4606      	mov	r6, r0
 8004a82:	4658      	mov	r0, fp
 8004a84:	f000 fbdc 	bl	8005240 <__mcmp>
 8004a88:	2800      	cmp	r0, #0
 8004a8a:	f73f adbd 	bgt.w	8004608 <_dtoa_r+0x4d0>
 8004a8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a90:	9d00      	ldr	r5, [sp, #0]
 8004a92:	ea6f 0a03 	mvn.w	sl, r3
 8004a96:	f04f 0800 	mov.w	r8, #0
 8004a9a:	4631      	mov	r1, r6
 8004a9c:	4620      	mov	r0, r4
 8004a9e:	f000 f991 	bl	8004dc4 <_Bfree>
 8004aa2:	2f00      	cmp	r7, #0
 8004aa4:	f43f aeb4 	beq.w	8004810 <_dtoa_r+0x6d8>
 8004aa8:	f1b8 0f00 	cmp.w	r8, #0
 8004aac:	d005      	beq.n	8004aba <_dtoa_r+0x982>
 8004aae:	45b8      	cmp	r8, r7
 8004ab0:	d003      	beq.n	8004aba <_dtoa_r+0x982>
 8004ab2:	4641      	mov	r1, r8
 8004ab4:	4620      	mov	r0, r4
 8004ab6:	f000 f985 	bl	8004dc4 <_Bfree>
 8004aba:	4639      	mov	r1, r7
 8004abc:	4620      	mov	r0, r4
 8004abe:	f000 f981 	bl	8004dc4 <_Bfree>
 8004ac2:	e6a5      	b.n	8004810 <_dtoa_r+0x6d8>
 8004ac4:	2600      	movs	r6, #0
 8004ac6:	4637      	mov	r7, r6
 8004ac8:	e7e1      	b.n	8004a8e <_dtoa_r+0x956>
 8004aca:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8004acc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8004ad0:	4637      	mov	r7, r6
 8004ad2:	e599      	b.n	8004608 <_dtoa_r+0x4d0>
 8004ad4:	9b08      	ldr	r3, [sp, #32]
 8004ad6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	f000 80fd 	beq.w	8004cda <_dtoa_r+0xba2>
 8004ae0:	2d00      	cmp	r5, #0
 8004ae2:	dd05      	ble.n	8004af0 <_dtoa_r+0x9b8>
 8004ae4:	4639      	mov	r1, r7
 8004ae6:	462a      	mov	r2, r5
 8004ae8:	4620      	mov	r0, r4
 8004aea:	f000 fb3d 	bl	8005168 <__lshift>
 8004aee:	4607      	mov	r7, r0
 8004af0:	9b06      	ldr	r3, [sp, #24]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d05c      	beq.n	8004bb0 <_dtoa_r+0xa78>
 8004af6:	6879      	ldr	r1, [r7, #4]
 8004af8:	4620      	mov	r0, r4
 8004afa:	f000 f923 	bl	8004d44 <_Balloc>
 8004afe:	4605      	mov	r5, r0
 8004b00:	b928      	cbnz	r0, 8004b0e <_dtoa_r+0x9d6>
 8004b02:	4b80      	ldr	r3, [pc, #512]	; (8004d04 <_dtoa_r+0xbcc>)
 8004b04:	4602      	mov	r2, r0
 8004b06:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004b0a:	f7ff bb2e 	b.w	800416a <_dtoa_r+0x32>
 8004b0e:	693a      	ldr	r2, [r7, #16]
 8004b10:	3202      	adds	r2, #2
 8004b12:	0092      	lsls	r2, r2, #2
 8004b14:	f107 010c 	add.w	r1, r7, #12
 8004b18:	300c      	adds	r0, #12
 8004b1a:	f000 f905 	bl	8004d28 <memcpy>
 8004b1e:	2201      	movs	r2, #1
 8004b20:	4629      	mov	r1, r5
 8004b22:	4620      	mov	r0, r4
 8004b24:	f000 fb20 	bl	8005168 <__lshift>
 8004b28:	9b00      	ldr	r3, [sp, #0]
 8004b2a:	3301      	adds	r3, #1
 8004b2c:	9301      	str	r3, [sp, #4]
 8004b2e:	9b00      	ldr	r3, [sp, #0]
 8004b30:	444b      	add	r3, r9
 8004b32:	9307      	str	r3, [sp, #28]
 8004b34:	9b02      	ldr	r3, [sp, #8]
 8004b36:	f003 0301 	and.w	r3, r3, #1
 8004b3a:	46b8      	mov	r8, r7
 8004b3c:	9306      	str	r3, [sp, #24]
 8004b3e:	4607      	mov	r7, r0
 8004b40:	9b01      	ldr	r3, [sp, #4]
 8004b42:	4631      	mov	r1, r6
 8004b44:	3b01      	subs	r3, #1
 8004b46:	4658      	mov	r0, fp
 8004b48:	9302      	str	r3, [sp, #8]
 8004b4a:	f7ff fa67 	bl	800401c <quorem>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	3330      	adds	r3, #48	; 0x30
 8004b52:	9004      	str	r0, [sp, #16]
 8004b54:	4641      	mov	r1, r8
 8004b56:	4658      	mov	r0, fp
 8004b58:	9308      	str	r3, [sp, #32]
 8004b5a:	f000 fb71 	bl	8005240 <__mcmp>
 8004b5e:	463a      	mov	r2, r7
 8004b60:	4681      	mov	r9, r0
 8004b62:	4631      	mov	r1, r6
 8004b64:	4620      	mov	r0, r4
 8004b66:	f000 fb87 	bl	8005278 <__mdiff>
 8004b6a:	68c2      	ldr	r2, [r0, #12]
 8004b6c:	9b08      	ldr	r3, [sp, #32]
 8004b6e:	4605      	mov	r5, r0
 8004b70:	bb02      	cbnz	r2, 8004bb4 <_dtoa_r+0xa7c>
 8004b72:	4601      	mov	r1, r0
 8004b74:	4658      	mov	r0, fp
 8004b76:	f000 fb63 	bl	8005240 <__mcmp>
 8004b7a:	9b08      	ldr	r3, [sp, #32]
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	4629      	mov	r1, r5
 8004b80:	4620      	mov	r0, r4
 8004b82:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8004b86:	f000 f91d 	bl	8004dc4 <_Bfree>
 8004b8a:	9b05      	ldr	r3, [sp, #20]
 8004b8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004b8e:	9d01      	ldr	r5, [sp, #4]
 8004b90:	ea43 0102 	orr.w	r1, r3, r2
 8004b94:	9b06      	ldr	r3, [sp, #24]
 8004b96:	430b      	orrs	r3, r1
 8004b98:	9b08      	ldr	r3, [sp, #32]
 8004b9a:	d10d      	bne.n	8004bb8 <_dtoa_r+0xa80>
 8004b9c:	2b39      	cmp	r3, #57	; 0x39
 8004b9e:	d029      	beq.n	8004bf4 <_dtoa_r+0xabc>
 8004ba0:	f1b9 0f00 	cmp.w	r9, #0
 8004ba4:	dd01      	ble.n	8004baa <_dtoa_r+0xa72>
 8004ba6:	9b04      	ldr	r3, [sp, #16]
 8004ba8:	3331      	adds	r3, #49	; 0x31
 8004baa:	9a02      	ldr	r2, [sp, #8]
 8004bac:	7013      	strb	r3, [r2, #0]
 8004bae:	e774      	b.n	8004a9a <_dtoa_r+0x962>
 8004bb0:	4638      	mov	r0, r7
 8004bb2:	e7b9      	b.n	8004b28 <_dtoa_r+0x9f0>
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	e7e2      	b.n	8004b7e <_dtoa_r+0xa46>
 8004bb8:	f1b9 0f00 	cmp.w	r9, #0
 8004bbc:	db06      	blt.n	8004bcc <_dtoa_r+0xa94>
 8004bbe:	9905      	ldr	r1, [sp, #20]
 8004bc0:	ea41 0909 	orr.w	r9, r1, r9
 8004bc4:	9906      	ldr	r1, [sp, #24]
 8004bc6:	ea59 0101 	orrs.w	r1, r9, r1
 8004bca:	d120      	bne.n	8004c0e <_dtoa_r+0xad6>
 8004bcc:	2a00      	cmp	r2, #0
 8004bce:	ddec      	ble.n	8004baa <_dtoa_r+0xa72>
 8004bd0:	4659      	mov	r1, fp
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	4620      	mov	r0, r4
 8004bd6:	9301      	str	r3, [sp, #4]
 8004bd8:	f000 fac6 	bl	8005168 <__lshift>
 8004bdc:	4631      	mov	r1, r6
 8004bde:	4683      	mov	fp, r0
 8004be0:	f000 fb2e 	bl	8005240 <__mcmp>
 8004be4:	2800      	cmp	r0, #0
 8004be6:	9b01      	ldr	r3, [sp, #4]
 8004be8:	dc02      	bgt.n	8004bf0 <_dtoa_r+0xab8>
 8004bea:	d1de      	bne.n	8004baa <_dtoa_r+0xa72>
 8004bec:	07da      	lsls	r2, r3, #31
 8004bee:	d5dc      	bpl.n	8004baa <_dtoa_r+0xa72>
 8004bf0:	2b39      	cmp	r3, #57	; 0x39
 8004bf2:	d1d8      	bne.n	8004ba6 <_dtoa_r+0xa6e>
 8004bf4:	9a02      	ldr	r2, [sp, #8]
 8004bf6:	2339      	movs	r3, #57	; 0x39
 8004bf8:	7013      	strb	r3, [r2, #0]
 8004bfa:	462b      	mov	r3, r5
 8004bfc:	461d      	mov	r5, r3
 8004bfe:	3b01      	subs	r3, #1
 8004c00:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004c04:	2a39      	cmp	r2, #57	; 0x39
 8004c06:	d050      	beq.n	8004caa <_dtoa_r+0xb72>
 8004c08:	3201      	adds	r2, #1
 8004c0a:	701a      	strb	r2, [r3, #0]
 8004c0c:	e745      	b.n	8004a9a <_dtoa_r+0x962>
 8004c0e:	2a00      	cmp	r2, #0
 8004c10:	dd03      	ble.n	8004c1a <_dtoa_r+0xae2>
 8004c12:	2b39      	cmp	r3, #57	; 0x39
 8004c14:	d0ee      	beq.n	8004bf4 <_dtoa_r+0xabc>
 8004c16:	3301      	adds	r3, #1
 8004c18:	e7c7      	b.n	8004baa <_dtoa_r+0xa72>
 8004c1a:	9a01      	ldr	r2, [sp, #4]
 8004c1c:	9907      	ldr	r1, [sp, #28]
 8004c1e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004c22:	428a      	cmp	r2, r1
 8004c24:	d02a      	beq.n	8004c7c <_dtoa_r+0xb44>
 8004c26:	4659      	mov	r1, fp
 8004c28:	2300      	movs	r3, #0
 8004c2a:	220a      	movs	r2, #10
 8004c2c:	4620      	mov	r0, r4
 8004c2e:	f000 f8eb 	bl	8004e08 <__multadd>
 8004c32:	45b8      	cmp	r8, r7
 8004c34:	4683      	mov	fp, r0
 8004c36:	f04f 0300 	mov.w	r3, #0
 8004c3a:	f04f 020a 	mov.w	r2, #10
 8004c3e:	4641      	mov	r1, r8
 8004c40:	4620      	mov	r0, r4
 8004c42:	d107      	bne.n	8004c54 <_dtoa_r+0xb1c>
 8004c44:	f000 f8e0 	bl	8004e08 <__multadd>
 8004c48:	4680      	mov	r8, r0
 8004c4a:	4607      	mov	r7, r0
 8004c4c:	9b01      	ldr	r3, [sp, #4]
 8004c4e:	3301      	adds	r3, #1
 8004c50:	9301      	str	r3, [sp, #4]
 8004c52:	e775      	b.n	8004b40 <_dtoa_r+0xa08>
 8004c54:	f000 f8d8 	bl	8004e08 <__multadd>
 8004c58:	4639      	mov	r1, r7
 8004c5a:	4680      	mov	r8, r0
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	220a      	movs	r2, #10
 8004c60:	4620      	mov	r0, r4
 8004c62:	f000 f8d1 	bl	8004e08 <__multadd>
 8004c66:	4607      	mov	r7, r0
 8004c68:	e7f0      	b.n	8004c4c <_dtoa_r+0xb14>
 8004c6a:	f1b9 0f00 	cmp.w	r9, #0
 8004c6e:	9a00      	ldr	r2, [sp, #0]
 8004c70:	bfcc      	ite	gt
 8004c72:	464d      	movgt	r5, r9
 8004c74:	2501      	movle	r5, #1
 8004c76:	4415      	add	r5, r2
 8004c78:	f04f 0800 	mov.w	r8, #0
 8004c7c:	4659      	mov	r1, fp
 8004c7e:	2201      	movs	r2, #1
 8004c80:	4620      	mov	r0, r4
 8004c82:	9301      	str	r3, [sp, #4]
 8004c84:	f000 fa70 	bl	8005168 <__lshift>
 8004c88:	4631      	mov	r1, r6
 8004c8a:	4683      	mov	fp, r0
 8004c8c:	f000 fad8 	bl	8005240 <__mcmp>
 8004c90:	2800      	cmp	r0, #0
 8004c92:	dcb2      	bgt.n	8004bfa <_dtoa_r+0xac2>
 8004c94:	d102      	bne.n	8004c9c <_dtoa_r+0xb64>
 8004c96:	9b01      	ldr	r3, [sp, #4]
 8004c98:	07db      	lsls	r3, r3, #31
 8004c9a:	d4ae      	bmi.n	8004bfa <_dtoa_r+0xac2>
 8004c9c:	462b      	mov	r3, r5
 8004c9e:	461d      	mov	r5, r3
 8004ca0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004ca4:	2a30      	cmp	r2, #48	; 0x30
 8004ca6:	d0fa      	beq.n	8004c9e <_dtoa_r+0xb66>
 8004ca8:	e6f7      	b.n	8004a9a <_dtoa_r+0x962>
 8004caa:	9a00      	ldr	r2, [sp, #0]
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d1a5      	bne.n	8004bfc <_dtoa_r+0xac4>
 8004cb0:	f10a 0a01 	add.w	sl, sl, #1
 8004cb4:	2331      	movs	r3, #49	; 0x31
 8004cb6:	e779      	b.n	8004bac <_dtoa_r+0xa74>
 8004cb8:	4b13      	ldr	r3, [pc, #76]	; (8004d08 <_dtoa_r+0xbd0>)
 8004cba:	f7ff baaf 	b.w	800421c <_dtoa_r+0xe4>
 8004cbe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	f47f aa86 	bne.w	80041d2 <_dtoa_r+0x9a>
 8004cc6:	4b11      	ldr	r3, [pc, #68]	; (8004d0c <_dtoa_r+0xbd4>)
 8004cc8:	f7ff baa8 	b.w	800421c <_dtoa_r+0xe4>
 8004ccc:	f1b9 0f00 	cmp.w	r9, #0
 8004cd0:	dc03      	bgt.n	8004cda <_dtoa_r+0xba2>
 8004cd2:	9b05      	ldr	r3, [sp, #20]
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	f73f aec9 	bgt.w	8004a6c <_dtoa_r+0x934>
 8004cda:	9d00      	ldr	r5, [sp, #0]
 8004cdc:	4631      	mov	r1, r6
 8004cde:	4658      	mov	r0, fp
 8004ce0:	f7ff f99c 	bl	800401c <quorem>
 8004ce4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8004ce8:	f805 3b01 	strb.w	r3, [r5], #1
 8004cec:	9a00      	ldr	r2, [sp, #0]
 8004cee:	1aaa      	subs	r2, r5, r2
 8004cf0:	4591      	cmp	r9, r2
 8004cf2:	ddba      	ble.n	8004c6a <_dtoa_r+0xb32>
 8004cf4:	4659      	mov	r1, fp
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	220a      	movs	r2, #10
 8004cfa:	4620      	mov	r0, r4
 8004cfc:	f000 f884 	bl	8004e08 <__multadd>
 8004d00:	4683      	mov	fp, r0
 8004d02:	e7eb      	b.n	8004cdc <_dtoa_r+0xba4>
 8004d04:	08006217 	.word	0x08006217
 8004d08:	08006170 	.word	0x08006170
 8004d0c:	08006194 	.word	0x08006194

08004d10 <_localeconv_r>:
 8004d10:	4800      	ldr	r0, [pc, #0]	; (8004d14 <_localeconv_r+0x4>)
 8004d12:	4770      	bx	lr
 8004d14:	20000474 	.word	0x20000474

08004d18 <malloc>:
 8004d18:	4b02      	ldr	r3, [pc, #8]	; (8004d24 <malloc+0xc>)
 8004d1a:	4601      	mov	r1, r0
 8004d1c:	6818      	ldr	r0, [r3, #0]
 8004d1e:	f000 bbef 	b.w	8005500 <_malloc_r>
 8004d22:	bf00      	nop
 8004d24:	20000320 	.word	0x20000320

08004d28 <memcpy>:
 8004d28:	440a      	add	r2, r1
 8004d2a:	4291      	cmp	r1, r2
 8004d2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004d30:	d100      	bne.n	8004d34 <memcpy+0xc>
 8004d32:	4770      	bx	lr
 8004d34:	b510      	push	{r4, lr}
 8004d36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d3e:	4291      	cmp	r1, r2
 8004d40:	d1f9      	bne.n	8004d36 <memcpy+0xe>
 8004d42:	bd10      	pop	{r4, pc}

08004d44 <_Balloc>:
 8004d44:	b570      	push	{r4, r5, r6, lr}
 8004d46:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004d48:	4604      	mov	r4, r0
 8004d4a:	460d      	mov	r5, r1
 8004d4c:	b976      	cbnz	r6, 8004d6c <_Balloc+0x28>
 8004d4e:	2010      	movs	r0, #16
 8004d50:	f7ff ffe2 	bl	8004d18 <malloc>
 8004d54:	4602      	mov	r2, r0
 8004d56:	6260      	str	r0, [r4, #36]	; 0x24
 8004d58:	b920      	cbnz	r0, 8004d64 <_Balloc+0x20>
 8004d5a:	4b18      	ldr	r3, [pc, #96]	; (8004dbc <_Balloc+0x78>)
 8004d5c:	4818      	ldr	r0, [pc, #96]	; (8004dc0 <_Balloc+0x7c>)
 8004d5e:	2166      	movs	r1, #102	; 0x66
 8004d60:	f000 fc38 	bl	80055d4 <__assert_func>
 8004d64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004d68:	6006      	str	r6, [r0, #0]
 8004d6a:	60c6      	str	r6, [r0, #12]
 8004d6c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004d6e:	68f3      	ldr	r3, [r6, #12]
 8004d70:	b183      	cbz	r3, 8004d94 <_Balloc+0x50>
 8004d72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004d7a:	b9b8      	cbnz	r0, 8004dac <_Balloc+0x68>
 8004d7c:	2101      	movs	r1, #1
 8004d7e:	fa01 f605 	lsl.w	r6, r1, r5
 8004d82:	1d72      	adds	r2, r6, #5
 8004d84:	0092      	lsls	r2, r2, #2
 8004d86:	4620      	mov	r0, r4
 8004d88:	f000 fb5a 	bl	8005440 <_calloc_r>
 8004d8c:	b160      	cbz	r0, 8004da8 <_Balloc+0x64>
 8004d8e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004d92:	e00e      	b.n	8004db2 <_Balloc+0x6e>
 8004d94:	2221      	movs	r2, #33	; 0x21
 8004d96:	2104      	movs	r1, #4
 8004d98:	4620      	mov	r0, r4
 8004d9a:	f000 fb51 	bl	8005440 <_calloc_r>
 8004d9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004da0:	60f0      	str	r0, [r6, #12]
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d1e4      	bne.n	8004d72 <_Balloc+0x2e>
 8004da8:	2000      	movs	r0, #0
 8004daa:	bd70      	pop	{r4, r5, r6, pc}
 8004dac:	6802      	ldr	r2, [r0, #0]
 8004dae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004db2:	2300      	movs	r3, #0
 8004db4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004db8:	e7f7      	b.n	8004daa <_Balloc+0x66>
 8004dba:	bf00      	nop
 8004dbc:	080061a1 	.word	0x080061a1
 8004dc0:	08006228 	.word	0x08006228

08004dc4 <_Bfree>:
 8004dc4:	b570      	push	{r4, r5, r6, lr}
 8004dc6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004dc8:	4605      	mov	r5, r0
 8004dca:	460c      	mov	r4, r1
 8004dcc:	b976      	cbnz	r6, 8004dec <_Bfree+0x28>
 8004dce:	2010      	movs	r0, #16
 8004dd0:	f7ff ffa2 	bl	8004d18 <malloc>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	6268      	str	r0, [r5, #36]	; 0x24
 8004dd8:	b920      	cbnz	r0, 8004de4 <_Bfree+0x20>
 8004dda:	4b09      	ldr	r3, [pc, #36]	; (8004e00 <_Bfree+0x3c>)
 8004ddc:	4809      	ldr	r0, [pc, #36]	; (8004e04 <_Bfree+0x40>)
 8004dde:	218a      	movs	r1, #138	; 0x8a
 8004de0:	f000 fbf8 	bl	80055d4 <__assert_func>
 8004de4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004de8:	6006      	str	r6, [r0, #0]
 8004dea:	60c6      	str	r6, [r0, #12]
 8004dec:	b13c      	cbz	r4, 8004dfe <_Bfree+0x3a>
 8004dee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004df0:	6862      	ldr	r2, [r4, #4]
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004df8:	6021      	str	r1, [r4, #0]
 8004dfa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004dfe:	bd70      	pop	{r4, r5, r6, pc}
 8004e00:	080061a1 	.word	0x080061a1
 8004e04:	08006228 	.word	0x08006228

08004e08 <__multadd>:
 8004e08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e0c:	690e      	ldr	r6, [r1, #16]
 8004e0e:	4607      	mov	r7, r0
 8004e10:	4698      	mov	r8, r3
 8004e12:	460c      	mov	r4, r1
 8004e14:	f101 0014 	add.w	r0, r1, #20
 8004e18:	2300      	movs	r3, #0
 8004e1a:	6805      	ldr	r5, [r0, #0]
 8004e1c:	b2a9      	uxth	r1, r5
 8004e1e:	fb02 8101 	mla	r1, r2, r1, r8
 8004e22:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8004e26:	0c2d      	lsrs	r5, r5, #16
 8004e28:	fb02 c505 	mla	r5, r2, r5, ip
 8004e2c:	b289      	uxth	r1, r1
 8004e2e:	3301      	adds	r3, #1
 8004e30:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8004e34:	429e      	cmp	r6, r3
 8004e36:	f840 1b04 	str.w	r1, [r0], #4
 8004e3a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8004e3e:	dcec      	bgt.n	8004e1a <__multadd+0x12>
 8004e40:	f1b8 0f00 	cmp.w	r8, #0
 8004e44:	d022      	beq.n	8004e8c <__multadd+0x84>
 8004e46:	68a3      	ldr	r3, [r4, #8]
 8004e48:	42b3      	cmp	r3, r6
 8004e4a:	dc19      	bgt.n	8004e80 <__multadd+0x78>
 8004e4c:	6861      	ldr	r1, [r4, #4]
 8004e4e:	4638      	mov	r0, r7
 8004e50:	3101      	adds	r1, #1
 8004e52:	f7ff ff77 	bl	8004d44 <_Balloc>
 8004e56:	4605      	mov	r5, r0
 8004e58:	b928      	cbnz	r0, 8004e66 <__multadd+0x5e>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	4b0d      	ldr	r3, [pc, #52]	; (8004e94 <__multadd+0x8c>)
 8004e5e:	480e      	ldr	r0, [pc, #56]	; (8004e98 <__multadd+0x90>)
 8004e60:	21b5      	movs	r1, #181	; 0xb5
 8004e62:	f000 fbb7 	bl	80055d4 <__assert_func>
 8004e66:	6922      	ldr	r2, [r4, #16]
 8004e68:	3202      	adds	r2, #2
 8004e6a:	f104 010c 	add.w	r1, r4, #12
 8004e6e:	0092      	lsls	r2, r2, #2
 8004e70:	300c      	adds	r0, #12
 8004e72:	f7ff ff59 	bl	8004d28 <memcpy>
 8004e76:	4621      	mov	r1, r4
 8004e78:	4638      	mov	r0, r7
 8004e7a:	f7ff ffa3 	bl	8004dc4 <_Bfree>
 8004e7e:	462c      	mov	r4, r5
 8004e80:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8004e84:	3601      	adds	r6, #1
 8004e86:	f8c3 8014 	str.w	r8, [r3, #20]
 8004e8a:	6126      	str	r6, [r4, #16]
 8004e8c:	4620      	mov	r0, r4
 8004e8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e92:	bf00      	nop
 8004e94:	08006217 	.word	0x08006217
 8004e98:	08006228 	.word	0x08006228

08004e9c <__hi0bits>:
 8004e9c:	0c03      	lsrs	r3, r0, #16
 8004e9e:	041b      	lsls	r3, r3, #16
 8004ea0:	b9d3      	cbnz	r3, 8004ed8 <__hi0bits+0x3c>
 8004ea2:	0400      	lsls	r0, r0, #16
 8004ea4:	2310      	movs	r3, #16
 8004ea6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8004eaa:	bf04      	itt	eq
 8004eac:	0200      	lsleq	r0, r0, #8
 8004eae:	3308      	addeq	r3, #8
 8004eb0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8004eb4:	bf04      	itt	eq
 8004eb6:	0100      	lsleq	r0, r0, #4
 8004eb8:	3304      	addeq	r3, #4
 8004eba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8004ebe:	bf04      	itt	eq
 8004ec0:	0080      	lsleq	r0, r0, #2
 8004ec2:	3302      	addeq	r3, #2
 8004ec4:	2800      	cmp	r0, #0
 8004ec6:	db05      	blt.n	8004ed4 <__hi0bits+0x38>
 8004ec8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8004ecc:	f103 0301 	add.w	r3, r3, #1
 8004ed0:	bf08      	it	eq
 8004ed2:	2320      	moveq	r3, #32
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	4770      	bx	lr
 8004ed8:	2300      	movs	r3, #0
 8004eda:	e7e4      	b.n	8004ea6 <__hi0bits+0xa>

08004edc <__lo0bits>:
 8004edc:	6803      	ldr	r3, [r0, #0]
 8004ede:	f013 0207 	ands.w	r2, r3, #7
 8004ee2:	4601      	mov	r1, r0
 8004ee4:	d00b      	beq.n	8004efe <__lo0bits+0x22>
 8004ee6:	07da      	lsls	r2, r3, #31
 8004ee8:	d424      	bmi.n	8004f34 <__lo0bits+0x58>
 8004eea:	0798      	lsls	r0, r3, #30
 8004eec:	bf49      	itett	mi
 8004eee:	085b      	lsrmi	r3, r3, #1
 8004ef0:	089b      	lsrpl	r3, r3, #2
 8004ef2:	2001      	movmi	r0, #1
 8004ef4:	600b      	strmi	r3, [r1, #0]
 8004ef6:	bf5c      	itt	pl
 8004ef8:	600b      	strpl	r3, [r1, #0]
 8004efa:	2002      	movpl	r0, #2
 8004efc:	4770      	bx	lr
 8004efe:	b298      	uxth	r0, r3
 8004f00:	b9b0      	cbnz	r0, 8004f30 <__lo0bits+0x54>
 8004f02:	0c1b      	lsrs	r3, r3, #16
 8004f04:	2010      	movs	r0, #16
 8004f06:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004f0a:	bf04      	itt	eq
 8004f0c:	0a1b      	lsreq	r3, r3, #8
 8004f0e:	3008      	addeq	r0, #8
 8004f10:	071a      	lsls	r2, r3, #28
 8004f12:	bf04      	itt	eq
 8004f14:	091b      	lsreq	r3, r3, #4
 8004f16:	3004      	addeq	r0, #4
 8004f18:	079a      	lsls	r2, r3, #30
 8004f1a:	bf04      	itt	eq
 8004f1c:	089b      	lsreq	r3, r3, #2
 8004f1e:	3002      	addeq	r0, #2
 8004f20:	07da      	lsls	r2, r3, #31
 8004f22:	d403      	bmi.n	8004f2c <__lo0bits+0x50>
 8004f24:	085b      	lsrs	r3, r3, #1
 8004f26:	f100 0001 	add.w	r0, r0, #1
 8004f2a:	d005      	beq.n	8004f38 <__lo0bits+0x5c>
 8004f2c:	600b      	str	r3, [r1, #0]
 8004f2e:	4770      	bx	lr
 8004f30:	4610      	mov	r0, r2
 8004f32:	e7e8      	b.n	8004f06 <__lo0bits+0x2a>
 8004f34:	2000      	movs	r0, #0
 8004f36:	4770      	bx	lr
 8004f38:	2020      	movs	r0, #32
 8004f3a:	4770      	bx	lr

08004f3c <__i2b>:
 8004f3c:	b510      	push	{r4, lr}
 8004f3e:	460c      	mov	r4, r1
 8004f40:	2101      	movs	r1, #1
 8004f42:	f7ff feff 	bl	8004d44 <_Balloc>
 8004f46:	4602      	mov	r2, r0
 8004f48:	b928      	cbnz	r0, 8004f56 <__i2b+0x1a>
 8004f4a:	4b05      	ldr	r3, [pc, #20]	; (8004f60 <__i2b+0x24>)
 8004f4c:	4805      	ldr	r0, [pc, #20]	; (8004f64 <__i2b+0x28>)
 8004f4e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004f52:	f000 fb3f 	bl	80055d4 <__assert_func>
 8004f56:	2301      	movs	r3, #1
 8004f58:	6144      	str	r4, [r0, #20]
 8004f5a:	6103      	str	r3, [r0, #16]
 8004f5c:	bd10      	pop	{r4, pc}
 8004f5e:	bf00      	nop
 8004f60:	08006217 	.word	0x08006217
 8004f64:	08006228 	.word	0x08006228

08004f68 <__multiply>:
 8004f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f6c:	4614      	mov	r4, r2
 8004f6e:	690a      	ldr	r2, [r1, #16]
 8004f70:	6923      	ldr	r3, [r4, #16]
 8004f72:	429a      	cmp	r2, r3
 8004f74:	bfb8      	it	lt
 8004f76:	460b      	movlt	r3, r1
 8004f78:	460d      	mov	r5, r1
 8004f7a:	bfbc      	itt	lt
 8004f7c:	4625      	movlt	r5, r4
 8004f7e:	461c      	movlt	r4, r3
 8004f80:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8004f84:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8004f88:	68ab      	ldr	r3, [r5, #8]
 8004f8a:	6869      	ldr	r1, [r5, #4]
 8004f8c:	eb0a 0709 	add.w	r7, sl, r9
 8004f90:	42bb      	cmp	r3, r7
 8004f92:	b085      	sub	sp, #20
 8004f94:	bfb8      	it	lt
 8004f96:	3101      	addlt	r1, #1
 8004f98:	f7ff fed4 	bl	8004d44 <_Balloc>
 8004f9c:	b930      	cbnz	r0, 8004fac <__multiply+0x44>
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	4b42      	ldr	r3, [pc, #264]	; (80050ac <__multiply+0x144>)
 8004fa2:	4843      	ldr	r0, [pc, #268]	; (80050b0 <__multiply+0x148>)
 8004fa4:	f240 115d 	movw	r1, #349	; 0x15d
 8004fa8:	f000 fb14 	bl	80055d4 <__assert_func>
 8004fac:	f100 0614 	add.w	r6, r0, #20
 8004fb0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8004fb4:	4633      	mov	r3, r6
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	4543      	cmp	r3, r8
 8004fba:	d31e      	bcc.n	8004ffa <__multiply+0x92>
 8004fbc:	f105 0c14 	add.w	ip, r5, #20
 8004fc0:	f104 0314 	add.w	r3, r4, #20
 8004fc4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8004fc8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8004fcc:	9202      	str	r2, [sp, #8]
 8004fce:	ebac 0205 	sub.w	r2, ip, r5
 8004fd2:	3a15      	subs	r2, #21
 8004fd4:	f022 0203 	bic.w	r2, r2, #3
 8004fd8:	3204      	adds	r2, #4
 8004fda:	f105 0115 	add.w	r1, r5, #21
 8004fde:	458c      	cmp	ip, r1
 8004fe0:	bf38      	it	cc
 8004fe2:	2204      	movcc	r2, #4
 8004fe4:	9201      	str	r2, [sp, #4]
 8004fe6:	9a02      	ldr	r2, [sp, #8]
 8004fe8:	9303      	str	r3, [sp, #12]
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d808      	bhi.n	8005000 <__multiply+0x98>
 8004fee:	2f00      	cmp	r7, #0
 8004ff0:	dc55      	bgt.n	800509e <__multiply+0x136>
 8004ff2:	6107      	str	r7, [r0, #16]
 8004ff4:	b005      	add	sp, #20
 8004ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ffa:	f843 2b04 	str.w	r2, [r3], #4
 8004ffe:	e7db      	b.n	8004fb8 <__multiply+0x50>
 8005000:	f8b3 a000 	ldrh.w	sl, [r3]
 8005004:	f1ba 0f00 	cmp.w	sl, #0
 8005008:	d020      	beq.n	800504c <__multiply+0xe4>
 800500a:	f105 0e14 	add.w	lr, r5, #20
 800500e:	46b1      	mov	r9, r6
 8005010:	2200      	movs	r2, #0
 8005012:	f85e 4b04 	ldr.w	r4, [lr], #4
 8005016:	f8d9 b000 	ldr.w	fp, [r9]
 800501a:	b2a1      	uxth	r1, r4
 800501c:	fa1f fb8b 	uxth.w	fp, fp
 8005020:	fb0a b101 	mla	r1, sl, r1, fp
 8005024:	4411      	add	r1, r2
 8005026:	f8d9 2000 	ldr.w	r2, [r9]
 800502a:	0c24      	lsrs	r4, r4, #16
 800502c:	0c12      	lsrs	r2, r2, #16
 800502e:	fb0a 2404 	mla	r4, sl, r4, r2
 8005032:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8005036:	b289      	uxth	r1, r1
 8005038:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800503c:	45f4      	cmp	ip, lr
 800503e:	f849 1b04 	str.w	r1, [r9], #4
 8005042:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8005046:	d8e4      	bhi.n	8005012 <__multiply+0xaa>
 8005048:	9901      	ldr	r1, [sp, #4]
 800504a:	5072      	str	r2, [r6, r1]
 800504c:	9a03      	ldr	r2, [sp, #12]
 800504e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005052:	3304      	adds	r3, #4
 8005054:	f1b9 0f00 	cmp.w	r9, #0
 8005058:	d01f      	beq.n	800509a <__multiply+0x132>
 800505a:	6834      	ldr	r4, [r6, #0]
 800505c:	f105 0114 	add.w	r1, r5, #20
 8005060:	46b6      	mov	lr, r6
 8005062:	f04f 0a00 	mov.w	sl, #0
 8005066:	880a      	ldrh	r2, [r1, #0]
 8005068:	f8be b002 	ldrh.w	fp, [lr, #2]
 800506c:	fb09 b202 	mla	r2, r9, r2, fp
 8005070:	4492      	add	sl, r2
 8005072:	b2a4      	uxth	r4, r4
 8005074:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8005078:	f84e 4b04 	str.w	r4, [lr], #4
 800507c:	f851 4b04 	ldr.w	r4, [r1], #4
 8005080:	f8be 2000 	ldrh.w	r2, [lr]
 8005084:	0c24      	lsrs	r4, r4, #16
 8005086:	fb09 2404 	mla	r4, r9, r4, r2
 800508a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800508e:	458c      	cmp	ip, r1
 8005090:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005094:	d8e7      	bhi.n	8005066 <__multiply+0xfe>
 8005096:	9a01      	ldr	r2, [sp, #4]
 8005098:	50b4      	str	r4, [r6, r2]
 800509a:	3604      	adds	r6, #4
 800509c:	e7a3      	b.n	8004fe6 <__multiply+0x7e>
 800509e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d1a5      	bne.n	8004ff2 <__multiply+0x8a>
 80050a6:	3f01      	subs	r7, #1
 80050a8:	e7a1      	b.n	8004fee <__multiply+0x86>
 80050aa:	bf00      	nop
 80050ac:	08006217 	.word	0x08006217
 80050b0:	08006228 	.word	0x08006228

080050b4 <__pow5mult>:
 80050b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80050b8:	4615      	mov	r5, r2
 80050ba:	f012 0203 	ands.w	r2, r2, #3
 80050be:	4606      	mov	r6, r0
 80050c0:	460f      	mov	r7, r1
 80050c2:	d007      	beq.n	80050d4 <__pow5mult+0x20>
 80050c4:	4c25      	ldr	r4, [pc, #148]	; (800515c <__pow5mult+0xa8>)
 80050c6:	3a01      	subs	r2, #1
 80050c8:	2300      	movs	r3, #0
 80050ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80050ce:	f7ff fe9b 	bl	8004e08 <__multadd>
 80050d2:	4607      	mov	r7, r0
 80050d4:	10ad      	asrs	r5, r5, #2
 80050d6:	d03d      	beq.n	8005154 <__pow5mult+0xa0>
 80050d8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80050da:	b97c      	cbnz	r4, 80050fc <__pow5mult+0x48>
 80050dc:	2010      	movs	r0, #16
 80050de:	f7ff fe1b 	bl	8004d18 <malloc>
 80050e2:	4602      	mov	r2, r0
 80050e4:	6270      	str	r0, [r6, #36]	; 0x24
 80050e6:	b928      	cbnz	r0, 80050f4 <__pow5mult+0x40>
 80050e8:	4b1d      	ldr	r3, [pc, #116]	; (8005160 <__pow5mult+0xac>)
 80050ea:	481e      	ldr	r0, [pc, #120]	; (8005164 <__pow5mult+0xb0>)
 80050ec:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80050f0:	f000 fa70 	bl	80055d4 <__assert_func>
 80050f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80050f8:	6004      	str	r4, [r0, #0]
 80050fa:	60c4      	str	r4, [r0, #12]
 80050fc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005100:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005104:	b94c      	cbnz	r4, 800511a <__pow5mult+0x66>
 8005106:	f240 2171 	movw	r1, #625	; 0x271
 800510a:	4630      	mov	r0, r6
 800510c:	f7ff ff16 	bl	8004f3c <__i2b>
 8005110:	2300      	movs	r3, #0
 8005112:	f8c8 0008 	str.w	r0, [r8, #8]
 8005116:	4604      	mov	r4, r0
 8005118:	6003      	str	r3, [r0, #0]
 800511a:	f04f 0900 	mov.w	r9, #0
 800511e:	07eb      	lsls	r3, r5, #31
 8005120:	d50a      	bpl.n	8005138 <__pow5mult+0x84>
 8005122:	4639      	mov	r1, r7
 8005124:	4622      	mov	r2, r4
 8005126:	4630      	mov	r0, r6
 8005128:	f7ff ff1e 	bl	8004f68 <__multiply>
 800512c:	4639      	mov	r1, r7
 800512e:	4680      	mov	r8, r0
 8005130:	4630      	mov	r0, r6
 8005132:	f7ff fe47 	bl	8004dc4 <_Bfree>
 8005136:	4647      	mov	r7, r8
 8005138:	106d      	asrs	r5, r5, #1
 800513a:	d00b      	beq.n	8005154 <__pow5mult+0xa0>
 800513c:	6820      	ldr	r0, [r4, #0]
 800513e:	b938      	cbnz	r0, 8005150 <__pow5mult+0x9c>
 8005140:	4622      	mov	r2, r4
 8005142:	4621      	mov	r1, r4
 8005144:	4630      	mov	r0, r6
 8005146:	f7ff ff0f 	bl	8004f68 <__multiply>
 800514a:	6020      	str	r0, [r4, #0]
 800514c:	f8c0 9000 	str.w	r9, [r0]
 8005150:	4604      	mov	r4, r0
 8005152:	e7e4      	b.n	800511e <__pow5mult+0x6a>
 8005154:	4638      	mov	r0, r7
 8005156:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800515a:	bf00      	nop
 800515c:	08006378 	.word	0x08006378
 8005160:	080061a1 	.word	0x080061a1
 8005164:	08006228 	.word	0x08006228

08005168 <__lshift>:
 8005168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800516c:	460c      	mov	r4, r1
 800516e:	6849      	ldr	r1, [r1, #4]
 8005170:	6923      	ldr	r3, [r4, #16]
 8005172:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005176:	68a3      	ldr	r3, [r4, #8]
 8005178:	4607      	mov	r7, r0
 800517a:	4691      	mov	r9, r2
 800517c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005180:	f108 0601 	add.w	r6, r8, #1
 8005184:	42b3      	cmp	r3, r6
 8005186:	db0b      	blt.n	80051a0 <__lshift+0x38>
 8005188:	4638      	mov	r0, r7
 800518a:	f7ff fddb 	bl	8004d44 <_Balloc>
 800518e:	4605      	mov	r5, r0
 8005190:	b948      	cbnz	r0, 80051a6 <__lshift+0x3e>
 8005192:	4602      	mov	r2, r0
 8005194:	4b28      	ldr	r3, [pc, #160]	; (8005238 <__lshift+0xd0>)
 8005196:	4829      	ldr	r0, [pc, #164]	; (800523c <__lshift+0xd4>)
 8005198:	f240 11d9 	movw	r1, #473	; 0x1d9
 800519c:	f000 fa1a 	bl	80055d4 <__assert_func>
 80051a0:	3101      	adds	r1, #1
 80051a2:	005b      	lsls	r3, r3, #1
 80051a4:	e7ee      	b.n	8005184 <__lshift+0x1c>
 80051a6:	2300      	movs	r3, #0
 80051a8:	f100 0114 	add.w	r1, r0, #20
 80051ac:	f100 0210 	add.w	r2, r0, #16
 80051b0:	4618      	mov	r0, r3
 80051b2:	4553      	cmp	r3, sl
 80051b4:	db33      	blt.n	800521e <__lshift+0xb6>
 80051b6:	6920      	ldr	r0, [r4, #16]
 80051b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80051bc:	f104 0314 	add.w	r3, r4, #20
 80051c0:	f019 091f 	ands.w	r9, r9, #31
 80051c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80051c8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80051cc:	d02b      	beq.n	8005226 <__lshift+0xbe>
 80051ce:	f1c9 0e20 	rsb	lr, r9, #32
 80051d2:	468a      	mov	sl, r1
 80051d4:	2200      	movs	r2, #0
 80051d6:	6818      	ldr	r0, [r3, #0]
 80051d8:	fa00 f009 	lsl.w	r0, r0, r9
 80051dc:	4302      	orrs	r2, r0
 80051de:	f84a 2b04 	str.w	r2, [sl], #4
 80051e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80051e6:	459c      	cmp	ip, r3
 80051e8:	fa22 f20e 	lsr.w	r2, r2, lr
 80051ec:	d8f3      	bhi.n	80051d6 <__lshift+0x6e>
 80051ee:	ebac 0304 	sub.w	r3, ip, r4
 80051f2:	3b15      	subs	r3, #21
 80051f4:	f023 0303 	bic.w	r3, r3, #3
 80051f8:	3304      	adds	r3, #4
 80051fa:	f104 0015 	add.w	r0, r4, #21
 80051fe:	4584      	cmp	ip, r0
 8005200:	bf38      	it	cc
 8005202:	2304      	movcc	r3, #4
 8005204:	50ca      	str	r2, [r1, r3]
 8005206:	b10a      	cbz	r2, 800520c <__lshift+0xa4>
 8005208:	f108 0602 	add.w	r6, r8, #2
 800520c:	3e01      	subs	r6, #1
 800520e:	4638      	mov	r0, r7
 8005210:	612e      	str	r6, [r5, #16]
 8005212:	4621      	mov	r1, r4
 8005214:	f7ff fdd6 	bl	8004dc4 <_Bfree>
 8005218:	4628      	mov	r0, r5
 800521a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800521e:	f842 0f04 	str.w	r0, [r2, #4]!
 8005222:	3301      	adds	r3, #1
 8005224:	e7c5      	b.n	80051b2 <__lshift+0x4a>
 8005226:	3904      	subs	r1, #4
 8005228:	f853 2b04 	ldr.w	r2, [r3], #4
 800522c:	f841 2f04 	str.w	r2, [r1, #4]!
 8005230:	459c      	cmp	ip, r3
 8005232:	d8f9      	bhi.n	8005228 <__lshift+0xc0>
 8005234:	e7ea      	b.n	800520c <__lshift+0xa4>
 8005236:	bf00      	nop
 8005238:	08006217 	.word	0x08006217
 800523c:	08006228 	.word	0x08006228

08005240 <__mcmp>:
 8005240:	b530      	push	{r4, r5, lr}
 8005242:	6902      	ldr	r2, [r0, #16]
 8005244:	690c      	ldr	r4, [r1, #16]
 8005246:	1b12      	subs	r2, r2, r4
 8005248:	d10e      	bne.n	8005268 <__mcmp+0x28>
 800524a:	f100 0314 	add.w	r3, r0, #20
 800524e:	3114      	adds	r1, #20
 8005250:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005254:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005258:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800525c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005260:	42a5      	cmp	r5, r4
 8005262:	d003      	beq.n	800526c <__mcmp+0x2c>
 8005264:	d305      	bcc.n	8005272 <__mcmp+0x32>
 8005266:	2201      	movs	r2, #1
 8005268:	4610      	mov	r0, r2
 800526a:	bd30      	pop	{r4, r5, pc}
 800526c:	4283      	cmp	r3, r0
 800526e:	d3f3      	bcc.n	8005258 <__mcmp+0x18>
 8005270:	e7fa      	b.n	8005268 <__mcmp+0x28>
 8005272:	f04f 32ff 	mov.w	r2, #4294967295
 8005276:	e7f7      	b.n	8005268 <__mcmp+0x28>

08005278 <__mdiff>:
 8005278:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800527c:	460c      	mov	r4, r1
 800527e:	4606      	mov	r6, r0
 8005280:	4611      	mov	r1, r2
 8005282:	4620      	mov	r0, r4
 8005284:	4617      	mov	r7, r2
 8005286:	f7ff ffdb 	bl	8005240 <__mcmp>
 800528a:	1e05      	subs	r5, r0, #0
 800528c:	d110      	bne.n	80052b0 <__mdiff+0x38>
 800528e:	4629      	mov	r1, r5
 8005290:	4630      	mov	r0, r6
 8005292:	f7ff fd57 	bl	8004d44 <_Balloc>
 8005296:	b930      	cbnz	r0, 80052a6 <__mdiff+0x2e>
 8005298:	4b39      	ldr	r3, [pc, #228]	; (8005380 <__mdiff+0x108>)
 800529a:	4602      	mov	r2, r0
 800529c:	f240 2132 	movw	r1, #562	; 0x232
 80052a0:	4838      	ldr	r0, [pc, #224]	; (8005384 <__mdiff+0x10c>)
 80052a2:	f000 f997 	bl	80055d4 <__assert_func>
 80052a6:	2301      	movs	r3, #1
 80052a8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80052ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052b0:	bfa4      	itt	ge
 80052b2:	463b      	movge	r3, r7
 80052b4:	4627      	movge	r7, r4
 80052b6:	4630      	mov	r0, r6
 80052b8:	6879      	ldr	r1, [r7, #4]
 80052ba:	bfa6      	itte	ge
 80052bc:	461c      	movge	r4, r3
 80052be:	2500      	movge	r5, #0
 80052c0:	2501      	movlt	r5, #1
 80052c2:	f7ff fd3f 	bl	8004d44 <_Balloc>
 80052c6:	b920      	cbnz	r0, 80052d2 <__mdiff+0x5a>
 80052c8:	4b2d      	ldr	r3, [pc, #180]	; (8005380 <__mdiff+0x108>)
 80052ca:	4602      	mov	r2, r0
 80052cc:	f44f 7110 	mov.w	r1, #576	; 0x240
 80052d0:	e7e6      	b.n	80052a0 <__mdiff+0x28>
 80052d2:	693e      	ldr	r6, [r7, #16]
 80052d4:	60c5      	str	r5, [r0, #12]
 80052d6:	6925      	ldr	r5, [r4, #16]
 80052d8:	f107 0114 	add.w	r1, r7, #20
 80052dc:	f104 0914 	add.w	r9, r4, #20
 80052e0:	f100 0e14 	add.w	lr, r0, #20
 80052e4:	f107 0210 	add.w	r2, r7, #16
 80052e8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80052ec:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80052f0:	46f2      	mov	sl, lr
 80052f2:	2700      	movs	r7, #0
 80052f4:	f859 3b04 	ldr.w	r3, [r9], #4
 80052f8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80052fc:	fa1f f883 	uxth.w	r8, r3
 8005300:	fa17 f78b 	uxtah	r7, r7, fp
 8005304:	0c1b      	lsrs	r3, r3, #16
 8005306:	eba7 0808 	sub.w	r8, r7, r8
 800530a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800530e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005312:	fa1f f888 	uxth.w	r8, r8
 8005316:	141f      	asrs	r7, r3, #16
 8005318:	454d      	cmp	r5, r9
 800531a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800531e:	f84a 3b04 	str.w	r3, [sl], #4
 8005322:	d8e7      	bhi.n	80052f4 <__mdiff+0x7c>
 8005324:	1b2b      	subs	r3, r5, r4
 8005326:	3b15      	subs	r3, #21
 8005328:	f023 0303 	bic.w	r3, r3, #3
 800532c:	3304      	adds	r3, #4
 800532e:	3415      	adds	r4, #21
 8005330:	42a5      	cmp	r5, r4
 8005332:	bf38      	it	cc
 8005334:	2304      	movcc	r3, #4
 8005336:	4419      	add	r1, r3
 8005338:	4473      	add	r3, lr
 800533a:	469e      	mov	lr, r3
 800533c:	460d      	mov	r5, r1
 800533e:	4565      	cmp	r5, ip
 8005340:	d30e      	bcc.n	8005360 <__mdiff+0xe8>
 8005342:	f10c 0203 	add.w	r2, ip, #3
 8005346:	1a52      	subs	r2, r2, r1
 8005348:	f022 0203 	bic.w	r2, r2, #3
 800534c:	3903      	subs	r1, #3
 800534e:	458c      	cmp	ip, r1
 8005350:	bf38      	it	cc
 8005352:	2200      	movcc	r2, #0
 8005354:	441a      	add	r2, r3
 8005356:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800535a:	b17b      	cbz	r3, 800537c <__mdiff+0x104>
 800535c:	6106      	str	r6, [r0, #16]
 800535e:	e7a5      	b.n	80052ac <__mdiff+0x34>
 8005360:	f855 8b04 	ldr.w	r8, [r5], #4
 8005364:	fa17 f488 	uxtah	r4, r7, r8
 8005368:	1422      	asrs	r2, r4, #16
 800536a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800536e:	b2a4      	uxth	r4, r4
 8005370:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8005374:	f84e 4b04 	str.w	r4, [lr], #4
 8005378:	1417      	asrs	r7, r2, #16
 800537a:	e7e0      	b.n	800533e <__mdiff+0xc6>
 800537c:	3e01      	subs	r6, #1
 800537e:	e7ea      	b.n	8005356 <__mdiff+0xde>
 8005380:	08006217 	.word	0x08006217
 8005384:	08006228 	.word	0x08006228

08005388 <__d2b>:
 8005388:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800538c:	4689      	mov	r9, r1
 800538e:	2101      	movs	r1, #1
 8005390:	ec57 6b10 	vmov	r6, r7, d0
 8005394:	4690      	mov	r8, r2
 8005396:	f7ff fcd5 	bl	8004d44 <_Balloc>
 800539a:	4604      	mov	r4, r0
 800539c:	b930      	cbnz	r0, 80053ac <__d2b+0x24>
 800539e:	4602      	mov	r2, r0
 80053a0:	4b25      	ldr	r3, [pc, #148]	; (8005438 <__d2b+0xb0>)
 80053a2:	4826      	ldr	r0, [pc, #152]	; (800543c <__d2b+0xb4>)
 80053a4:	f240 310a 	movw	r1, #778	; 0x30a
 80053a8:	f000 f914 	bl	80055d4 <__assert_func>
 80053ac:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80053b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80053b4:	bb35      	cbnz	r5, 8005404 <__d2b+0x7c>
 80053b6:	2e00      	cmp	r6, #0
 80053b8:	9301      	str	r3, [sp, #4]
 80053ba:	d028      	beq.n	800540e <__d2b+0x86>
 80053bc:	4668      	mov	r0, sp
 80053be:	9600      	str	r6, [sp, #0]
 80053c0:	f7ff fd8c 	bl	8004edc <__lo0bits>
 80053c4:	9900      	ldr	r1, [sp, #0]
 80053c6:	b300      	cbz	r0, 800540a <__d2b+0x82>
 80053c8:	9a01      	ldr	r2, [sp, #4]
 80053ca:	f1c0 0320 	rsb	r3, r0, #32
 80053ce:	fa02 f303 	lsl.w	r3, r2, r3
 80053d2:	430b      	orrs	r3, r1
 80053d4:	40c2      	lsrs	r2, r0
 80053d6:	6163      	str	r3, [r4, #20]
 80053d8:	9201      	str	r2, [sp, #4]
 80053da:	9b01      	ldr	r3, [sp, #4]
 80053dc:	61a3      	str	r3, [r4, #24]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	bf14      	ite	ne
 80053e2:	2202      	movne	r2, #2
 80053e4:	2201      	moveq	r2, #1
 80053e6:	6122      	str	r2, [r4, #16]
 80053e8:	b1d5      	cbz	r5, 8005420 <__d2b+0x98>
 80053ea:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80053ee:	4405      	add	r5, r0
 80053f0:	f8c9 5000 	str.w	r5, [r9]
 80053f4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80053f8:	f8c8 0000 	str.w	r0, [r8]
 80053fc:	4620      	mov	r0, r4
 80053fe:	b003      	add	sp, #12
 8005400:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005404:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005408:	e7d5      	b.n	80053b6 <__d2b+0x2e>
 800540a:	6161      	str	r1, [r4, #20]
 800540c:	e7e5      	b.n	80053da <__d2b+0x52>
 800540e:	a801      	add	r0, sp, #4
 8005410:	f7ff fd64 	bl	8004edc <__lo0bits>
 8005414:	9b01      	ldr	r3, [sp, #4]
 8005416:	6163      	str	r3, [r4, #20]
 8005418:	2201      	movs	r2, #1
 800541a:	6122      	str	r2, [r4, #16]
 800541c:	3020      	adds	r0, #32
 800541e:	e7e3      	b.n	80053e8 <__d2b+0x60>
 8005420:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005424:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005428:	f8c9 0000 	str.w	r0, [r9]
 800542c:	6918      	ldr	r0, [r3, #16]
 800542e:	f7ff fd35 	bl	8004e9c <__hi0bits>
 8005432:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005436:	e7df      	b.n	80053f8 <__d2b+0x70>
 8005438:	08006217 	.word	0x08006217
 800543c:	08006228 	.word	0x08006228

08005440 <_calloc_r>:
 8005440:	b513      	push	{r0, r1, r4, lr}
 8005442:	434a      	muls	r2, r1
 8005444:	4611      	mov	r1, r2
 8005446:	9201      	str	r2, [sp, #4]
 8005448:	f000 f85a 	bl	8005500 <_malloc_r>
 800544c:	4604      	mov	r4, r0
 800544e:	b118      	cbz	r0, 8005458 <_calloc_r+0x18>
 8005450:	9a01      	ldr	r2, [sp, #4]
 8005452:	2100      	movs	r1, #0
 8005454:	f7fe f946 	bl	80036e4 <memset>
 8005458:	4620      	mov	r0, r4
 800545a:	b002      	add	sp, #8
 800545c:	bd10      	pop	{r4, pc}
	...

08005460 <_free_r>:
 8005460:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005462:	2900      	cmp	r1, #0
 8005464:	d048      	beq.n	80054f8 <_free_r+0x98>
 8005466:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800546a:	9001      	str	r0, [sp, #4]
 800546c:	2b00      	cmp	r3, #0
 800546e:	f1a1 0404 	sub.w	r4, r1, #4
 8005472:	bfb8      	it	lt
 8005474:	18e4      	addlt	r4, r4, r3
 8005476:	f000 f8ef 	bl	8005658 <__malloc_lock>
 800547a:	4a20      	ldr	r2, [pc, #128]	; (80054fc <_free_r+0x9c>)
 800547c:	9801      	ldr	r0, [sp, #4]
 800547e:	6813      	ldr	r3, [r2, #0]
 8005480:	4615      	mov	r5, r2
 8005482:	b933      	cbnz	r3, 8005492 <_free_r+0x32>
 8005484:	6063      	str	r3, [r4, #4]
 8005486:	6014      	str	r4, [r2, #0]
 8005488:	b003      	add	sp, #12
 800548a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800548e:	f000 b8e9 	b.w	8005664 <__malloc_unlock>
 8005492:	42a3      	cmp	r3, r4
 8005494:	d90b      	bls.n	80054ae <_free_r+0x4e>
 8005496:	6821      	ldr	r1, [r4, #0]
 8005498:	1862      	adds	r2, r4, r1
 800549a:	4293      	cmp	r3, r2
 800549c:	bf04      	itt	eq
 800549e:	681a      	ldreq	r2, [r3, #0]
 80054a0:	685b      	ldreq	r3, [r3, #4]
 80054a2:	6063      	str	r3, [r4, #4]
 80054a4:	bf04      	itt	eq
 80054a6:	1852      	addeq	r2, r2, r1
 80054a8:	6022      	streq	r2, [r4, #0]
 80054aa:	602c      	str	r4, [r5, #0]
 80054ac:	e7ec      	b.n	8005488 <_free_r+0x28>
 80054ae:	461a      	mov	r2, r3
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	b10b      	cbz	r3, 80054b8 <_free_r+0x58>
 80054b4:	42a3      	cmp	r3, r4
 80054b6:	d9fa      	bls.n	80054ae <_free_r+0x4e>
 80054b8:	6811      	ldr	r1, [r2, #0]
 80054ba:	1855      	adds	r5, r2, r1
 80054bc:	42a5      	cmp	r5, r4
 80054be:	d10b      	bne.n	80054d8 <_free_r+0x78>
 80054c0:	6824      	ldr	r4, [r4, #0]
 80054c2:	4421      	add	r1, r4
 80054c4:	1854      	adds	r4, r2, r1
 80054c6:	42a3      	cmp	r3, r4
 80054c8:	6011      	str	r1, [r2, #0]
 80054ca:	d1dd      	bne.n	8005488 <_free_r+0x28>
 80054cc:	681c      	ldr	r4, [r3, #0]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	6053      	str	r3, [r2, #4]
 80054d2:	4421      	add	r1, r4
 80054d4:	6011      	str	r1, [r2, #0]
 80054d6:	e7d7      	b.n	8005488 <_free_r+0x28>
 80054d8:	d902      	bls.n	80054e0 <_free_r+0x80>
 80054da:	230c      	movs	r3, #12
 80054dc:	6003      	str	r3, [r0, #0]
 80054de:	e7d3      	b.n	8005488 <_free_r+0x28>
 80054e0:	6825      	ldr	r5, [r4, #0]
 80054e2:	1961      	adds	r1, r4, r5
 80054e4:	428b      	cmp	r3, r1
 80054e6:	bf04      	itt	eq
 80054e8:	6819      	ldreq	r1, [r3, #0]
 80054ea:	685b      	ldreq	r3, [r3, #4]
 80054ec:	6063      	str	r3, [r4, #4]
 80054ee:	bf04      	itt	eq
 80054f0:	1949      	addeq	r1, r1, r5
 80054f2:	6021      	streq	r1, [r4, #0]
 80054f4:	6054      	str	r4, [r2, #4]
 80054f6:	e7c7      	b.n	8005488 <_free_r+0x28>
 80054f8:	b003      	add	sp, #12
 80054fa:	bd30      	pop	{r4, r5, pc}
 80054fc:	20000528 	.word	0x20000528

08005500 <_malloc_r>:
 8005500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005502:	1ccd      	adds	r5, r1, #3
 8005504:	f025 0503 	bic.w	r5, r5, #3
 8005508:	3508      	adds	r5, #8
 800550a:	2d0c      	cmp	r5, #12
 800550c:	bf38      	it	cc
 800550e:	250c      	movcc	r5, #12
 8005510:	2d00      	cmp	r5, #0
 8005512:	4606      	mov	r6, r0
 8005514:	db01      	blt.n	800551a <_malloc_r+0x1a>
 8005516:	42a9      	cmp	r1, r5
 8005518:	d903      	bls.n	8005522 <_malloc_r+0x22>
 800551a:	230c      	movs	r3, #12
 800551c:	6033      	str	r3, [r6, #0]
 800551e:	2000      	movs	r0, #0
 8005520:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005522:	f000 f899 	bl	8005658 <__malloc_lock>
 8005526:	4921      	ldr	r1, [pc, #132]	; (80055ac <_malloc_r+0xac>)
 8005528:	680a      	ldr	r2, [r1, #0]
 800552a:	4614      	mov	r4, r2
 800552c:	b99c      	cbnz	r4, 8005556 <_malloc_r+0x56>
 800552e:	4f20      	ldr	r7, [pc, #128]	; (80055b0 <_malloc_r+0xb0>)
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	b923      	cbnz	r3, 800553e <_malloc_r+0x3e>
 8005534:	4621      	mov	r1, r4
 8005536:	4630      	mov	r0, r6
 8005538:	f000 f83c 	bl	80055b4 <_sbrk_r>
 800553c:	6038      	str	r0, [r7, #0]
 800553e:	4629      	mov	r1, r5
 8005540:	4630      	mov	r0, r6
 8005542:	f000 f837 	bl	80055b4 <_sbrk_r>
 8005546:	1c43      	adds	r3, r0, #1
 8005548:	d123      	bne.n	8005592 <_malloc_r+0x92>
 800554a:	230c      	movs	r3, #12
 800554c:	6033      	str	r3, [r6, #0]
 800554e:	4630      	mov	r0, r6
 8005550:	f000 f888 	bl	8005664 <__malloc_unlock>
 8005554:	e7e3      	b.n	800551e <_malloc_r+0x1e>
 8005556:	6823      	ldr	r3, [r4, #0]
 8005558:	1b5b      	subs	r3, r3, r5
 800555a:	d417      	bmi.n	800558c <_malloc_r+0x8c>
 800555c:	2b0b      	cmp	r3, #11
 800555e:	d903      	bls.n	8005568 <_malloc_r+0x68>
 8005560:	6023      	str	r3, [r4, #0]
 8005562:	441c      	add	r4, r3
 8005564:	6025      	str	r5, [r4, #0]
 8005566:	e004      	b.n	8005572 <_malloc_r+0x72>
 8005568:	6863      	ldr	r3, [r4, #4]
 800556a:	42a2      	cmp	r2, r4
 800556c:	bf0c      	ite	eq
 800556e:	600b      	streq	r3, [r1, #0]
 8005570:	6053      	strne	r3, [r2, #4]
 8005572:	4630      	mov	r0, r6
 8005574:	f000 f876 	bl	8005664 <__malloc_unlock>
 8005578:	f104 000b 	add.w	r0, r4, #11
 800557c:	1d23      	adds	r3, r4, #4
 800557e:	f020 0007 	bic.w	r0, r0, #7
 8005582:	1ac2      	subs	r2, r0, r3
 8005584:	d0cc      	beq.n	8005520 <_malloc_r+0x20>
 8005586:	1a1b      	subs	r3, r3, r0
 8005588:	50a3      	str	r3, [r4, r2]
 800558a:	e7c9      	b.n	8005520 <_malloc_r+0x20>
 800558c:	4622      	mov	r2, r4
 800558e:	6864      	ldr	r4, [r4, #4]
 8005590:	e7cc      	b.n	800552c <_malloc_r+0x2c>
 8005592:	1cc4      	adds	r4, r0, #3
 8005594:	f024 0403 	bic.w	r4, r4, #3
 8005598:	42a0      	cmp	r0, r4
 800559a:	d0e3      	beq.n	8005564 <_malloc_r+0x64>
 800559c:	1a21      	subs	r1, r4, r0
 800559e:	4630      	mov	r0, r6
 80055a0:	f000 f808 	bl	80055b4 <_sbrk_r>
 80055a4:	3001      	adds	r0, #1
 80055a6:	d1dd      	bne.n	8005564 <_malloc_r+0x64>
 80055a8:	e7cf      	b.n	800554a <_malloc_r+0x4a>
 80055aa:	bf00      	nop
 80055ac:	20000528 	.word	0x20000528
 80055b0:	2000052c 	.word	0x2000052c

080055b4 <_sbrk_r>:
 80055b4:	b538      	push	{r3, r4, r5, lr}
 80055b6:	4d06      	ldr	r5, [pc, #24]	; (80055d0 <_sbrk_r+0x1c>)
 80055b8:	2300      	movs	r3, #0
 80055ba:	4604      	mov	r4, r0
 80055bc:	4608      	mov	r0, r1
 80055be:	602b      	str	r3, [r5, #0]
 80055c0:	f7fd f9bc 	bl	800293c <_sbrk>
 80055c4:	1c43      	adds	r3, r0, #1
 80055c6:	d102      	bne.n	80055ce <_sbrk_r+0x1a>
 80055c8:	682b      	ldr	r3, [r5, #0]
 80055ca:	b103      	cbz	r3, 80055ce <_sbrk_r+0x1a>
 80055cc:	6023      	str	r3, [r4, #0]
 80055ce:	bd38      	pop	{r3, r4, r5, pc}
 80055d0:	20000664 	.word	0x20000664

080055d4 <__assert_func>:
 80055d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80055d6:	4614      	mov	r4, r2
 80055d8:	461a      	mov	r2, r3
 80055da:	4b09      	ldr	r3, [pc, #36]	; (8005600 <__assert_func+0x2c>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4605      	mov	r5, r0
 80055e0:	68d8      	ldr	r0, [r3, #12]
 80055e2:	b14c      	cbz	r4, 80055f8 <__assert_func+0x24>
 80055e4:	4b07      	ldr	r3, [pc, #28]	; (8005604 <__assert_func+0x30>)
 80055e6:	9100      	str	r1, [sp, #0]
 80055e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80055ec:	4906      	ldr	r1, [pc, #24]	; (8005608 <__assert_func+0x34>)
 80055ee:	462b      	mov	r3, r5
 80055f0:	f000 f80e 	bl	8005610 <fiprintf>
 80055f4:	f000 fa64 	bl	8005ac0 <abort>
 80055f8:	4b04      	ldr	r3, [pc, #16]	; (800560c <__assert_func+0x38>)
 80055fa:	461c      	mov	r4, r3
 80055fc:	e7f3      	b.n	80055e6 <__assert_func+0x12>
 80055fe:	bf00      	nop
 8005600:	20000320 	.word	0x20000320
 8005604:	08006384 	.word	0x08006384
 8005608:	08006391 	.word	0x08006391
 800560c:	080063bf 	.word	0x080063bf

08005610 <fiprintf>:
 8005610:	b40e      	push	{r1, r2, r3}
 8005612:	b503      	push	{r0, r1, lr}
 8005614:	4601      	mov	r1, r0
 8005616:	ab03      	add	r3, sp, #12
 8005618:	4805      	ldr	r0, [pc, #20]	; (8005630 <fiprintf+0x20>)
 800561a:	f853 2b04 	ldr.w	r2, [r3], #4
 800561e:	6800      	ldr	r0, [r0, #0]
 8005620:	9301      	str	r3, [sp, #4]
 8005622:	f000 f84f 	bl	80056c4 <_vfiprintf_r>
 8005626:	b002      	add	sp, #8
 8005628:	f85d eb04 	ldr.w	lr, [sp], #4
 800562c:	b003      	add	sp, #12
 800562e:	4770      	bx	lr
 8005630:	20000320 	.word	0x20000320

08005634 <__ascii_mbtowc>:
 8005634:	b082      	sub	sp, #8
 8005636:	b901      	cbnz	r1, 800563a <__ascii_mbtowc+0x6>
 8005638:	a901      	add	r1, sp, #4
 800563a:	b142      	cbz	r2, 800564e <__ascii_mbtowc+0x1a>
 800563c:	b14b      	cbz	r3, 8005652 <__ascii_mbtowc+0x1e>
 800563e:	7813      	ldrb	r3, [r2, #0]
 8005640:	600b      	str	r3, [r1, #0]
 8005642:	7812      	ldrb	r2, [r2, #0]
 8005644:	1e10      	subs	r0, r2, #0
 8005646:	bf18      	it	ne
 8005648:	2001      	movne	r0, #1
 800564a:	b002      	add	sp, #8
 800564c:	4770      	bx	lr
 800564e:	4610      	mov	r0, r2
 8005650:	e7fb      	b.n	800564a <__ascii_mbtowc+0x16>
 8005652:	f06f 0001 	mvn.w	r0, #1
 8005656:	e7f8      	b.n	800564a <__ascii_mbtowc+0x16>

08005658 <__malloc_lock>:
 8005658:	4801      	ldr	r0, [pc, #4]	; (8005660 <__malloc_lock+0x8>)
 800565a:	f000 bbf1 	b.w	8005e40 <__retarget_lock_acquire_recursive>
 800565e:	bf00      	nop
 8005660:	2000066c 	.word	0x2000066c

08005664 <__malloc_unlock>:
 8005664:	4801      	ldr	r0, [pc, #4]	; (800566c <__malloc_unlock+0x8>)
 8005666:	f000 bbec 	b.w	8005e42 <__retarget_lock_release_recursive>
 800566a:	bf00      	nop
 800566c:	2000066c 	.word	0x2000066c

08005670 <__sfputc_r>:
 8005670:	6893      	ldr	r3, [r2, #8]
 8005672:	3b01      	subs	r3, #1
 8005674:	2b00      	cmp	r3, #0
 8005676:	b410      	push	{r4}
 8005678:	6093      	str	r3, [r2, #8]
 800567a:	da08      	bge.n	800568e <__sfputc_r+0x1e>
 800567c:	6994      	ldr	r4, [r2, #24]
 800567e:	42a3      	cmp	r3, r4
 8005680:	db01      	blt.n	8005686 <__sfputc_r+0x16>
 8005682:	290a      	cmp	r1, #10
 8005684:	d103      	bne.n	800568e <__sfputc_r+0x1e>
 8005686:	f85d 4b04 	ldr.w	r4, [sp], #4
 800568a:	f000 b94b 	b.w	8005924 <__swbuf_r>
 800568e:	6813      	ldr	r3, [r2, #0]
 8005690:	1c58      	adds	r0, r3, #1
 8005692:	6010      	str	r0, [r2, #0]
 8005694:	7019      	strb	r1, [r3, #0]
 8005696:	4608      	mov	r0, r1
 8005698:	f85d 4b04 	ldr.w	r4, [sp], #4
 800569c:	4770      	bx	lr

0800569e <__sfputs_r>:
 800569e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056a0:	4606      	mov	r6, r0
 80056a2:	460f      	mov	r7, r1
 80056a4:	4614      	mov	r4, r2
 80056a6:	18d5      	adds	r5, r2, r3
 80056a8:	42ac      	cmp	r4, r5
 80056aa:	d101      	bne.n	80056b0 <__sfputs_r+0x12>
 80056ac:	2000      	movs	r0, #0
 80056ae:	e007      	b.n	80056c0 <__sfputs_r+0x22>
 80056b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056b4:	463a      	mov	r2, r7
 80056b6:	4630      	mov	r0, r6
 80056b8:	f7ff ffda 	bl	8005670 <__sfputc_r>
 80056bc:	1c43      	adds	r3, r0, #1
 80056be:	d1f3      	bne.n	80056a8 <__sfputs_r+0xa>
 80056c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080056c4 <_vfiprintf_r>:
 80056c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056c8:	460d      	mov	r5, r1
 80056ca:	b09d      	sub	sp, #116	; 0x74
 80056cc:	4614      	mov	r4, r2
 80056ce:	4698      	mov	r8, r3
 80056d0:	4606      	mov	r6, r0
 80056d2:	b118      	cbz	r0, 80056dc <_vfiprintf_r+0x18>
 80056d4:	6983      	ldr	r3, [r0, #24]
 80056d6:	b90b      	cbnz	r3, 80056dc <_vfiprintf_r+0x18>
 80056d8:	f000 fb14 	bl	8005d04 <__sinit>
 80056dc:	4b89      	ldr	r3, [pc, #548]	; (8005904 <_vfiprintf_r+0x240>)
 80056de:	429d      	cmp	r5, r3
 80056e0:	d11b      	bne.n	800571a <_vfiprintf_r+0x56>
 80056e2:	6875      	ldr	r5, [r6, #4]
 80056e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80056e6:	07d9      	lsls	r1, r3, #31
 80056e8:	d405      	bmi.n	80056f6 <_vfiprintf_r+0x32>
 80056ea:	89ab      	ldrh	r3, [r5, #12]
 80056ec:	059a      	lsls	r2, r3, #22
 80056ee:	d402      	bmi.n	80056f6 <_vfiprintf_r+0x32>
 80056f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80056f2:	f000 fba5 	bl	8005e40 <__retarget_lock_acquire_recursive>
 80056f6:	89ab      	ldrh	r3, [r5, #12]
 80056f8:	071b      	lsls	r3, r3, #28
 80056fa:	d501      	bpl.n	8005700 <_vfiprintf_r+0x3c>
 80056fc:	692b      	ldr	r3, [r5, #16]
 80056fe:	b9eb      	cbnz	r3, 800573c <_vfiprintf_r+0x78>
 8005700:	4629      	mov	r1, r5
 8005702:	4630      	mov	r0, r6
 8005704:	f000 f96e 	bl	80059e4 <__swsetup_r>
 8005708:	b1c0      	cbz	r0, 800573c <_vfiprintf_r+0x78>
 800570a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800570c:	07dc      	lsls	r4, r3, #31
 800570e:	d50e      	bpl.n	800572e <_vfiprintf_r+0x6a>
 8005710:	f04f 30ff 	mov.w	r0, #4294967295
 8005714:	b01d      	add	sp, #116	; 0x74
 8005716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800571a:	4b7b      	ldr	r3, [pc, #492]	; (8005908 <_vfiprintf_r+0x244>)
 800571c:	429d      	cmp	r5, r3
 800571e:	d101      	bne.n	8005724 <_vfiprintf_r+0x60>
 8005720:	68b5      	ldr	r5, [r6, #8]
 8005722:	e7df      	b.n	80056e4 <_vfiprintf_r+0x20>
 8005724:	4b79      	ldr	r3, [pc, #484]	; (800590c <_vfiprintf_r+0x248>)
 8005726:	429d      	cmp	r5, r3
 8005728:	bf08      	it	eq
 800572a:	68f5      	ldreq	r5, [r6, #12]
 800572c:	e7da      	b.n	80056e4 <_vfiprintf_r+0x20>
 800572e:	89ab      	ldrh	r3, [r5, #12]
 8005730:	0598      	lsls	r0, r3, #22
 8005732:	d4ed      	bmi.n	8005710 <_vfiprintf_r+0x4c>
 8005734:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005736:	f000 fb84 	bl	8005e42 <__retarget_lock_release_recursive>
 800573a:	e7e9      	b.n	8005710 <_vfiprintf_r+0x4c>
 800573c:	2300      	movs	r3, #0
 800573e:	9309      	str	r3, [sp, #36]	; 0x24
 8005740:	2320      	movs	r3, #32
 8005742:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005746:	f8cd 800c 	str.w	r8, [sp, #12]
 800574a:	2330      	movs	r3, #48	; 0x30
 800574c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005910 <_vfiprintf_r+0x24c>
 8005750:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005754:	f04f 0901 	mov.w	r9, #1
 8005758:	4623      	mov	r3, r4
 800575a:	469a      	mov	sl, r3
 800575c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005760:	b10a      	cbz	r2, 8005766 <_vfiprintf_r+0xa2>
 8005762:	2a25      	cmp	r2, #37	; 0x25
 8005764:	d1f9      	bne.n	800575a <_vfiprintf_r+0x96>
 8005766:	ebba 0b04 	subs.w	fp, sl, r4
 800576a:	d00b      	beq.n	8005784 <_vfiprintf_r+0xc0>
 800576c:	465b      	mov	r3, fp
 800576e:	4622      	mov	r2, r4
 8005770:	4629      	mov	r1, r5
 8005772:	4630      	mov	r0, r6
 8005774:	f7ff ff93 	bl	800569e <__sfputs_r>
 8005778:	3001      	adds	r0, #1
 800577a:	f000 80aa 	beq.w	80058d2 <_vfiprintf_r+0x20e>
 800577e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005780:	445a      	add	r2, fp
 8005782:	9209      	str	r2, [sp, #36]	; 0x24
 8005784:	f89a 3000 	ldrb.w	r3, [sl]
 8005788:	2b00      	cmp	r3, #0
 800578a:	f000 80a2 	beq.w	80058d2 <_vfiprintf_r+0x20e>
 800578e:	2300      	movs	r3, #0
 8005790:	f04f 32ff 	mov.w	r2, #4294967295
 8005794:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005798:	f10a 0a01 	add.w	sl, sl, #1
 800579c:	9304      	str	r3, [sp, #16]
 800579e:	9307      	str	r3, [sp, #28]
 80057a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80057a4:	931a      	str	r3, [sp, #104]	; 0x68
 80057a6:	4654      	mov	r4, sl
 80057a8:	2205      	movs	r2, #5
 80057aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057ae:	4858      	ldr	r0, [pc, #352]	; (8005910 <_vfiprintf_r+0x24c>)
 80057b0:	f7fa fd16 	bl	80001e0 <memchr>
 80057b4:	9a04      	ldr	r2, [sp, #16]
 80057b6:	b9d8      	cbnz	r0, 80057f0 <_vfiprintf_r+0x12c>
 80057b8:	06d1      	lsls	r1, r2, #27
 80057ba:	bf44      	itt	mi
 80057bc:	2320      	movmi	r3, #32
 80057be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80057c2:	0713      	lsls	r3, r2, #28
 80057c4:	bf44      	itt	mi
 80057c6:	232b      	movmi	r3, #43	; 0x2b
 80057c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80057cc:	f89a 3000 	ldrb.w	r3, [sl]
 80057d0:	2b2a      	cmp	r3, #42	; 0x2a
 80057d2:	d015      	beq.n	8005800 <_vfiprintf_r+0x13c>
 80057d4:	9a07      	ldr	r2, [sp, #28]
 80057d6:	4654      	mov	r4, sl
 80057d8:	2000      	movs	r0, #0
 80057da:	f04f 0c0a 	mov.w	ip, #10
 80057de:	4621      	mov	r1, r4
 80057e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80057e4:	3b30      	subs	r3, #48	; 0x30
 80057e6:	2b09      	cmp	r3, #9
 80057e8:	d94e      	bls.n	8005888 <_vfiprintf_r+0x1c4>
 80057ea:	b1b0      	cbz	r0, 800581a <_vfiprintf_r+0x156>
 80057ec:	9207      	str	r2, [sp, #28]
 80057ee:	e014      	b.n	800581a <_vfiprintf_r+0x156>
 80057f0:	eba0 0308 	sub.w	r3, r0, r8
 80057f4:	fa09 f303 	lsl.w	r3, r9, r3
 80057f8:	4313      	orrs	r3, r2
 80057fa:	9304      	str	r3, [sp, #16]
 80057fc:	46a2      	mov	sl, r4
 80057fe:	e7d2      	b.n	80057a6 <_vfiprintf_r+0xe2>
 8005800:	9b03      	ldr	r3, [sp, #12]
 8005802:	1d19      	adds	r1, r3, #4
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	9103      	str	r1, [sp, #12]
 8005808:	2b00      	cmp	r3, #0
 800580a:	bfbb      	ittet	lt
 800580c:	425b      	neglt	r3, r3
 800580e:	f042 0202 	orrlt.w	r2, r2, #2
 8005812:	9307      	strge	r3, [sp, #28]
 8005814:	9307      	strlt	r3, [sp, #28]
 8005816:	bfb8      	it	lt
 8005818:	9204      	strlt	r2, [sp, #16]
 800581a:	7823      	ldrb	r3, [r4, #0]
 800581c:	2b2e      	cmp	r3, #46	; 0x2e
 800581e:	d10c      	bne.n	800583a <_vfiprintf_r+0x176>
 8005820:	7863      	ldrb	r3, [r4, #1]
 8005822:	2b2a      	cmp	r3, #42	; 0x2a
 8005824:	d135      	bne.n	8005892 <_vfiprintf_r+0x1ce>
 8005826:	9b03      	ldr	r3, [sp, #12]
 8005828:	1d1a      	adds	r2, r3, #4
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	9203      	str	r2, [sp, #12]
 800582e:	2b00      	cmp	r3, #0
 8005830:	bfb8      	it	lt
 8005832:	f04f 33ff 	movlt.w	r3, #4294967295
 8005836:	3402      	adds	r4, #2
 8005838:	9305      	str	r3, [sp, #20]
 800583a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005920 <_vfiprintf_r+0x25c>
 800583e:	7821      	ldrb	r1, [r4, #0]
 8005840:	2203      	movs	r2, #3
 8005842:	4650      	mov	r0, sl
 8005844:	f7fa fccc 	bl	80001e0 <memchr>
 8005848:	b140      	cbz	r0, 800585c <_vfiprintf_r+0x198>
 800584a:	2340      	movs	r3, #64	; 0x40
 800584c:	eba0 000a 	sub.w	r0, r0, sl
 8005850:	fa03 f000 	lsl.w	r0, r3, r0
 8005854:	9b04      	ldr	r3, [sp, #16]
 8005856:	4303      	orrs	r3, r0
 8005858:	3401      	adds	r4, #1
 800585a:	9304      	str	r3, [sp, #16]
 800585c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005860:	482c      	ldr	r0, [pc, #176]	; (8005914 <_vfiprintf_r+0x250>)
 8005862:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005866:	2206      	movs	r2, #6
 8005868:	f7fa fcba 	bl	80001e0 <memchr>
 800586c:	2800      	cmp	r0, #0
 800586e:	d03f      	beq.n	80058f0 <_vfiprintf_r+0x22c>
 8005870:	4b29      	ldr	r3, [pc, #164]	; (8005918 <_vfiprintf_r+0x254>)
 8005872:	bb1b      	cbnz	r3, 80058bc <_vfiprintf_r+0x1f8>
 8005874:	9b03      	ldr	r3, [sp, #12]
 8005876:	3307      	adds	r3, #7
 8005878:	f023 0307 	bic.w	r3, r3, #7
 800587c:	3308      	adds	r3, #8
 800587e:	9303      	str	r3, [sp, #12]
 8005880:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005882:	443b      	add	r3, r7
 8005884:	9309      	str	r3, [sp, #36]	; 0x24
 8005886:	e767      	b.n	8005758 <_vfiprintf_r+0x94>
 8005888:	fb0c 3202 	mla	r2, ip, r2, r3
 800588c:	460c      	mov	r4, r1
 800588e:	2001      	movs	r0, #1
 8005890:	e7a5      	b.n	80057de <_vfiprintf_r+0x11a>
 8005892:	2300      	movs	r3, #0
 8005894:	3401      	adds	r4, #1
 8005896:	9305      	str	r3, [sp, #20]
 8005898:	4619      	mov	r1, r3
 800589a:	f04f 0c0a 	mov.w	ip, #10
 800589e:	4620      	mov	r0, r4
 80058a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80058a4:	3a30      	subs	r2, #48	; 0x30
 80058a6:	2a09      	cmp	r2, #9
 80058a8:	d903      	bls.n	80058b2 <_vfiprintf_r+0x1ee>
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d0c5      	beq.n	800583a <_vfiprintf_r+0x176>
 80058ae:	9105      	str	r1, [sp, #20]
 80058b0:	e7c3      	b.n	800583a <_vfiprintf_r+0x176>
 80058b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80058b6:	4604      	mov	r4, r0
 80058b8:	2301      	movs	r3, #1
 80058ba:	e7f0      	b.n	800589e <_vfiprintf_r+0x1da>
 80058bc:	ab03      	add	r3, sp, #12
 80058be:	9300      	str	r3, [sp, #0]
 80058c0:	462a      	mov	r2, r5
 80058c2:	4b16      	ldr	r3, [pc, #88]	; (800591c <_vfiprintf_r+0x258>)
 80058c4:	a904      	add	r1, sp, #16
 80058c6:	4630      	mov	r0, r6
 80058c8:	f7fd ffb4 	bl	8003834 <_printf_float>
 80058cc:	4607      	mov	r7, r0
 80058ce:	1c78      	adds	r0, r7, #1
 80058d0:	d1d6      	bne.n	8005880 <_vfiprintf_r+0x1bc>
 80058d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80058d4:	07d9      	lsls	r1, r3, #31
 80058d6:	d405      	bmi.n	80058e4 <_vfiprintf_r+0x220>
 80058d8:	89ab      	ldrh	r3, [r5, #12]
 80058da:	059a      	lsls	r2, r3, #22
 80058dc:	d402      	bmi.n	80058e4 <_vfiprintf_r+0x220>
 80058de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80058e0:	f000 faaf 	bl	8005e42 <__retarget_lock_release_recursive>
 80058e4:	89ab      	ldrh	r3, [r5, #12]
 80058e6:	065b      	lsls	r3, r3, #25
 80058e8:	f53f af12 	bmi.w	8005710 <_vfiprintf_r+0x4c>
 80058ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80058ee:	e711      	b.n	8005714 <_vfiprintf_r+0x50>
 80058f0:	ab03      	add	r3, sp, #12
 80058f2:	9300      	str	r3, [sp, #0]
 80058f4:	462a      	mov	r2, r5
 80058f6:	4b09      	ldr	r3, [pc, #36]	; (800591c <_vfiprintf_r+0x258>)
 80058f8:	a904      	add	r1, sp, #16
 80058fa:	4630      	mov	r0, r6
 80058fc:	f7fe fa3e 	bl	8003d7c <_printf_i>
 8005900:	e7e4      	b.n	80058cc <_vfiprintf_r+0x208>
 8005902:	bf00      	nop
 8005904:	080064fc 	.word	0x080064fc
 8005908:	0800651c 	.word	0x0800651c
 800590c:	080064dc 	.word	0x080064dc
 8005910:	080063ca 	.word	0x080063ca
 8005914:	080063d4 	.word	0x080063d4
 8005918:	08003835 	.word	0x08003835
 800591c:	0800569f 	.word	0x0800569f
 8005920:	080063d0 	.word	0x080063d0

08005924 <__swbuf_r>:
 8005924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005926:	460e      	mov	r6, r1
 8005928:	4614      	mov	r4, r2
 800592a:	4605      	mov	r5, r0
 800592c:	b118      	cbz	r0, 8005936 <__swbuf_r+0x12>
 800592e:	6983      	ldr	r3, [r0, #24]
 8005930:	b90b      	cbnz	r3, 8005936 <__swbuf_r+0x12>
 8005932:	f000 f9e7 	bl	8005d04 <__sinit>
 8005936:	4b21      	ldr	r3, [pc, #132]	; (80059bc <__swbuf_r+0x98>)
 8005938:	429c      	cmp	r4, r3
 800593a:	d12b      	bne.n	8005994 <__swbuf_r+0x70>
 800593c:	686c      	ldr	r4, [r5, #4]
 800593e:	69a3      	ldr	r3, [r4, #24]
 8005940:	60a3      	str	r3, [r4, #8]
 8005942:	89a3      	ldrh	r3, [r4, #12]
 8005944:	071a      	lsls	r2, r3, #28
 8005946:	d52f      	bpl.n	80059a8 <__swbuf_r+0x84>
 8005948:	6923      	ldr	r3, [r4, #16]
 800594a:	b36b      	cbz	r3, 80059a8 <__swbuf_r+0x84>
 800594c:	6923      	ldr	r3, [r4, #16]
 800594e:	6820      	ldr	r0, [r4, #0]
 8005950:	1ac0      	subs	r0, r0, r3
 8005952:	6963      	ldr	r3, [r4, #20]
 8005954:	b2f6      	uxtb	r6, r6
 8005956:	4283      	cmp	r3, r0
 8005958:	4637      	mov	r7, r6
 800595a:	dc04      	bgt.n	8005966 <__swbuf_r+0x42>
 800595c:	4621      	mov	r1, r4
 800595e:	4628      	mov	r0, r5
 8005960:	f000 f93c 	bl	8005bdc <_fflush_r>
 8005964:	bb30      	cbnz	r0, 80059b4 <__swbuf_r+0x90>
 8005966:	68a3      	ldr	r3, [r4, #8]
 8005968:	3b01      	subs	r3, #1
 800596a:	60a3      	str	r3, [r4, #8]
 800596c:	6823      	ldr	r3, [r4, #0]
 800596e:	1c5a      	adds	r2, r3, #1
 8005970:	6022      	str	r2, [r4, #0]
 8005972:	701e      	strb	r6, [r3, #0]
 8005974:	6963      	ldr	r3, [r4, #20]
 8005976:	3001      	adds	r0, #1
 8005978:	4283      	cmp	r3, r0
 800597a:	d004      	beq.n	8005986 <__swbuf_r+0x62>
 800597c:	89a3      	ldrh	r3, [r4, #12]
 800597e:	07db      	lsls	r3, r3, #31
 8005980:	d506      	bpl.n	8005990 <__swbuf_r+0x6c>
 8005982:	2e0a      	cmp	r6, #10
 8005984:	d104      	bne.n	8005990 <__swbuf_r+0x6c>
 8005986:	4621      	mov	r1, r4
 8005988:	4628      	mov	r0, r5
 800598a:	f000 f927 	bl	8005bdc <_fflush_r>
 800598e:	b988      	cbnz	r0, 80059b4 <__swbuf_r+0x90>
 8005990:	4638      	mov	r0, r7
 8005992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005994:	4b0a      	ldr	r3, [pc, #40]	; (80059c0 <__swbuf_r+0x9c>)
 8005996:	429c      	cmp	r4, r3
 8005998:	d101      	bne.n	800599e <__swbuf_r+0x7a>
 800599a:	68ac      	ldr	r4, [r5, #8]
 800599c:	e7cf      	b.n	800593e <__swbuf_r+0x1a>
 800599e:	4b09      	ldr	r3, [pc, #36]	; (80059c4 <__swbuf_r+0xa0>)
 80059a0:	429c      	cmp	r4, r3
 80059a2:	bf08      	it	eq
 80059a4:	68ec      	ldreq	r4, [r5, #12]
 80059a6:	e7ca      	b.n	800593e <__swbuf_r+0x1a>
 80059a8:	4621      	mov	r1, r4
 80059aa:	4628      	mov	r0, r5
 80059ac:	f000 f81a 	bl	80059e4 <__swsetup_r>
 80059b0:	2800      	cmp	r0, #0
 80059b2:	d0cb      	beq.n	800594c <__swbuf_r+0x28>
 80059b4:	f04f 37ff 	mov.w	r7, #4294967295
 80059b8:	e7ea      	b.n	8005990 <__swbuf_r+0x6c>
 80059ba:	bf00      	nop
 80059bc:	080064fc 	.word	0x080064fc
 80059c0:	0800651c 	.word	0x0800651c
 80059c4:	080064dc 	.word	0x080064dc

080059c8 <__ascii_wctomb>:
 80059c8:	b149      	cbz	r1, 80059de <__ascii_wctomb+0x16>
 80059ca:	2aff      	cmp	r2, #255	; 0xff
 80059cc:	bf85      	ittet	hi
 80059ce:	238a      	movhi	r3, #138	; 0x8a
 80059d0:	6003      	strhi	r3, [r0, #0]
 80059d2:	700a      	strbls	r2, [r1, #0]
 80059d4:	f04f 30ff 	movhi.w	r0, #4294967295
 80059d8:	bf98      	it	ls
 80059da:	2001      	movls	r0, #1
 80059dc:	4770      	bx	lr
 80059de:	4608      	mov	r0, r1
 80059e0:	4770      	bx	lr
	...

080059e4 <__swsetup_r>:
 80059e4:	4b32      	ldr	r3, [pc, #200]	; (8005ab0 <__swsetup_r+0xcc>)
 80059e6:	b570      	push	{r4, r5, r6, lr}
 80059e8:	681d      	ldr	r5, [r3, #0]
 80059ea:	4606      	mov	r6, r0
 80059ec:	460c      	mov	r4, r1
 80059ee:	b125      	cbz	r5, 80059fa <__swsetup_r+0x16>
 80059f0:	69ab      	ldr	r3, [r5, #24]
 80059f2:	b913      	cbnz	r3, 80059fa <__swsetup_r+0x16>
 80059f4:	4628      	mov	r0, r5
 80059f6:	f000 f985 	bl	8005d04 <__sinit>
 80059fa:	4b2e      	ldr	r3, [pc, #184]	; (8005ab4 <__swsetup_r+0xd0>)
 80059fc:	429c      	cmp	r4, r3
 80059fe:	d10f      	bne.n	8005a20 <__swsetup_r+0x3c>
 8005a00:	686c      	ldr	r4, [r5, #4]
 8005a02:	89a3      	ldrh	r3, [r4, #12]
 8005a04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005a08:	0719      	lsls	r1, r3, #28
 8005a0a:	d42c      	bmi.n	8005a66 <__swsetup_r+0x82>
 8005a0c:	06dd      	lsls	r5, r3, #27
 8005a0e:	d411      	bmi.n	8005a34 <__swsetup_r+0x50>
 8005a10:	2309      	movs	r3, #9
 8005a12:	6033      	str	r3, [r6, #0]
 8005a14:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005a18:	81a3      	strh	r3, [r4, #12]
 8005a1a:	f04f 30ff 	mov.w	r0, #4294967295
 8005a1e:	e03e      	b.n	8005a9e <__swsetup_r+0xba>
 8005a20:	4b25      	ldr	r3, [pc, #148]	; (8005ab8 <__swsetup_r+0xd4>)
 8005a22:	429c      	cmp	r4, r3
 8005a24:	d101      	bne.n	8005a2a <__swsetup_r+0x46>
 8005a26:	68ac      	ldr	r4, [r5, #8]
 8005a28:	e7eb      	b.n	8005a02 <__swsetup_r+0x1e>
 8005a2a:	4b24      	ldr	r3, [pc, #144]	; (8005abc <__swsetup_r+0xd8>)
 8005a2c:	429c      	cmp	r4, r3
 8005a2e:	bf08      	it	eq
 8005a30:	68ec      	ldreq	r4, [r5, #12]
 8005a32:	e7e6      	b.n	8005a02 <__swsetup_r+0x1e>
 8005a34:	0758      	lsls	r0, r3, #29
 8005a36:	d512      	bpl.n	8005a5e <__swsetup_r+0x7a>
 8005a38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a3a:	b141      	cbz	r1, 8005a4e <__swsetup_r+0x6a>
 8005a3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a40:	4299      	cmp	r1, r3
 8005a42:	d002      	beq.n	8005a4a <__swsetup_r+0x66>
 8005a44:	4630      	mov	r0, r6
 8005a46:	f7ff fd0b 	bl	8005460 <_free_r>
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	6363      	str	r3, [r4, #52]	; 0x34
 8005a4e:	89a3      	ldrh	r3, [r4, #12]
 8005a50:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005a54:	81a3      	strh	r3, [r4, #12]
 8005a56:	2300      	movs	r3, #0
 8005a58:	6063      	str	r3, [r4, #4]
 8005a5a:	6923      	ldr	r3, [r4, #16]
 8005a5c:	6023      	str	r3, [r4, #0]
 8005a5e:	89a3      	ldrh	r3, [r4, #12]
 8005a60:	f043 0308 	orr.w	r3, r3, #8
 8005a64:	81a3      	strh	r3, [r4, #12]
 8005a66:	6923      	ldr	r3, [r4, #16]
 8005a68:	b94b      	cbnz	r3, 8005a7e <__swsetup_r+0x9a>
 8005a6a:	89a3      	ldrh	r3, [r4, #12]
 8005a6c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005a70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a74:	d003      	beq.n	8005a7e <__swsetup_r+0x9a>
 8005a76:	4621      	mov	r1, r4
 8005a78:	4630      	mov	r0, r6
 8005a7a:	f000 fa07 	bl	8005e8c <__smakebuf_r>
 8005a7e:	89a0      	ldrh	r0, [r4, #12]
 8005a80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005a84:	f010 0301 	ands.w	r3, r0, #1
 8005a88:	d00a      	beq.n	8005aa0 <__swsetup_r+0xbc>
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	60a3      	str	r3, [r4, #8]
 8005a8e:	6963      	ldr	r3, [r4, #20]
 8005a90:	425b      	negs	r3, r3
 8005a92:	61a3      	str	r3, [r4, #24]
 8005a94:	6923      	ldr	r3, [r4, #16]
 8005a96:	b943      	cbnz	r3, 8005aaa <__swsetup_r+0xc6>
 8005a98:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005a9c:	d1ba      	bne.n	8005a14 <__swsetup_r+0x30>
 8005a9e:	bd70      	pop	{r4, r5, r6, pc}
 8005aa0:	0781      	lsls	r1, r0, #30
 8005aa2:	bf58      	it	pl
 8005aa4:	6963      	ldrpl	r3, [r4, #20]
 8005aa6:	60a3      	str	r3, [r4, #8]
 8005aa8:	e7f4      	b.n	8005a94 <__swsetup_r+0xb0>
 8005aaa:	2000      	movs	r0, #0
 8005aac:	e7f7      	b.n	8005a9e <__swsetup_r+0xba>
 8005aae:	bf00      	nop
 8005ab0:	20000320 	.word	0x20000320
 8005ab4:	080064fc 	.word	0x080064fc
 8005ab8:	0800651c 	.word	0x0800651c
 8005abc:	080064dc 	.word	0x080064dc

08005ac0 <abort>:
 8005ac0:	b508      	push	{r3, lr}
 8005ac2:	2006      	movs	r0, #6
 8005ac4:	f000 fa4a 	bl	8005f5c <raise>
 8005ac8:	2001      	movs	r0, #1
 8005aca:	f7fc febf 	bl	800284c <_exit>
	...

08005ad0 <__sflush_r>:
 8005ad0:	898a      	ldrh	r2, [r1, #12]
 8005ad2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ad6:	4605      	mov	r5, r0
 8005ad8:	0710      	lsls	r0, r2, #28
 8005ada:	460c      	mov	r4, r1
 8005adc:	d458      	bmi.n	8005b90 <__sflush_r+0xc0>
 8005ade:	684b      	ldr	r3, [r1, #4]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	dc05      	bgt.n	8005af0 <__sflush_r+0x20>
 8005ae4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	dc02      	bgt.n	8005af0 <__sflush_r+0x20>
 8005aea:	2000      	movs	r0, #0
 8005aec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005af0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005af2:	2e00      	cmp	r6, #0
 8005af4:	d0f9      	beq.n	8005aea <__sflush_r+0x1a>
 8005af6:	2300      	movs	r3, #0
 8005af8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005afc:	682f      	ldr	r7, [r5, #0]
 8005afe:	602b      	str	r3, [r5, #0]
 8005b00:	d032      	beq.n	8005b68 <__sflush_r+0x98>
 8005b02:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005b04:	89a3      	ldrh	r3, [r4, #12]
 8005b06:	075a      	lsls	r2, r3, #29
 8005b08:	d505      	bpl.n	8005b16 <__sflush_r+0x46>
 8005b0a:	6863      	ldr	r3, [r4, #4]
 8005b0c:	1ac0      	subs	r0, r0, r3
 8005b0e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005b10:	b10b      	cbz	r3, 8005b16 <__sflush_r+0x46>
 8005b12:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005b14:	1ac0      	subs	r0, r0, r3
 8005b16:	2300      	movs	r3, #0
 8005b18:	4602      	mov	r2, r0
 8005b1a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005b1c:	6a21      	ldr	r1, [r4, #32]
 8005b1e:	4628      	mov	r0, r5
 8005b20:	47b0      	blx	r6
 8005b22:	1c43      	adds	r3, r0, #1
 8005b24:	89a3      	ldrh	r3, [r4, #12]
 8005b26:	d106      	bne.n	8005b36 <__sflush_r+0x66>
 8005b28:	6829      	ldr	r1, [r5, #0]
 8005b2a:	291d      	cmp	r1, #29
 8005b2c:	d82c      	bhi.n	8005b88 <__sflush_r+0xb8>
 8005b2e:	4a2a      	ldr	r2, [pc, #168]	; (8005bd8 <__sflush_r+0x108>)
 8005b30:	40ca      	lsrs	r2, r1
 8005b32:	07d6      	lsls	r6, r2, #31
 8005b34:	d528      	bpl.n	8005b88 <__sflush_r+0xb8>
 8005b36:	2200      	movs	r2, #0
 8005b38:	6062      	str	r2, [r4, #4]
 8005b3a:	04d9      	lsls	r1, r3, #19
 8005b3c:	6922      	ldr	r2, [r4, #16]
 8005b3e:	6022      	str	r2, [r4, #0]
 8005b40:	d504      	bpl.n	8005b4c <__sflush_r+0x7c>
 8005b42:	1c42      	adds	r2, r0, #1
 8005b44:	d101      	bne.n	8005b4a <__sflush_r+0x7a>
 8005b46:	682b      	ldr	r3, [r5, #0]
 8005b48:	b903      	cbnz	r3, 8005b4c <__sflush_r+0x7c>
 8005b4a:	6560      	str	r0, [r4, #84]	; 0x54
 8005b4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b4e:	602f      	str	r7, [r5, #0]
 8005b50:	2900      	cmp	r1, #0
 8005b52:	d0ca      	beq.n	8005aea <__sflush_r+0x1a>
 8005b54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b58:	4299      	cmp	r1, r3
 8005b5a:	d002      	beq.n	8005b62 <__sflush_r+0x92>
 8005b5c:	4628      	mov	r0, r5
 8005b5e:	f7ff fc7f 	bl	8005460 <_free_r>
 8005b62:	2000      	movs	r0, #0
 8005b64:	6360      	str	r0, [r4, #52]	; 0x34
 8005b66:	e7c1      	b.n	8005aec <__sflush_r+0x1c>
 8005b68:	6a21      	ldr	r1, [r4, #32]
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	4628      	mov	r0, r5
 8005b6e:	47b0      	blx	r6
 8005b70:	1c41      	adds	r1, r0, #1
 8005b72:	d1c7      	bne.n	8005b04 <__sflush_r+0x34>
 8005b74:	682b      	ldr	r3, [r5, #0]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d0c4      	beq.n	8005b04 <__sflush_r+0x34>
 8005b7a:	2b1d      	cmp	r3, #29
 8005b7c:	d001      	beq.n	8005b82 <__sflush_r+0xb2>
 8005b7e:	2b16      	cmp	r3, #22
 8005b80:	d101      	bne.n	8005b86 <__sflush_r+0xb6>
 8005b82:	602f      	str	r7, [r5, #0]
 8005b84:	e7b1      	b.n	8005aea <__sflush_r+0x1a>
 8005b86:	89a3      	ldrh	r3, [r4, #12]
 8005b88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b8c:	81a3      	strh	r3, [r4, #12]
 8005b8e:	e7ad      	b.n	8005aec <__sflush_r+0x1c>
 8005b90:	690f      	ldr	r7, [r1, #16]
 8005b92:	2f00      	cmp	r7, #0
 8005b94:	d0a9      	beq.n	8005aea <__sflush_r+0x1a>
 8005b96:	0793      	lsls	r3, r2, #30
 8005b98:	680e      	ldr	r6, [r1, #0]
 8005b9a:	bf08      	it	eq
 8005b9c:	694b      	ldreq	r3, [r1, #20]
 8005b9e:	600f      	str	r7, [r1, #0]
 8005ba0:	bf18      	it	ne
 8005ba2:	2300      	movne	r3, #0
 8005ba4:	eba6 0807 	sub.w	r8, r6, r7
 8005ba8:	608b      	str	r3, [r1, #8]
 8005baa:	f1b8 0f00 	cmp.w	r8, #0
 8005bae:	dd9c      	ble.n	8005aea <__sflush_r+0x1a>
 8005bb0:	6a21      	ldr	r1, [r4, #32]
 8005bb2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005bb4:	4643      	mov	r3, r8
 8005bb6:	463a      	mov	r2, r7
 8005bb8:	4628      	mov	r0, r5
 8005bba:	47b0      	blx	r6
 8005bbc:	2800      	cmp	r0, #0
 8005bbe:	dc06      	bgt.n	8005bce <__sflush_r+0xfe>
 8005bc0:	89a3      	ldrh	r3, [r4, #12]
 8005bc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bc6:	81a3      	strh	r3, [r4, #12]
 8005bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8005bcc:	e78e      	b.n	8005aec <__sflush_r+0x1c>
 8005bce:	4407      	add	r7, r0
 8005bd0:	eba8 0800 	sub.w	r8, r8, r0
 8005bd4:	e7e9      	b.n	8005baa <__sflush_r+0xda>
 8005bd6:	bf00      	nop
 8005bd8:	20400001 	.word	0x20400001

08005bdc <_fflush_r>:
 8005bdc:	b538      	push	{r3, r4, r5, lr}
 8005bde:	690b      	ldr	r3, [r1, #16]
 8005be0:	4605      	mov	r5, r0
 8005be2:	460c      	mov	r4, r1
 8005be4:	b913      	cbnz	r3, 8005bec <_fflush_r+0x10>
 8005be6:	2500      	movs	r5, #0
 8005be8:	4628      	mov	r0, r5
 8005bea:	bd38      	pop	{r3, r4, r5, pc}
 8005bec:	b118      	cbz	r0, 8005bf6 <_fflush_r+0x1a>
 8005bee:	6983      	ldr	r3, [r0, #24]
 8005bf0:	b90b      	cbnz	r3, 8005bf6 <_fflush_r+0x1a>
 8005bf2:	f000 f887 	bl	8005d04 <__sinit>
 8005bf6:	4b14      	ldr	r3, [pc, #80]	; (8005c48 <_fflush_r+0x6c>)
 8005bf8:	429c      	cmp	r4, r3
 8005bfa:	d11b      	bne.n	8005c34 <_fflush_r+0x58>
 8005bfc:	686c      	ldr	r4, [r5, #4]
 8005bfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d0ef      	beq.n	8005be6 <_fflush_r+0xa>
 8005c06:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005c08:	07d0      	lsls	r0, r2, #31
 8005c0a:	d404      	bmi.n	8005c16 <_fflush_r+0x3a>
 8005c0c:	0599      	lsls	r1, r3, #22
 8005c0e:	d402      	bmi.n	8005c16 <_fflush_r+0x3a>
 8005c10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c12:	f000 f915 	bl	8005e40 <__retarget_lock_acquire_recursive>
 8005c16:	4628      	mov	r0, r5
 8005c18:	4621      	mov	r1, r4
 8005c1a:	f7ff ff59 	bl	8005ad0 <__sflush_r>
 8005c1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c20:	07da      	lsls	r2, r3, #31
 8005c22:	4605      	mov	r5, r0
 8005c24:	d4e0      	bmi.n	8005be8 <_fflush_r+0xc>
 8005c26:	89a3      	ldrh	r3, [r4, #12]
 8005c28:	059b      	lsls	r3, r3, #22
 8005c2a:	d4dd      	bmi.n	8005be8 <_fflush_r+0xc>
 8005c2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c2e:	f000 f908 	bl	8005e42 <__retarget_lock_release_recursive>
 8005c32:	e7d9      	b.n	8005be8 <_fflush_r+0xc>
 8005c34:	4b05      	ldr	r3, [pc, #20]	; (8005c4c <_fflush_r+0x70>)
 8005c36:	429c      	cmp	r4, r3
 8005c38:	d101      	bne.n	8005c3e <_fflush_r+0x62>
 8005c3a:	68ac      	ldr	r4, [r5, #8]
 8005c3c:	e7df      	b.n	8005bfe <_fflush_r+0x22>
 8005c3e:	4b04      	ldr	r3, [pc, #16]	; (8005c50 <_fflush_r+0x74>)
 8005c40:	429c      	cmp	r4, r3
 8005c42:	bf08      	it	eq
 8005c44:	68ec      	ldreq	r4, [r5, #12]
 8005c46:	e7da      	b.n	8005bfe <_fflush_r+0x22>
 8005c48:	080064fc 	.word	0x080064fc
 8005c4c:	0800651c 	.word	0x0800651c
 8005c50:	080064dc 	.word	0x080064dc

08005c54 <std>:
 8005c54:	2300      	movs	r3, #0
 8005c56:	b510      	push	{r4, lr}
 8005c58:	4604      	mov	r4, r0
 8005c5a:	e9c0 3300 	strd	r3, r3, [r0]
 8005c5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005c62:	6083      	str	r3, [r0, #8]
 8005c64:	8181      	strh	r1, [r0, #12]
 8005c66:	6643      	str	r3, [r0, #100]	; 0x64
 8005c68:	81c2      	strh	r2, [r0, #14]
 8005c6a:	6183      	str	r3, [r0, #24]
 8005c6c:	4619      	mov	r1, r3
 8005c6e:	2208      	movs	r2, #8
 8005c70:	305c      	adds	r0, #92	; 0x5c
 8005c72:	f7fd fd37 	bl	80036e4 <memset>
 8005c76:	4b05      	ldr	r3, [pc, #20]	; (8005c8c <std+0x38>)
 8005c78:	6263      	str	r3, [r4, #36]	; 0x24
 8005c7a:	4b05      	ldr	r3, [pc, #20]	; (8005c90 <std+0x3c>)
 8005c7c:	62a3      	str	r3, [r4, #40]	; 0x28
 8005c7e:	4b05      	ldr	r3, [pc, #20]	; (8005c94 <std+0x40>)
 8005c80:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005c82:	4b05      	ldr	r3, [pc, #20]	; (8005c98 <std+0x44>)
 8005c84:	6224      	str	r4, [r4, #32]
 8005c86:	6323      	str	r3, [r4, #48]	; 0x30
 8005c88:	bd10      	pop	{r4, pc}
 8005c8a:	bf00      	nop
 8005c8c:	08005f95 	.word	0x08005f95
 8005c90:	08005fb7 	.word	0x08005fb7
 8005c94:	08005fef 	.word	0x08005fef
 8005c98:	08006013 	.word	0x08006013

08005c9c <_cleanup_r>:
 8005c9c:	4901      	ldr	r1, [pc, #4]	; (8005ca4 <_cleanup_r+0x8>)
 8005c9e:	f000 b8af 	b.w	8005e00 <_fwalk_reent>
 8005ca2:	bf00      	nop
 8005ca4:	08005bdd 	.word	0x08005bdd

08005ca8 <__sfmoreglue>:
 8005ca8:	b570      	push	{r4, r5, r6, lr}
 8005caa:	1e4a      	subs	r2, r1, #1
 8005cac:	2568      	movs	r5, #104	; 0x68
 8005cae:	4355      	muls	r5, r2
 8005cb0:	460e      	mov	r6, r1
 8005cb2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005cb6:	f7ff fc23 	bl	8005500 <_malloc_r>
 8005cba:	4604      	mov	r4, r0
 8005cbc:	b140      	cbz	r0, 8005cd0 <__sfmoreglue+0x28>
 8005cbe:	2100      	movs	r1, #0
 8005cc0:	e9c0 1600 	strd	r1, r6, [r0]
 8005cc4:	300c      	adds	r0, #12
 8005cc6:	60a0      	str	r0, [r4, #8]
 8005cc8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005ccc:	f7fd fd0a 	bl	80036e4 <memset>
 8005cd0:	4620      	mov	r0, r4
 8005cd2:	bd70      	pop	{r4, r5, r6, pc}

08005cd4 <__sfp_lock_acquire>:
 8005cd4:	4801      	ldr	r0, [pc, #4]	; (8005cdc <__sfp_lock_acquire+0x8>)
 8005cd6:	f000 b8b3 	b.w	8005e40 <__retarget_lock_acquire_recursive>
 8005cda:	bf00      	nop
 8005cdc:	20000670 	.word	0x20000670

08005ce0 <__sfp_lock_release>:
 8005ce0:	4801      	ldr	r0, [pc, #4]	; (8005ce8 <__sfp_lock_release+0x8>)
 8005ce2:	f000 b8ae 	b.w	8005e42 <__retarget_lock_release_recursive>
 8005ce6:	bf00      	nop
 8005ce8:	20000670 	.word	0x20000670

08005cec <__sinit_lock_acquire>:
 8005cec:	4801      	ldr	r0, [pc, #4]	; (8005cf4 <__sinit_lock_acquire+0x8>)
 8005cee:	f000 b8a7 	b.w	8005e40 <__retarget_lock_acquire_recursive>
 8005cf2:	bf00      	nop
 8005cf4:	2000066b 	.word	0x2000066b

08005cf8 <__sinit_lock_release>:
 8005cf8:	4801      	ldr	r0, [pc, #4]	; (8005d00 <__sinit_lock_release+0x8>)
 8005cfa:	f000 b8a2 	b.w	8005e42 <__retarget_lock_release_recursive>
 8005cfe:	bf00      	nop
 8005d00:	2000066b 	.word	0x2000066b

08005d04 <__sinit>:
 8005d04:	b510      	push	{r4, lr}
 8005d06:	4604      	mov	r4, r0
 8005d08:	f7ff fff0 	bl	8005cec <__sinit_lock_acquire>
 8005d0c:	69a3      	ldr	r3, [r4, #24]
 8005d0e:	b11b      	cbz	r3, 8005d18 <__sinit+0x14>
 8005d10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d14:	f7ff bff0 	b.w	8005cf8 <__sinit_lock_release>
 8005d18:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005d1c:	6523      	str	r3, [r4, #80]	; 0x50
 8005d1e:	4b13      	ldr	r3, [pc, #76]	; (8005d6c <__sinit+0x68>)
 8005d20:	4a13      	ldr	r2, [pc, #76]	; (8005d70 <__sinit+0x6c>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	62a2      	str	r2, [r4, #40]	; 0x28
 8005d26:	42a3      	cmp	r3, r4
 8005d28:	bf04      	itt	eq
 8005d2a:	2301      	moveq	r3, #1
 8005d2c:	61a3      	streq	r3, [r4, #24]
 8005d2e:	4620      	mov	r0, r4
 8005d30:	f000 f820 	bl	8005d74 <__sfp>
 8005d34:	6060      	str	r0, [r4, #4]
 8005d36:	4620      	mov	r0, r4
 8005d38:	f000 f81c 	bl	8005d74 <__sfp>
 8005d3c:	60a0      	str	r0, [r4, #8]
 8005d3e:	4620      	mov	r0, r4
 8005d40:	f000 f818 	bl	8005d74 <__sfp>
 8005d44:	2200      	movs	r2, #0
 8005d46:	60e0      	str	r0, [r4, #12]
 8005d48:	2104      	movs	r1, #4
 8005d4a:	6860      	ldr	r0, [r4, #4]
 8005d4c:	f7ff ff82 	bl	8005c54 <std>
 8005d50:	68a0      	ldr	r0, [r4, #8]
 8005d52:	2201      	movs	r2, #1
 8005d54:	2109      	movs	r1, #9
 8005d56:	f7ff ff7d 	bl	8005c54 <std>
 8005d5a:	68e0      	ldr	r0, [r4, #12]
 8005d5c:	2202      	movs	r2, #2
 8005d5e:	2112      	movs	r1, #18
 8005d60:	f7ff ff78 	bl	8005c54 <std>
 8005d64:	2301      	movs	r3, #1
 8005d66:	61a3      	str	r3, [r4, #24]
 8005d68:	e7d2      	b.n	8005d10 <__sinit+0xc>
 8005d6a:	bf00      	nop
 8005d6c:	0800615c 	.word	0x0800615c
 8005d70:	08005c9d 	.word	0x08005c9d

08005d74 <__sfp>:
 8005d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d76:	4607      	mov	r7, r0
 8005d78:	f7ff ffac 	bl	8005cd4 <__sfp_lock_acquire>
 8005d7c:	4b1e      	ldr	r3, [pc, #120]	; (8005df8 <__sfp+0x84>)
 8005d7e:	681e      	ldr	r6, [r3, #0]
 8005d80:	69b3      	ldr	r3, [r6, #24]
 8005d82:	b913      	cbnz	r3, 8005d8a <__sfp+0x16>
 8005d84:	4630      	mov	r0, r6
 8005d86:	f7ff ffbd 	bl	8005d04 <__sinit>
 8005d8a:	3648      	adds	r6, #72	; 0x48
 8005d8c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005d90:	3b01      	subs	r3, #1
 8005d92:	d503      	bpl.n	8005d9c <__sfp+0x28>
 8005d94:	6833      	ldr	r3, [r6, #0]
 8005d96:	b30b      	cbz	r3, 8005ddc <__sfp+0x68>
 8005d98:	6836      	ldr	r6, [r6, #0]
 8005d9a:	e7f7      	b.n	8005d8c <__sfp+0x18>
 8005d9c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005da0:	b9d5      	cbnz	r5, 8005dd8 <__sfp+0x64>
 8005da2:	4b16      	ldr	r3, [pc, #88]	; (8005dfc <__sfp+0x88>)
 8005da4:	60e3      	str	r3, [r4, #12]
 8005da6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005daa:	6665      	str	r5, [r4, #100]	; 0x64
 8005dac:	f000 f847 	bl	8005e3e <__retarget_lock_init_recursive>
 8005db0:	f7ff ff96 	bl	8005ce0 <__sfp_lock_release>
 8005db4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005db8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005dbc:	6025      	str	r5, [r4, #0]
 8005dbe:	61a5      	str	r5, [r4, #24]
 8005dc0:	2208      	movs	r2, #8
 8005dc2:	4629      	mov	r1, r5
 8005dc4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005dc8:	f7fd fc8c 	bl	80036e4 <memset>
 8005dcc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005dd0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005dd4:	4620      	mov	r0, r4
 8005dd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005dd8:	3468      	adds	r4, #104	; 0x68
 8005dda:	e7d9      	b.n	8005d90 <__sfp+0x1c>
 8005ddc:	2104      	movs	r1, #4
 8005dde:	4638      	mov	r0, r7
 8005de0:	f7ff ff62 	bl	8005ca8 <__sfmoreglue>
 8005de4:	4604      	mov	r4, r0
 8005de6:	6030      	str	r0, [r6, #0]
 8005de8:	2800      	cmp	r0, #0
 8005dea:	d1d5      	bne.n	8005d98 <__sfp+0x24>
 8005dec:	f7ff ff78 	bl	8005ce0 <__sfp_lock_release>
 8005df0:	230c      	movs	r3, #12
 8005df2:	603b      	str	r3, [r7, #0]
 8005df4:	e7ee      	b.n	8005dd4 <__sfp+0x60>
 8005df6:	bf00      	nop
 8005df8:	0800615c 	.word	0x0800615c
 8005dfc:	ffff0001 	.word	0xffff0001

08005e00 <_fwalk_reent>:
 8005e00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e04:	4606      	mov	r6, r0
 8005e06:	4688      	mov	r8, r1
 8005e08:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005e0c:	2700      	movs	r7, #0
 8005e0e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005e12:	f1b9 0901 	subs.w	r9, r9, #1
 8005e16:	d505      	bpl.n	8005e24 <_fwalk_reent+0x24>
 8005e18:	6824      	ldr	r4, [r4, #0]
 8005e1a:	2c00      	cmp	r4, #0
 8005e1c:	d1f7      	bne.n	8005e0e <_fwalk_reent+0xe>
 8005e1e:	4638      	mov	r0, r7
 8005e20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e24:	89ab      	ldrh	r3, [r5, #12]
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d907      	bls.n	8005e3a <_fwalk_reent+0x3a>
 8005e2a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005e2e:	3301      	adds	r3, #1
 8005e30:	d003      	beq.n	8005e3a <_fwalk_reent+0x3a>
 8005e32:	4629      	mov	r1, r5
 8005e34:	4630      	mov	r0, r6
 8005e36:	47c0      	blx	r8
 8005e38:	4307      	orrs	r7, r0
 8005e3a:	3568      	adds	r5, #104	; 0x68
 8005e3c:	e7e9      	b.n	8005e12 <_fwalk_reent+0x12>

08005e3e <__retarget_lock_init_recursive>:
 8005e3e:	4770      	bx	lr

08005e40 <__retarget_lock_acquire_recursive>:
 8005e40:	4770      	bx	lr

08005e42 <__retarget_lock_release_recursive>:
 8005e42:	4770      	bx	lr

08005e44 <__swhatbuf_r>:
 8005e44:	b570      	push	{r4, r5, r6, lr}
 8005e46:	460e      	mov	r6, r1
 8005e48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e4c:	2900      	cmp	r1, #0
 8005e4e:	b096      	sub	sp, #88	; 0x58
 8005e50:	4614      	mov	r4, r2
 8005e52:	461d      	mov	r5, r3
 8005e54:	da07      	bge.n	8005e66 <__swhatbuf_r+0x22>
 8005e56:	2300      	movs	r3, #0
 8005e58:	602b      	str	r3, [r5, #0]
 8005e5a:	89b3      	ldrh	r3, [r6, #12]
 8005e5c:	061a      	lsls	r2, r3, #24
 8005e5e:	d410      	bmi.n	8005e82 <__swhatbuf_r+0x3e>
 8005e60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e64:	e00e      	b.n	8005e84 <__swhatbuf_r+0x40>
 8005e66:	466a      	mov	r2, sp
 8005e68:	f000 f8fa 	bl	8006060 <_fstat_r>
 8005e6c:	2800      	cmp	r0, #0
 8005e6e:	dbf2      	blt.n	8005e56 <__swhatbuf_r+0x12>
 8005e70:	9a01      	ldr	r2, [sp, #4]
 8005e72:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005e76:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005e7a:	425a      	negs	r2, r3
 8005e7c:	415a      	adcs	r2, r3
 8005e7e:	602a      	str	r2, [r5, #0]
 8005e80:	e7ee      	b.n	8005e60 <__swhatbuf_r+0x1c>
 8005e82:	2340      	movs	r3, #64	; 0x40
 8005e84:	2000      	movs	r0, #0
 8005e86:	6023      	str	r3, [r4, #0]
 8005e88:	b016      	add	sp, #88	; 0x58
 8005e8a:	bd70      	pop	{r4, r5, r6, pc}

08005e8c <__smakebuf_r>:
 8005e8c:	898b      	ldrh	r3, [r1, #12]
 8005e8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005e90:	079d      	lsls	r5, r3, #30
 8005e92:	4606      	mov	r6, r0
 8005e94:	460c      	mov	r4, r1
 8005e96:	d507      	bpl.n	8005ea8 <__smakebuf_r+0x1c>
 8005e98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005e9c:	6023      	str	r3, [r4, #0]
 8005e9e:	6123      	str	r3, [r4, #16]
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	6163      	str	r3, [r4, #20]
 8005ea4:	b002      	add	sp, #8
 8005ea6:	bd70      	pop	{r4, r5, r6, pc}
 8005ea8:	ab01      	add	r3, sp, #4
 8005eaa:	466a      	mov	r2, sp
 8005eac:	f7ff ffca 	bl	8005e44 <__swhatbuf_r>
 8005eb0:	9900      	ldr	r1, [sp, #0]
 8005eb2:	4605      	mov	r5, r0
 8005eb4:	4630      	mov	r0, r6
 8005eb6:	f7ff fb23 	bl	8005500 <_malloc_r>
 8005eba:	b948      	cbnz	r0, 8005ed0 <__smakebuf_r+0x44>
 8005ebc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ec0:	059a      	lsls	r2, r3, #22
 8005ec2:	d4ef      	bmi.n	8005ea4 <__smakebuf_r+0x18>
 8005ec4:	f023 0303 	bic.w	r3, r3, #3
 8005ec8:	f043 0302 	orr.w	r3, r3, #2
 8005ecc:	81a3      	strh	r3, [r4, #12]
 8005ece:	e7e3      	b.n	8005e98 <__smakebuf_r+0xc>
 8005ed0:	4b0d      	ldr	r3, [pc, #52]	; (8005f08 <__smakebuf_r+0x7c>)
 8005ed2:	62b3      	str	r3, [r6, #40]	; 0x28
 8005ed4:	89a3      	ldrh	r3, [r4, #12]
 8005ed6:	6020      	str	r0, [r4, #0]
 8005ed8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005edc:	81a3      	strh	r3, [r4, #12]
 8005ede:	9b00      	ldr	r3, [sp, #0]
 8005ee0:	6163      	str	r3, [r4, #20]
 8005ee2:	9b01      	ldr	r3, [sp, #4]
 8005ee4:	6120      	str	r0, [r4, #16]
 8005ee6:	b15b      	cbz	r3, 8005f00 <__smakebuf_r+0x74>
 8005ee8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005eec:	4630      	mov	r0, r6
 8005eee:	f000 f8c9 	bl	8006084 <_isatty_r>
 8005ef2:	b128      	cbz	r0, 8005f00 <__smakebuf_r+0x74>
 8005ef4:	89a3      	ldrh	r3, [r4, #12]
 8005ef6:	f023 0303 	bic.w	r3, r3, #3
 8005efa:	f043 0301 	orr.w	r3, r3, #1
 8005efe:	81a3      	strh	r3, [r4, #12]
 8005f00:	89a0      	ldrh	r0, [r4, #12]
 8005f02:	4305      	orrs	r5, r0
 8005f04:	81a5      	strh	r5, [r4, #12]
 8005f06:	e7cd      	b.n	8005ea4 <__smakebuf_r+0x18>
 8005f08:	08005c9d 	.word	0x08005c9d

08005f0c <_raise_r>:
 8005f0c:	291f      	cmp	r1, #31
 8005f0e:	b538      	push	{r3, r4, r5, lr}
 8005f10:	4604      	mov	r4, r0
 8005f12:	460d      	mov	r5, r1
 8005f14:	d904      	bls.n	8005f20 <_raise_r+0x14>
 8005f16:	2316      	movs	r3, #22
 8005f18:	6003      	str	r3, [r0, #0]
 8005f1a:	f04f 30ff 	mov.w	r0, #4294967295
 8005f1e:	bd38      	pop	{r3, r4, r5, pc}
 8005f20:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005f22:	b112      	cbz	r2, 8005f2a <_raise_r+0x1e>
 8005f24:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005f28:	b94b      	cbnz	r3, 8005f3e <_raise_r+0x32>
 8005f2a:	4620      	mov	r0, r4
 8005f2c:	f000 f830 	bl	8005f90 <_getpid_r>
 8005f30:	462a      	mov	r2, r5
 8005f32:	4601      	mov	r1, r0
 8005f34:	4620      	mov	r0, r4
 8005f36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f3a:	f000 b817 	b.w	8005f6c <_kill_r>
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d00a      	beq.n	8005f58 <_raise_r+0x4c>
 8005f42:	1c59      	adds	r1, r3, #1
 8005f44:	d103      	bne.n	8005f4e <_raise_r+0x42>
 8005f46:	2316      	movs	r3, #22
 8005f48:	6003      	str	r3, [r0, #0]
 8005f4a:	2001      	movs	r0, #1
 8005f4c:	e7e7      	b.n	8005f1e <_raise_r+0x12>
 8005f4e:	2400      	movs	r4, #0
 8005f50:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005f54:	4628      	mov	r0, r5
 8005f56:	4798      	blx	r3
 8005f58:	2000      	movs	r0, #0
 8005f5a:	e7e0      	b.n	8005f1e <_raise_r+0x12>

08005f5c <raise>:
 8005f5c:	4b02      	ldr	r3, [pc, #8]	; (8005f68 <raise+0xc>)
 8005f5e:	4601      	mov	r1, r0
 8005f60:	6818      	ldr	r0, [r3, #0]
 8005f62:	f7ff bfd3 	b.w	8005f0c <_raise_r>
 8005f66:	bf00      	nop
 8005f68:	20000320 	.word	0x20000320

08005f6c <_kill_r>:
 8005f6c:	b538      	push	{r3, r4, r5, lr}
 8005f6e:	4d07      	ldr	r5, [pc, #28]	; (8005f8c <_kill_r+0x20>)
 8005f70:	2300      	movs	r3, #0
 8005f72:	4604      	mov	r4, r0
 8005f74:	4608      	mov	r0, r1
 8005f76:	4611      	mov	r1, r2
 8005f78:	602b      	str	r3, [r5, #0]
 8005f7a:	f7fc fc57 	bl	800282c <_kill>
 8005f7e:	1c43      	adds	r3, r0, #1
 8005f80:	d102      	bne.n	8005f88 <_kill_r+0x1c>
 8005f82:	682b      	ldr	r3, [r5, #0]
 8005f84:	b103      	cbz	r3, 8005f88 <_kill_r+0x1c>
 8005f86:	6023      	str	r3, [r4, #0]
 8005f88:	bd38      	pop	{r3, r4, r5, pc}
 8005f8a:	bf00      	nop
 8005f8c:	20000664 	.word	0x20000664

08005f90 <_getpid_r>:
 8005f90:	f7fc bc44 	b.w	800281c <_getpid>

08005f94 <__sread>:
 8005f94:	b510      	push	{r4, lr}
 8005f96:	460c      	mov	r4, r1
 8005f98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f9c:	f000 f894 	bl	80060c8 <_read_r>
 8005fa0:	2800      	cmp	r0, #0
 8005fa2:	bfab      	itete	ge
 8005fa4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005fa6:	89a3      	ldrhlt	r3, [r4, #12]
 8005fa8:	181b      	addge	r3, r3, r0
 8005faa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005fae:	bfac      	ite	ge
 8005fb0:	6563      	strge	r3, [r4, #84]	; 0x54
 8005fb2:	81a3      	strhlt	r3, [r4, #12]
 8005fb4:	bd10      	pop	{r4, pc}

08005fb6 <__swrite>:
 8005fb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fba:	461f      	mov	r7, r3
 8005fbc:	898b      	ldrh	r3, [r1, #12]
 8005fbe:	05db      	lsls	r3, r3, #23
 8005fc0:	4605      	mov	r5, r0
 8005fc2:	460c      	mov	r4, r1
 8005fc4:	4616      	mov	r6, r2
 8005fc6:	d505      	bpl.n	8005fd4 <__swrite+0x1e>
 8005fc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fcc:	2302      	movs	r3, #2
 8005fce:	2200      	movs	r2, #0
 8005fd0:	f000 f868 	bl	80060a4 <_lseek_r>
 8005fd4:	89a3      	ldrh	r3, [r4, #12]
 8005fd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005fda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005fde:	81a3      	strh	r3, [r4, #12]
 8005fe0:	4632      	mov	r2, r6
 8005fe2:	463b      	mov	r3, r7
 8005fe4:	4628      	mov	r0, r5
 8005fe6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005fea:	f000 b817 	b.w	800601c <_write_r>

08005fee <__sseek>:
 8005fee:	b510      	push	{r4, lr}
 8005ff0:	460c      	mov	r4, r1
 8005ff2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ff6:	f000 f855 	bl	80060a4 <_lseek_r>
 8005ffa:	1c43      	adds	r3, r0, #1
 8005ffc:	89a3      	ldrh	r3, [r4, #12]
 8005ffe:	bf15      	itete	ne
 8006000:	6560      	strne	r0, [r4, #84]	; 0x54
 8006002:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006006:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800600a:	81a3      	strheq	r3, [r4, #12]
 800600c:	bf18      	it	ne
 800600e:	81a3      	strhne	r3, [r4, #12]
 8006010:	bd10      	pop	{r4, pc}

08006012 <__sclose>:
 8006012:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006016:	f000 b813 	b.w	8006040 <_close_r>
	...

0800601c <_write_r>:
 800601c:	b538      	push	{r3, r4, r5, lr}
 800601e:	4d07      	ldr	r5, [pc, #28]	; (800603c <_write_r+0x20>)
 8006020:	4604      	mov	r4, r0
 8006022:	4608      	mov	r0, r1
 8006024:	4611      	mov	r1, r2
 8006026:	2200      	movs	r2, #0
 8006028:	602a      	str	r2, [r5, #0]
 800602a:	461a      	mov	r2, r3
 800602c:	f7fc fc35 	bl	800289a <_write>
 8006030:	1c43      	adds	r3, r0, #1
 8006032:	d102      	bne.n	800603a <_write_r+0x1e>
 8006034:	682b      	ldr	r3, [r5, #0]
 8006036:	b103      	cbz	r3, 800603a <_write_r+0x1e>
 8006038:	6023      	str	r3, [r4, #0]
 800603a:	bd38      	pop	{r3, r4, r5, pc}
 800603c:	20000664 	.word	0x20000664

08006040 <_close_r>:
 8006040:	b538      	push	{r3, r4, r5, lr}
 8006042:	4d06      	ldr	r5, [pc, #24]	; (800605c <_close_r+0x1c>)
 8006044:	2300      	movs	r3, #0
 8006046:	4604      	mov	r4, r0
 8006048:	4608      	mov	r0, r1
 800604a:	602b      	str	r3, [r5, #0]
 800604c:	f7fc fc41 	bl	80028d2 <_close>
 8006050:	1c43      	adds	r3, r0, #1
 8006052:	d102      	bne.n	800605a <_close_r+0x1a>
 8006054:	682b      	ldr	r3, [r5, #0]
 8006056:	b103      	cbz	r3, 800605a <_close_r+0x1a>
 8006058:	6023      	str	r3, [r4, #0]
 800605a:	bd38      	pop	{r3, r4, r5, pc}
 800605c:	20000664 	.word	0x20000664

08006060 <_fstat_r>:
 8006060:	b538      	push	{r3, r4, r5, lr}
 8006062:	4d07      	ldr	r5, [pc, #28]	; (8006080 <_fstat_r+0x20>)
 8006064:	2300      	movs	r3, #0
 8006066:	4604      	mov	r4, r0
 8006068:	4608      	mov	r0, r1
 800606a:	4611      	mov	r1, r2
 800606c:	602b      	str	r3, [r5, #0]
 800606e:	f7fc fc3c 	bl	80028ea <_fstat>
 8006072:	1c43      	adds	r3, r0, #1
 8006074:	d102      	bne.n	800607c <_fstat_r+0x1c>
 8006076:	682b      	ldr	r3, [r5, #0]
 8006078:	b103      	cbz	r3, 800607c <_fstat_r+0x1c>
 800607a:	6023      	str	r3, [r4, #0]
 800607c:	bd38      	pop	{r3, r4, r5, pc}
 800607e:	bf00      	nop
 8006080:	20000664 	.word	0x20000664

08006084 <_isatty_r>:
 8006084:	b538      	push	{r3, r4, r5, lr}
 8006086:	4d06      	ldr	r5, [pc, #24]	; (80060a0 <_isatty_r+0x1c>)
 8006088:	2300      	movs	r3, #0
 800608a:	4604      	mov	r4, r0
 800608c:	4608      	mov	r0, r1
 800608e:	602b      	str	r3, [r5, #0]
 8006090:	f7fc fc3b 	bl	800290a <_isatty>
 8006094:	1c43      	adds	r3, r0, #1
 8006096:	d102      	bne.n	800609e <_isatty_r+0x1a>
 8006098:	682b      	ldr	r3, [r5, #0]
 800609a:	b103      	cbz	r3, 800609e <_isatty_r+0x1a>
 800609c:	6023      	str	r3, [r4, #0]
 800609e:	bd38      	pop	{r3, r4, r5, pc}
 80060a0:	20000664 	.word	0x20000664

080060a4 <_lseek_r>:
 80060a4:	b538      	push	{r3, r4, r5, lr}
 80060a6:	4d07      	ldr	r5, [pc, #28]	; (80060c4 <_lseek_r+0x20>)
 80060a8:	4604      	mov	r4, r0
 80060aa:	4608      	mov	r0, r1
 80060ac:	4611      	mov	r1, r2
 80060ae:	2200      	movs	r2, #0
 80060b0:	602a      	str	r2, [r5, #0]
 80060b2:	461a      	mov	r2, r3
 80060b4:	f7fc fc34 	bl	8002920 <_lseek>
 80060b8:	1c43      	adds	r3, r0, #1
 80060ba:	d102      	bne.n	80060c2 <_lseek_r+0x1e>
 80060bc:	682b      	ldr	r3, [r5, #0]
 80060be:	b103      	cbz	r3, 80060c2 <_lseek_r+0x1e>
 80060c0:	6023      	str	r3, [r4, #0]
 80060c2:	bd38      	pop	{r3, r4, r5, pc}
 80060c4:	20000664 	.word	0x20000664

080060c8 <_read_r>:
 80060c8:	b538      	push	{r3, r4, r5, lr}
 80060ca:	4d07      	ldr	r5, [pc, #28]	; (80060e8 <_read_r+0x20>)
 80060cc:	4604      	mov	r4, r0
 80060ce:	4608      	mov	r0, r1
 80060d0:	4611      	mov	r1, r2
 80060d2:	2200      	movs	r2, #0
 80060d4:	602a      	str	r2, [r5, #0]
 80060d6:	461a      	mov	r2, r3
 80060d8:	f7fc fbc2 	bl	8002860 <_read>
 80060dc:	1c43      	adds	r3, r0, #1
 80060de:	d102      	bne.n	80060e6 <_read_r+0x1e>
 80060e0:	682b      	ldr	r3, [r5, #0]
 80060e2:	b103      	cbz	r3, 80060e6 <_read_r+0x1e>
 80060e4:	6023      	str	r3, [r4, #0]
 80060e6:	bd38      	pop	{r3, r4, r5, pc}
 80060e8:	20000664 	.word	0x20000664

080060ec <_init>:
 80060ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060ee:	bf00      	nop
 80060f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060f2:	bc08      	pop	{r3}
 80060f4:	469e      	mov	lr, r3
 80060f6:	4770      	bx	lr

080060f8 <_fini>:
 80060f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060fa:	bf00      	nop
 80060fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060fe:	bc08      	pop	{r3}
 8006100:	469e      	mov	lr, r3
 8006102:	4770      	bx	lr
